
G:/mcu/GD32_FreeRTOS_templete/bin/Debug/GD32_FreeRTOS_templete_0.1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000150  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f04  08000150  08000150  00001150  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08004054  08004054  00005054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000cc  08004344  08004344  00005344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000380  08004410  08004410  00005410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08004790  08004790  00005790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .fini_array   00000004  08004794  08004794  00005794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .data         00000058  20000000  08004798  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001300  20000058  080047f0  00006058  2**2
                  ALLOC
  9 ._user_heap_stack 00000200  20001358  080047f0  00006358  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00002900  00000000  00000000  00006088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   000107b7  00000000  00000000  00008988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a74  00000000  00000000  0001913f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000752a  00000000  00000000  0001bbb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  000230e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da7  00000000  00000000  00023f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dd9d  00000000  00000000  00024cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eeec  00000000  00000000  00032a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0003117c  00000000  00000000  00041940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000044  00000000  00000000  00072abc  2**0
                  CONTENTS, READONLY
 21 .debug_line_str 00000239  00000000  00000000  00072b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000150 <__restore_core_regs>:
 8000150:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 8000154:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000158:	469c      	mov	ip, r3
 800015a:	46a6      	mov	lr, r4
 800015c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000160:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000164:	46e5      	mov	sp, ip
 8000166:	bd00      	pop	{pc}

08000168 <__gnu_Unwind_Restore_VFP>:
 8000168:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 800016c:	4770      	bx	lr
 800016e:	bf00      	nop

08000170 <__gnu_Unwind_Save_VFP>:
 8000170:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop

08000178 <__gnu_Unwind_Restore_VFP_D>:
 8000178:	ec90 0b20 	vldmia	r0, {d0-d15}
 800017c:	4770      	bx	lr
 800017e:	bf00      	nop

08000180 <__gnu_Unwind_Save_VFP_D>:
 8000180:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop

08000188 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000188:	ecd0 0b20 	vldmia	r0, {d16-d31}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop

08000190 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000190:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop

08000198 <__gnu_Unwind_Restore_WMMXD>:
 8000198:	ecf0 0102 	ldfe	f0, [r0], #8
 800019c:	ecf0 1102 	ldfe	f1, [r0], #8
 80001a0:	ecf0 2102 	ldfe	f2, [r0], #8
 80001a4:	ecf0 3102 	ldfe	f3, [r0], #8
 80001a8:	ecf0 4102 	ldfe	f4, [r0], #8
 80001ac:	ecf0 5102 	ldfe	f5, [r0], #8
 80001b0:	ecf0 6102 	ldfe	f6, [r0], #8
 80001b4:	ecf0 7102 	ldfe	f7, [r0], #8
 80001b8:	ecf0 8102 	ldfp	f0, [r0], #8
 80001bc:	ecf0 9102 	ldfp	f1, [r0], #8
 80001c0:	ecf0 a102 	ldfp	f2, [r0], #8
 80001c4:	ecf0 b102 	ldfp	f3, [r0], #8
 80001c8:	ecf0 c102 	ldfp	f4, [r0], #8
 80001cc:	ecf0 d102 	ldfp	f5, [r0], #8
 80001d0:	ecf0 e102 	ldfp	f6, [r0], #8
 80001d4:	ecf0 f102 	ldfp	f7, [r0], #8
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop

080001dc <__gnu_Unwind_Save_WMMXD>:
 80001dc:	ece0 0102 	stfe	f0, [r0], #8
 80001e0:	ece0 1102 	stfe	f1, [r0], #8
 80001e4:	ece0 2102 	stfe	f2, [r0], #8
 80001e8:	ece0 3102 	stfe	f3, [r0], #8
 80001ec:	ece0 4102 	stfe	f4, [r0], #8
 80001f0:	ece0 5102 	stfe	f5, [r0], #8
 80001f4:	ece0 6102 	stfe	f6, [r0], #8
 80001f8:	ece0 7102 	stfe	f7, [r0], #8
 80001fc:	ece0 8102 	stfp	f0, [r0], #8
 8000200:	ece0 9102 	stfp	f1, [r0], #8
 8000204:	ece0 a102 	stfp	f2, [r0], #8
 8000208:	ece0 b102 	stfp	f3, [r0], #8
 800020c:	ece0 c102 	stfp	f4, [r0], #8
 8000210:	ece0 d102 	stfp	f5, [r0], #8
 8000214:	ece0 e102 	stfp	f6, [r0], #8
 8000218:	ece0 f102 	stfp	f7, [r0], #8
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__gnu_Unwind_Restore_WMMXC>:
 8000220:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000224:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000228:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800022c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop

08000234 <__gnu_Unwind_Save_WMMXC>:
 8000234:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000238:	fca0 9101 	stc2	1, cr9, [r0], #4
 800023c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000240:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop

08000248 <_Unwind_RaiseException>:
 8000248:	46ec      	mov	ip, sp
 800024a:	b500      	push	{lr}
 800024c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000250:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000254:	f04f 0300 	mov.w	r3, #0
 8000258:	e92d 000c 	stmdb	sp!, {r2, r3}
 800025c:	a901      	add	r1, sp, #4
 800025e:	f003 f925 	bl	80034ac <__gnu_Unwind_RaiseException>
 8000262:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8000266:	b012      	add	sp, #72	@ 0x48
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop

0800026c <_Unwind_Resume>:
 800026c:	46ec      	mov	ip, sp
 800026e:	b500      	push	{lr}
 8000270:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000274:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000278:	f04f 0300 	mov.w	r3, #0
 800027c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000280:	a901      	add	r1, sp, #4
 8000282:	f003 f94f 	bl	8003524 <__gnu_Unwind_Resume>
 8000286:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 800028a:	b012      	add	sp, #72	@ 0x48
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <_Unwind_Resume_or_Rethrow>:
 8000290:	46ec      	mov	ip, sp
 8000292:	b500      	push	{lr}
 8000294:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000298:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800029c:	f04f 0300 	mov.w	r3, #0
 80002a0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80002a4:	a901      	add	r1, sp, #4
 80002a6:	f003 f95f 	bl	8003568 <__gnu_Unwind_Resume_or_Rethrow>
 80002aa:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80002ae:	b012      	add	sp, #72	@ 0x48
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop

080002b4 <_Unwind_ForcedUnwind>:
 80002b4:	46ec      	mov	ip, sp
 80002b6:	b500      	push	{lr}
 80002b8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80002bc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80002c0:	f04f 0300 	mov.w	r3, #0
 80002c4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80002c8:	ab01      	add	r3, sp, #4
 80002ca:	f003 f923 	bl	8003514 <__gnu_Unwind_ForcedUnwind>
 80002ce:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80002d2:	b012      	add	sp, #72	@ 0x48
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop

080002d8 <_Unwind_Backtrace>:
 80002d8:	46ec      	mov	ip, sp
 80002da:	b500      	push	{lr}
 80002dc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80002e0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80002ec:	aa01      	add	r2, sp, #4
 80002ee:	f003 f993 	bl	8003618 <__gnu_Unwind_Backtrace>
 80002f2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80002f6:	b012      	add	sp, #72	@ 0x48
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop

080002fc <strlen>:
 80002fc:	4603      	mov	r3, r0
 80002fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000302:	2a00      	cmp	r2, #0
 8000304:	d1fb      	bne.n	80002fe <strlen+0x2>
 8000306:	1a18      	subs	r0, r3, r0
 8000308:	3801      	subs	r0, #1
 800030a:	4770      	bx	lr

0800030c <deregister_tm_clones>:
 800030c:	4803      	ldr	r0, [pc, #12]	@ (800031c <deregister_tm_clones+0x10>)
 800030e:	4b04      	ldr	r3, [pc, #16]	@ (8000320 <deregister_tm_clones+0x14>)
 8000310:	4283      	cmp	r3, r0
 8000312:	d002      	beq.n	800031a <deregister_tm_clones+0xe>
 8000314:	4b03      	ldr	r3, [pc, #12]	@ (8000324 <deregister_tm_clones+0x18>)
 8000316:	b103      	cbz	r3, 800031a <deregister_tm_clones+0xe>
 8000318:	4718      	bx	r3
 800031a:	4770      	bx	lr
 800031c:	20000058 	.word	0x20000058
 8000320:	20000058 	.word	0x20000058
 8000324:	00000000 	.word	0x00000000

08000328 <register_tm_clones>:
 8000328:	4805      	ldr	r0, [pc, #20]	@ (8000340 <register_tm_clones+0x18>)
 800032a:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <register_tm_clones+0x1c>)
 800032c:	1a1b      	subs	r3, r3, r0
 800032e:	0fd9      	lsrs	r1, r3, #31
 8000330:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000334:	1049      	asrs	r1, r1, #1
 8000336:	d002      	beq.n	800033e <register_tm_clones+0x16>
 8000338:	4b03      	ldr	r3, [pc, #12]	@ (8000348 <register_tm_clones+0x20>)
 800033a:	b103      	cbz	r3, 800033e <register_tm_clones+0x16>
 800033c:	4718      	bx	r3
 800033e:	4770      	bx	lr
 8000340:	20000058 	.word	0x20000058
 8000344:	20000058 	.word	0x20000058
 8000348:	00000000 	.word	0x00000000

0800034c <__do_global_dtors_aux>:
 800034c:	b510      	push	{r4, lr}
 800034e:	4c06      	ldr	r4, [pc, #24]	@ (8000368 <__do_global_dtors_aux+0x1c>)
 8000350:	7823      	ldrb	r3, [r4, #0]
 8000352:	b943      	cbnz	r3, 8000366 <__do_global_dtors_aux+0x1a>
 8000354:	f7ff ffda 	bl	800030c <deregister_tm_clones>
 8000358:	4b04      	ldr	r3, [pc, #16]	@ (800036c <__do_global_dtors_aux+0x20>)
 800035a:	b113      	cbz	r3, 8000362 <__do_global_dtors_aux+0x16>
 800035c:	4804      	ldr	r0, [pc, #16]	@ (8000370 <__do_global_dtors_aux+0x24>)
 800035e:	f3af 8000 	nop.w
 8000362:	2301      	movs	r3, #1
 8000364:	7023      	strb	r3, [r4, #0]
 8000366:	bd10      	pop	{r4, pc}
 8000368:	20000058 	.word	0x20000058
 800036c:	00000000 	.word	0x00000000
 8000370:	0800403c 	.word	0x0800403c

08000374 <frame_dummy>:
 8000374:	b508      	push	{r3, lr}
 8000376:	4b05      	ldr	r3, [pc, #20]	@ (800038c <frame_dummy+0x18>)
 8000378:	b11b      	cbz	r3, 8000382 <frame_dummy+0xe>
 800037a:	4905      	ldr	r1, [pc, #20]	@ (8000390 <frame_dummy+0x1c>)
 800037c:	4805      	ldr	r0, [pc, #20]	@ (8000394 <frame_dummy+0x20>)
 800037e:	f3af 8000 	nop.w
 8000382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000386:	f7ff bfcf 	b.w	8000328 <register_tm_clones>
 800038a:	bf00      	nop
 800038c:	00000000 	.word	0x00000000
 8000390:	2000005c 	.word	0x2000005c
 8000394:	0800403c 	.word	0x0800403c

08000398 <memset>:
 8000398:	4402      	add	r2, r0
 800039a:	4603      	mov	r3, r0
 800039c:	4293      	cmp	r3, r2
 800039e:	d100      	bne.n	80003a2 <memset+0xa>
 80003a0:	4770      	bx	lr
 80003a2:	f803 1b01 	strb.w	r1, [r3], #1
 80003a6:	e7f9      	b.n	800039c <memset+0x4>

080003a8 <__libc_init_array>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	4d0d      	ldr	r5, [pc, #52]	@ (80003e0 <__libc_init_array+0x38>)
 80003ac:	4c0d      	ldr	r4, [pc, #52]	@ (80003e4 <__libc_init_array+0x3c>)
 80003ae:	1b64      	subs	r4, r4, r5
 80003b0:	10a4      	asrs	r4, r4, #2
 80003b2:	2600      	movs	r6, #0
 80003b4:	42a6      	cmp	r6, r4
 80003b6:	d109      	bne.n	80003cc <__libc_init_array+0x24>
 80003b8:	4d0b      	ldr	r5, [pc, #44]	@ (80003e8 <__libc_init_array+0x40>)
 80003ba:	4c0c      	ldr	r4, [pc, #48]	@ (80003ec <__libc_init_array+0x44>)
 80003bc:	f003 fe3e 	bl	800403c <_init>
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	10a4      	asrs	r4, r4, #2
 80003c4:	2600      	movs	r6, #0
 80003c6:	42a6      	cmp	r6, r4
 80003c8:	d105      	bne.n	80003d6 <__libc_init_array+0x2e>
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d0:	4798      	blx	r3
 80003d2:	3601      	adds	r6, #1
 80003d4:	e7ee      	b.n	80003b4 <__libc_init_array+0xc>
 80003d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003da:	4798      	blx	r3
 80003dc:	3601      	adds	r6, #1
 80003de:	e7f2      	b.n	80003c6 <__libc_init_array+0x1e>
 80003e0:	08004790 	.word	0x08004790
 80003e4:	08004790 	.word	0x08004790
 80003e8:	08004790 	.word	0x08004790
 80003ec:	08004794 	.word	0x08004794

080003f0 <delay>:
#define IDLE_TASK_STACK_SIZE 32
#define TIMER_TASK_STACK_SIZE 40

static void delay()
{
	for (uint32_t i = 0; i < SystemCoreClock / 2; i++) {
 80003f0:	2300      	movs	r3, #0
 80003f2:	e000      	b.n	80003f6 <delay+0x6>
 80003f4:	3301      	adds	r3, #1
 80003f6:	4a03      	ldr	r2, [pc, #12]	@ (8000404 <delay+0x14>)
 80003f8:	6812      	ldr	r2, [r2, #0]
 80003fa:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 80003fe:	d3f9      	bcc.n	80003f4 <delay+0x4>
		;
	}
}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	20000050 	.word	0x20000050

08000408 <vApplicationGetIdleTaskMemory>:
				   StackType_t **ppxIdleTaskStackBuffer,
				   uint32_t *pulIdleTaskStackSize)
{
	static StaticTask_t xIdleTaskTCBBuffer;
	static StackType_t xIdleStack[IDLE_TASK_STACK_SIZE];
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000408:	4b03      	ldr	r3, [pc, #12]	@ (8000418 <vApplicationGetIdleTaskMemory+0x10>)
 800040a:	6003      	str	r3, [r0, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800040c:	4b03      	ldr	r3, [pc, #12]	@ (800041c <vApplicationGetIdleTaskMemory+0x14>)
 800040e:	600b      	str	r3, [r1, #0]
	*pulIdleTaskStackSize = IDLE_TASK_STACK_SIZE;
 8000410:	2320      	movs	r3, #32
 8000412:	6013      	str	r3, [r2, #0]
}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	20000328 	.word	0x20000328
 800041c:	200002a8 	.word	0x200002a8

08000420 <vApplicationGetTimerTaskMemory>:
{
	/* Timer task control block and stack */
	static StaticTask_t Timer_TCB;
	static StackType_t Timer_Stack[TIMER_TASK_STACK_SIZE];

	*ppxTimerTaskTCBBuffer = &Timer_TCB;
 8000420:	4b03      	ldr	r3, [pc, #12]	@ (8000430 <vApplicationGetTimerTaskMemory+0x10>)
 8000422:	6003      	str	r3, [r0, #0]
	*ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000424:	4b03      	ldr	r3, [pc, #12]	@ (8000434 <vApplicationGetTimerTaskMemory+0x14>)
 8000426:	600b      	str	r3, [r1, #0]
	*pulTimerTaskStackSize = (uint32_t)TIMER_TASK_STACK_SIZE;
 8000428:	2328      	movs	r3, #40	@ 0x28
 800042a:	6013      	str	r3, [r2, #0]
}
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	20000250 	.word	0x20000250
 8000434:	200001b0 	.word	0x200001b0

08000438 <configureTimerForRunTimeStats>:

void configureTimerForRunTimeStats(void)
{
	// 使能 DWT 周期计数器
	if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <configureTimerForRunTimeStats+0x28>)
 800043a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800043e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000442:	d106      	bne.n	8000452 <configureTimerForRunTimeStats+0x1a>
		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000444:	4a06      	ldr	r2, [pc, #24]	@ (8000460 <configureTimerForRunTimeStats+0x28>)
 8000446:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 800044a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800044e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
	}

	// 使能周期计数器
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000452:	4a04      	ldr	r2, [pc, #16]	@ (8000464 <configureTimerForRunTimeStats+0x2c>)
 8000454:	6813      	ldr	r3, [r2, #0]
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	6013      	str	r3, [r2, #0]
}
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	e000ed00 	.word	0xe000ed00
 8000464:	e0001000 	.word	0xe0001000

08000468 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
	return DWT->CYCCNT;
 8000468:	4b01      	ldr	r3, [pc, #4]	@ (8000470 <getRunTimeCounterValue+0x8>)
 800046a:	6858      	ldr	r0, [r3, #4]
}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	e0001000 	.word	0xe0001000

08000474 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 8000474:	b508      	push	{r3, lr}
 8000476:	460c      	mov	r4, r1
	while (1) {
		delay();
 8000478:	f7ff ffba 	bl	80003f0 <delay>
		ERROR("Stack overflow: %s\n", pcTaskName);
 800047c:	4623      	mov	r3, r4
 800047e:	4a03      	ldr	r2, [pc, #12]	@ (800048c <vApplicationStackOverflowHook+0x18>)
 8000480:	4903      	ldr	r1, [pc, #12]	@ (8000490 <vApplicationStackOverflowHook+0x1c>)
 8000482:	2000      	movs	r0, #0
 8000484:	f002 f8b0 	bl	80025e8 <SEGGER_RTT_printf>
	while (1) {
 8000488:	e7f6      	b.n	8000478 <vApplicationStackOverflowHook+0x4>
 800048a:	bf00      	nop
 800048c:	080042fc 	.word	0x080042fc
 8000490:	0800406c 	.word	0x0800406c

08000494 <vApplicationMallocFailedHook>:
	}
}

void vApplicationMallocFailedHook(void)
{
 8000494:	b508      	push	{r3, lr}
	while (1) {
		delay();
 8000496:	f7ff ffab 	bl	80003f0 <delay>
		ERROR("Malloc failed");
 800049a:	4a03      	ldr	r2, [pc, #12]	@ (80004a8 <vApplicationMallocFailedHook+0x14>)
 800049c:	4903      	ldr	r1, [pc, #12]	@ (80004ac <vApplicationMallocFailedHook+0x18>)
 800049e:	2000      	movs	r0, #0
 80004a0:	f002 f8a2 	bl	80025e8 <SEGGER_RTT_printf>
	while (1) {
 80004a4:	e7f7      	b.n	8000496 <vApplicationMallocFailedHook+0x2>
 80004a6:	bf00      	nop
 80004a8:	080042dc 	.word	0x080042dc
 80004ac:	08004090 	.word	0x08004090

080004b0 <NMI_Handler>:
    \retval     none
*/
void NMI_Handler(void)
{
	/* if NMI exception occurs, go to infinite loop */
	while (1) {
 80004b0:	e7fe      	b.n	80004b0 <NMI_Handler>

080004b2 <HardFault_Handler>:
    \retval     none
*/
void HardFault_Handler(void)
{
	/* if Hard Fault exception occurs, go to infinite loop */
	while (1) {
 80004b2:	e7fe      	b.n	80004b2 <HardFault_Handler>

080004b4 <MemManage_Handler>:
    \retval     none
*/
void MemManage_Handler(void)
{
	/* if Memory Manage exception occurs, go to infinite loop */
	while (1) {
 80004b4:	e7fe      	b.n	80004b4 <MemManage_Handler>

080004b6 <BusFault_Handler>:
    \retval     none
*/
void BusFault_Handler(void)
{
	/* if Bus Fault exception occurs, go to infinite loop */
	while (1) {
 80004b6:	e7fe      	b.n	80004b6 <BusFault_Handler>

080004b8 <UsageFault_Handler>:
    \retval     none
*/
void UsageFault_Handler(void)
{
	/* if Usage Fault exception occurs, go to infinite loop */
	while (1) {
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler>

080004ba <DebugMon_Handler>:
    \retval     none
*/
void DebugMon_Handler(void)
{
	/* if DebugMon exception occurs, go to infinite loop */
	while (1) {
 80004ba:	e7fe      	b.n	80004ba <DebugMon_Handler>

080004bc <vTask1>:

	for (;;)
		;
}
void vTask1(void *pvParameters)
{
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	b082      	sub	sp, #8
	char *task_name;
	TickType_t xLastWakeTime;

	task_name = pcTaskGetName(xTaskGetCurrentTaskHandle());
 80004c0:	f001 f936 	bl	8001730 <xTaskGetCurrentTaskHandle>
 80004c4:	f000 fd90 	bl	8000fe8 <pcTaskGetName>
 80004c8:	4606      	mov	r6, r0
	uint32_t time = 0;
	xLastWakeTime = xTaskGetTickCount();
 80004ca:	f000 fd87 	bl	8000fdc <xTaskGetTickCount>
 80004ce:	9001      	str	r0, [sp, #4]

	SEGGER_RTT_printf(0, "%s start\n", task_name);
 80004d0:	4632      	mov	r2, r6
 80004d2:	4909      	ldr	r1, [pc, #36]	@ (80004f8 <vTask1+0x3c>)
 80004d4:	2000      	movs	r0, #0
 80004d6:	f002 f887 	bl	80025e8 <SEGGER_RTT_printf>
	uint32_t time = 0;
 80004da:	2400      	movs	r4, #0
	/* As per most tasks, this task is implemented in an infinite loop. */
	for (;;) {
		/* Print out the name of this task. */
		vTaskDelayUntil(&xLastWakeTime, 1000);
 80004dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004e0:	a801      	add	r0, sp, #4
 80004e2:	f000 ff03 	bl	80012ec <xTaskDelayUntil>
		SEGGER_RTT_printf(0, "[%s]: %d s\n", task_name, time++);
 80004e6:	1c65      	adds	r5, r4, #1
 80004e8:	4623      	mov	r3, r4
 80004ea:	4632      	mov	r2, r6
 80004ec:	4903      	ldr	r1, [pc, #12]	@ (80004fc <vTask1+0x40>)
 80004ee:	2000      	movs	r0, #0
 80004f0:	f002 f87a 	bl	80025e8 <SEGGER_RTT_printf>
 80004f4:	462c      	mov	r4, r5
 80004f6:	e7f1      	b.n	80004dc <vTask1+0x20>
 80004f8:	080040ac 	.word	0x080040ac
 80004fc:	080040b8 	.word	0x080040b8

08000500 <vTask2>:
	}
}

void vTask2(void *pvParameters)
{
 8000500:	b500      	push	{lr}
 8000502:	b083      	sub	sp, #12
	TickType_t xLastWakeTime;

	uint32_t time = 0;
	xLastWakeTime = xTaskGetTickCount();
 8000504:	f000 fd6a 	bl	8000fdc <xTaskGetTickCount>
 8000508:	9001      	str	r0, [sp, #4]

	/* As per most tasks, this task is implemented in an infinite loop. */
	for (;;) {
		/* Print out the name of this task. */
		vTaskDelayUntil(&xLastWakeTime, 1000);
 800050a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800050e:	a801      	add	r0, sp, #4
 8000510:	f000 feec 	bl	80012ec <xTaskDelayUntil>
		UART_Transmit_DMA("Uart test\n", 10);
 8000514:	210a      	movs	r1, #10
 8000516:	4802      	ldr	r0, [pc, #8]	@ (8000520 <vTask2+0x20>)
 8000518:	f000 fa58 	bl	80009cc <UART_Transmit_DMA>
	for (;;) {
 800051c:	e7f5      	b.n	800050a <vTask2+0xa>
 800051e:	bf00      	nop
 8000520:	080040c4 	.word	0x080040c4

08000524 <main>:
{
 8000524:	b510      	push	{r4, lr}
 8000526:	b082      	sub	sp, #8
	SEGGER_RTT_Init();
 8000528:	f002 f964 	bl	80027f4 <SEGGER_RTT_Init>
	BSP_Uart_Init();
 800052c:	f000 fa3a 	bl	80009a4 <BSP_Uart_Init>
	SEGGER_RTT_WriteString(0, "Hello World\r\n");
 8000530:	4911      	ldr	r1, [pc, #68]	@ (8000578 <main+0x54>)
 8000532:	2000      	movs	r0, #0
 8000534:	f002 f952 	bl	80027dc <SEGGER_RTT_WriteString>
	for (size_t i = 0; i < 5; i++) {
 8000538:	2400      	movs	r4, #0
 800053a:	e004      	b.n	8000546 <main+0x22>
		UART_Transmit_DMA("Uart test\n", 10);
 800053c:	210a      	movs	r1, #10
 800053e:	480f      	ldr	r0, [pc, #60]	@ (800057c <main+0x58>)
 8000540:	f000 fa44 	bl	80009cc <UART_Transmit_DMA>
	for (size_t i = 0; i < 5; i++) {
 8000544:	3401      	adds	r4, #1
 8000546:	2c04      	cmp	r4, #4
 8000548:	d9f8      	bls.n	800053c <main+0x18>
	xTaskCreate(vTask1, "Task 1", 128, NULL, 1, NULL);
 800054a:	2400      	movs	r4, #0
 800054c:	9401      	str	r4, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	4623      	mov	r3, r4
 8000554:	2280      	movs	r2, #128	@ 0x80
 8000556:	490a      	ldr	r1, [pc, #40]	@ (8000580 <main+0x5c>)
 8000558:	480a      	ldr	r0, [pc, #40]	@ (8000584 <main+0x60>)
 800055a:	f000 fca9 	bl	8000eb0 <xTaskCreate>
	xTaskCreate(vTask2, "Task 2", 128, NULL, 2, NULL);
 800055e:	9401      	str	r4, [sp, #4]
 8000560:	2302      	movs	r3, #2
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	4623      	mov	r3, r4
 8000566:	2280      	movs	r2, #128	@ 0x80
 8000568:	4907      	ldr	r1, [pc, #28]	@ (8000588 <main+0x64>)
 800056a:	4808      	ldr	r0, [pc, #32]	@ (800058c <main+0x68>)
 800056c:	f000 fca0 	bl	8000eb0 <xTaskCreate>
	vTaskStartScheduler();
 8000570:	f000 fcd2 	bl	8000f18 <vTaskStartScheduler>
	for (;;)
 8000574:	e7fe      	b.n	8000574 <main+0x50>
 8000576:	bf00      	nop
 8000578:	080040d0 	.word	0x080040d0
 800057c:	080040c4 	.word	0x080040c4
 8000580:	080040e0 	.word	0x080040e0
 8000584:	080004bd 	.word	0x080004bd
 8000588:	080040e8 	.word	0x080040e8
 800058c:	08000501 	.word	0x08000501

08000590 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000590:	2001      	movs	r0, #1
 8000592:	4770      	bx	lr

08000594 <_kill>:

int _kill(int pid, int sig)
{
 8000594:	b508      	push	{r3, lr}
	(void)pid;
	(void)sig;
	errno = EINVAL;
 8000596:	f003 fd3d 	bl	8004014 <__errno>
 800059a:	2316      	movs	r3, #22
 800059c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800059e:	f04f 30ff 	mov.w	r0, #4294967295
 80005a2:	bd08      	pop	{r3, pc}

080005a4 <_exit>:

void _exit(int status)
{
 80005a4:	b508      	push	{r3, lr}
	_kill(status, -1);
 80005a6:	f04f 31ff 	mov.w	r1, #4294967295
 80005aa:	f7ff fff3 	bl	8000594 <_kill>
	while (1) {
 80005ae:	e7fe      	b.n	80005ae <_exit+0xa>

080005b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005e8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b4:	f000 f864 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	@ (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	@ (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	@ (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	@ (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005de:	f7ff fee3 	bl	80003a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005e2:	f7ff ff9f 	bl	8000524 <main>

080005e6 <LoopForever>:

LoopForever:
    b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80005f4:	08004798 	.word	0x08004798
  ldr r2, =_sbss
 80005f8:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80005fc:	20001358 	.word	0x20001358

08000600 <ADC_CMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC_CMP_IRQHandler>
	...

08000604 <system_clock_72m_irc8m>:
    \retval     none
*/
static void system_clock_72m_irc8m(void)
{
	/* AHB = SYSCLK */
	RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 8000604:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <system_clock_72m_irc8m+0x70>)
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	605a      	str	r2, [r3, #4]
	/* APB2 = AHB/2 */
	RCU_CFG0 |= RCU_APB2_CKAHB_DIV2;
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000610:	605a      	str	r2, [r3, #4]
	/* APB1 = AHB/2 */
	RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;
 8000612:	685a      	ldr	r2, [r3, #4]
 8000614:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000618:	605a      	str	r2, [r3, #4]
	/* PLL = (IRC8M/2) * 18 = 72 MHz */
	RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PLLMF | RCU_CFG0_PLLMF4 | RCU_CFG0_PLLPREDV);
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	f022 6203 	bic.w	r2, r2, #137363456	@ 0x8300000
 8000620:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8000624:	605a      	str	r2, [r3, #4]
	RCU_CFG1 &= ~(RCU_CFG1_PLLPRESEL | RCU_CFG1_PLLMF5 | RCU_CFG1_PREDV);
 8000626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000628:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 800062c:	f022 020f 	bic.w	r2, r2, #15
 8000630:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCU_CFG0 |= (RCU_PLLSRC_IRC8M_DIV2 | (RCU_PLL_MUL18 & (~RCU_CFG1_PLLMF5)));
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8000638:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800063c:	605a      	str	r2, [r3, #4]
	RCU_CFG1 |= (RCU_PLL_MUL18 & RCU_CFG1_PLLMF5);
 800063e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000640:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* enable PLL */
	RCU_CTL0 |= RCU_CTL0_PLLEN;
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000648:	601a      	str	r2, [r3, #0]

	/* wait until PLL is stable */
	while (0U == (RCU_CTL0 & RCU_CTL0_PLLSTB)) {
 800064a:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <system_clock_72m_irc8m+0x70>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000652:	d0fa      	beq.n	800064a <system_clock_72m_irc8m+0x46>
	}

	/* select PLL as system clock */
	RCU_CFG0 &= ~RCU_CFG0_SCS;
 8000654:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <system_clock_72m_irc8m+0x70>)
 8000656:	685a      	ldr	r2, [r3, #4]
 8000658:	f022 0203 	bic.w	r2, r2, #3
 800065c:	605a      	str	r2, [r3, #4]
	RCU_CFG0 |= RCU_CKSYSSRC_PLL;
 800065e:	685a      	ldr	r2, [r3, #4]
 8000660:	f042 0202 	orr.w	r2, r2, #2
 8000664:	605a      	str	r2, [r3, #4]

	/* wait until PLL is selected as system clock */
	while (0U == (RCU_CFG0 & RCU_SCSS_PLL)) {
 8000666:	4b03      	ldr	r3, [pc, #12]	@ (8000674 <system_clock_72m_irc8m+0x70>)
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	f013 0f08 	tst.w	r3, #8
 800066e:	d0fa      	beq.n	8000666 <system_clock_72m_irc8m+0x62>
	}
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <system_clock_config>:
{
 8000678:	b508      	push	{r3, lr}
	system_clock_72m_irc8m();
 800067a:	f7ff ffc3 	bl	8000604 <system_clock_72m_irc8m>
}
 800067e:	bd08      	pop	{r3, pc}

08000680 <SystemInit>:
{
 8000680:	b510      	push	{r4, lr}
 8000682:	b082      	sub	sp, #8
	if (((FMC_OBSTAT & OB_OBSTAT_PLEVEL_HIGH) != OB_OBSTAT_PLEVEL_HIGH) &&
 8000684:	4b66      	ldr	r3, [pc, #408]	@ (8000820 <SystemInit+0x1a0>)
 8000686:	69db      	ldr	r3, [r3, #28]
 8000688:	f003 0306 	and.w	r3, r3, #6
 800068c:	2b06      	cmp	r3, #6
 800068e:	d050      	beq.n	8000732 <SystemInit+0xb2>
	    (((FMC_OBSTAT >> 13) & 0x1) == SET)) {
 8000690:	4b63      	ldr	r3, [pc, #396]	@ (8000820 <SystemInit+0x1a0>)
 8000692:	69db      	ldr	r3, [r3, #28]
	if (((FMC_OBSTAT & OB_OBSTAT_PLEVEL_HIGH) != OB_OBSTAT_PLEVEL_HIGH) &&
 8000694:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8000698:	d04b      	beq.n	8000732 <SystemInit+0xb2>
		FMC_KEY = UNLOCK_KEY0;
 800069a:	4b61      	ldr	r3, [pc, #388]	@ (8000820 <SystemInit+0x1a0>)
 800069c:	4961      	ldr	r1, [pc, #388]	@ (8000824 <SystemInit+0x1a4>)
 800069e:	6059      	str	r1, [r3, #4]
		FMC_KEY = UNLOCK_KEY1;
 80006a0:	4a61      	ldr	r2, [pc, #388]	@ (8000828 <SystemInit+0x1a8>)
 80006a2:	605a      	str	r2, [r3, #4]
		FMC_OBKEY = UNLOCK_KEY0;
 80006a4:	6099      	str	r1, [r3, #8]
		FMC_OBKEY = UNLOCK_KEY1;
 80006a6:	609a      	str	r2, [r3, #8]
		FMC_CTL |= FMC_CTL_OBER;
 80006a8:	691a      	ldr	r2, [r3, #16]
 80006aa:	f042 0220 	orr.w	r2, r2, #32
 80006ae:	611a      	str	r2, [r3, #16]
		FMC_CTL |= FMC_CTL_START;
 80006b0:	691a      	ldr	r2, [r3, #16]
 80006b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80006b6:	611a      	str	r2, [r3, #16]
		while ((uint32_t)0x00U != (FMC_STAT & FMC_STAT_BUSY))
 80006b8:	4b59      	ldr	r3, [pc, #356]	@ (8000820 <SystemInit+0x1a0>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	f013 0f01 	tst.w	r3, #1
 80006c0:	d1fa      	bne.n	80006b8 <SystemInit+0x38>
		FMC_CTL &= ~FMC_CTL_OBER;
 80006c2:	4b57      	ldr	r3, [pc, #348]	@ (8000820 <SystemInit+0x1a0>)
 80006c4:	691a      	ldr	r2, [r3, #16]
 80006c6:	f022 0220 	bic.w	r2, r2, #32
 80006ca:	611a      	str	r2, [r3, #16]
		FMC_CTL |= FMC_CTL_OBPG;
 80006cc:	691a      	ldr	r2, [r3, #16]
 80006ce:	f042 0210 	orr.w	r2, r2, #16
 80006d2:	611a      	str	r2, [r3, #16]
		if ((FMC_OBSTAT & OB_OBSTAT_PLEVEL_HIGH) == OB_OBSTAT_PLEVEL_NO) {
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f013 0f06 	tst.w	r3, #6
 80006da:	d143      	bne.n	8000764 <SystemInit+0xe4>
			OB_SPC = FMC_NSPC;
 80006dc:	4b53      	ldr	r3, [pc, #332]	@ (800082c <SystemInit+0x1ac>)
 80006de:	22a5      	movs	r2, #165	@ 0xa5
 80006e0:	801a      	strh	r2, [r3, #0]
		OB_USER = OB_USER_DEFAULT & ((uint8_t)(FMC_OBSTAT >> 8));
 80006e2:	4a4f      	ldr	r2, [pc, #316]	@ (8000820 <SystemInit+0x1a0>)
 80006e4:	69d1      	ldr	r1, [r2, #28]
 80006e6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80006ea:	f001 01df 	and.w	r1, r1, #223	@ 0xdf
 80006ee:	4b4f      	ldr	r3, [pc, #316]	@ (800082c <SystemInit+0x1ac>)
 80006f0:	8059      	strh	r1, [r3, #2]
		OB_DATA0 = ((uint8_t)(FMC_OBSTAT >> 16));
 80006f2:	69d1      	ldr	r1, [r2, #28]
 80006f4:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80006f8:	8099      	strh	r1, [r3, #4]
		OB_DATA1 = ((uint8_t)(FMC_OBSTAT >> 24));
 80006fa:	69d1      	ldr	r1, [r2, #28]
 80006fc:	0e09      	lsrs	r1, r1, #24
 80006fe:	80d9      	strh	r1, [r3, #6]
		OB_WP0 = ((uint8_t)(FMC_WP));
 8000700:	6a11      	ldr	r1, [r2, #32]
 8000702:	b2c9      	uxtb	r1, r1
 8000704:	8119      	strh	r1, [r3, #8]
		OB_WP1 = ((uint8_t)(FMC_WP >> 8));
 8000706:	6a12      	ldr	r2, [r2, #32]
 8000708:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800070c:	815a      	strh	r2, [r3, #10]
		while ((uint32_t)0x00U != (FMC_STAT & FMC_STAT_BUSY))
 800070e:	4b44      	ldr	r3, [pc, #272]	@ (8000820 <SystemInit+0x1a0>)
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	f013 0f01 	tst.w	r3, #1
 8000716:	d1fa      	bne.n	800070e <SystemInit+0x8e>
		FMC_CTL &= ~FMC_CTL_OBPG;
 8000718:	4b41      	ldr	r3, [pc, #260]	@ (8000820 <SystemInit+0x1a0>)
 800071a:	691a      	ldr	r2, [r3, #16]
 800071c:	f022 0210 	bic.w	r2, r2, #16
 8000720:	611a      	str	r2, [r3, #16]
		FMC_CTL &= ~FMC_CTL_OBWEN;
 8000722:	691a      	ldr	r2, [r3, #16]
 8000724:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000728:	611a      	str	r2, [r3, #16]
		FMC_CTL |= FMC_CTL_LK;
 800072a:	691a      	ldr	r2, [r3, #16]
 800072c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000730:	611a      	str	r2, [r3, #16]
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000732:	4a3f      	ldr	r2, [pc, #252]	@ (8000830 <SystemInit+0x1b0>)
 8000734:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000738:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800073c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	RCU_CTL0 |= RCU_CTL0_IRC8MEN;
 8000740:	4a3c      	ldr	r2, [pc, #240]	@ (8000834 <SystemInit+0x1b4>)
 8000742:	6813      	ldr	r3, [r2, #0]
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6013      	str	r3, [r2, #0]
	while (0U == (RCU_CTL0 & RCU_CTL0_IRC8MSTB)) {
 800074a:	4b3a      	ldr	r3, [pc, #232]	@ (8000834 <SystemInit+0x1b4>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f013 0f02 	tst.w	r3, #2
 8000752:	d0fa      	beq.n	800074a <SystemInit+0xca>
	RCU_MODIFY(0x50);
 8000754:	4a37      	ldr	r2, [pc, #220]	@ (8000834 <SystemInit+0x1b4>)
 8000756:	6853      	ldr	r3, [r2, #4]
 8000758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800075c:	6053      	str	r3, [r2, #4]
 800075e:	2300      	movs	r3, #0
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	e00c      	b.n	800077e <SystemInit+0xfe>
		} else if ((FMC_OBSTAT & OB_OBSTAT_PLEVEL_HIGH) == OB_OBSTAT_PLEVEL_LOW) {
 8000764:	4b2e      	ldr	r3, [pc, #184]	@ (8000820 <SystemInit+0x1a0>)
 8000766:	69db      	ldr	r3, [r3, #28]
 8000768:	f003 0306 	and.w	r3, r3, #6
 800076c:	2b02      	cmp	r3, #2
 800076e:	d1b8      	bne.n	80006e2 <SystemInit+0x62>
			OB_SPC = FMC_LSPC;
 8000770:	4b2e      	ldr	r3, [pc, #184]	@ (800082c <SystemInit+0x1ac>)
 8000772:	22bb      	movs	r2, #187	@ 0xbb
 8000774:	801a      	strh	r2, [r3, #0]
 8000776:	e7b4      	b.n	80006e2 <SystemInit+0x62>
	RCU_MODIFY(0x50);
 8000778:	9b01      	ldr	r3, [sp, #4]
 800077a:	3301      	adds	r3, #1
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	9b01      	ldr	r3, [sp, #4]
 8000780:	2b4f      	cmp	r3, #79	@ 0x4f
 8000782:	d9f9      	bls.n	8000778 <SystemInit+0xf8>
 8000784:	4a2b      	ldr	r2, [pc, #172]	@ (8000834 <SystemInit+0x1b4>)
 8000786:	6853      	ldr	r3, [r2, #4]
 8000788:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800078c:	6053      	str	r3, [r2, #4]
 800078e:	2300      	movs	r3, #0
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	e002      	b.n	800079a <SystemInit+0x11a>
 8000794:	9b01      	ldr	r3, [sp, #4]
 8000796:	3301      	adds	r3, #1
 8000798:	9301      	str	r3, [sp, #4]
 800079a:	9b01      	ldr	r3, [sp, #4]
 800079c:	2b4f      	cmp	r3, #79	@ 0x4f
 800079e:	d9f9      	bls.n	8000794 <SystemInit+0x114>
	RCU_CFG0 &= ~(RCU_CFG0_SCS);
 80007a0:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <SystemInit+0x1b4>)
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	f022 0203 	bic.w	r2, r2, #3
 80007a8:	605a      	str	r2, [r3, #4]
	RCU_CTL0 &= ~(RCU_CTL0_HXTALEN | RCU_CTL0_CKMEN | RCU_CTL0_PLLEN | RCU_CTL0_HXTALBPS);
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	f022 7286 	bic.w	r2, r2, #17563648	@ 0x10c0000
 80007b0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80007b4:	601a      	str	r2, [r3, #0]
	RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 80007b6:	6859      	ldr	r1, [r3, #4]
 80007b8:	4a1f      	ldr	r2, [pc, #124]	@ (8000838 <SystemInit+0x1b8>)
 80007ba:	400a      	ands	r2, r1
 80007bc:	605a      	str	r2, [r3, #4]
	RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PLLMF | RCU_CFG0_PLLMF4 | RCU_CFG0_PLLDV);
 80007be:	685a      	ldr	r2, [r3, #4]
 80007c0:	f022 4208 	bic.w	r2, r2, #2281701376	@ 0x88000000
 80007c4:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 80007c8:	605a      	str	r2, [r3, #4]
	RCU_CFG1 &= ~(RCU_CFG1_PREDV | RCU_CFG1_PLLMF5 | RCU_CFG1_PLLPRESEL);
 80007ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007cc:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 80007d0:	f022 020f 	bic.w	r2, r2, #15
 80007d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCU_CFG2 &= ~(RCU_CFG2_USART0SEL | RCU_CFG2_ADCSEL);
 80007d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007d8:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 80007dc:	f022 0201 	bic.w	r2, r2, #1
 80007e0:	631a      	str	r2, [r3, #48]	@ 0x30
	RCU_CFG2 &= ~RCU_CFG2_IRC28MDIV;
 80007e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007e4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80007e8:	631a      	str	r2, [r3, #48]	@ 0x30
	RCU_CFG2 &= ~RCU_CFG2_ADCPSC2;
 80007ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007ec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80007f0:	631a      	str	r2, [r3, #48]	@ 0x30
	RCU_CTL1 &= ~RCU_CTL1_IRC28MEN;
 80007f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007f4:	f022 0201 	bic.w	r2, r2, #1
 80007f8:	635a      	str	r2, [r3, #52]	@ 0x34
	RCU_ADDCTL &= ~RCU_ADDCTL_IRC48MEN;
 80007fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80007fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000802:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	RCU_INT = 0x00000000U;
 8000806:	2400      	movs	r4, #0
 8000808:	609c      	str	r4, [r3, #8]
	RCU_ADDINT = 0x00000000U;
 800080a:	f8c3 40cc 	str.w	r4, [r3, #204]	@ 0xcc
	system_clock_config();
 800080e:	f7ff ff33 	bl	8000678 <system_clock_config>
	nvic_vector_table_set(NVIC_VECTTAB_FLASH, VECT_TAB_OFFSET);
 8000812:	4621      	mov	r1, r4
 8000814:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000818:	f002 f972 	bl	8002b00 <nvic_vector_table_set>
}
 800081c:	b002      	add	sp, #8
 800081e:	bd10      	pop	{r4, pc}
 8000820:	40022000 	.word	0x40022000
 8000824:	45670123 	.word	0x45670123
 8000828:	cdef89ab 	.word	0xcdef89ab
 800082c:	1ffff800 	.word	0x1ffff800
 8000830:	e000ed00 	.word	0xe000ed00
 8000834:	40021000 	.word	0x40021000
 8000838:	08ff000c 	.word	0x08ff000c

0800083c <assert_failed>:
{
	SEGGER_RTT_Write(0, &character, 1);
}

void assert_failed(char *file, uint32_t line)
{
 800083c:	b508      	push	{r3, lr}
 800083e:	4602      	mov	r2, r0
 8000840:	460b      	mov	r3, r1
	LOG("Assert failed: file %s on line %d\r\n", file, line);
 8000842:	4902      	ldr	r1, [pc, #8]	@ (800084c <assert_failed+0x10>)
 8000844:	2000      	movs	r0, #0
 8000846:	f001 fecf 	bl	80025e8 <SEGGER_RTT_printf>
}
 800084a:	bd08      	pop	{r3, pc}
 800084c:	080040f0 	.word	0x080040f0

08000850 <usart1_gpio_config>:
    \param[in]  none
    \param[out] none
    \retval     none
*/
static void usart1_gpio_config(void)
{
 8000850:	b508      	push	{r3, lr}
	/* enable COM GPIO clock */
	rcu_periph_clock_enable(RCU_GPIOA);
 8000852:	f240 5011 	movw	r0, #1297	@ 0x511
 8000856:	f002 f95f 	bl	8002b18 <rcu_periph_clock_enable>

	/* connect port to USARTx_Tx */
	gpio_af_set(GPIOA, GPIO_AF_1, GPIO_PIN_2);
 800085a:	2204      	movs	r2, #4
 800085c:	2101      	movs	r1, #1
 800085e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000862:	f002 f8da 	bl	8002a1a <gpio_af_set>

	/* connect port to USARTx_Rx */
	gpio_af_set(GPIOA, GPIO_AF_1, GPIO_PIN_3);
 8000866:	2208      	movs	r2, #8
 8000868:	2101      	movs	r1, #1
 800086a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086e:	f002 f8d4 	bl	8002a1a <gpio_af_set>

	/* configure USART Tx as alternate function push-pull */
	gpio_mode_set(GPIOA, GPIO_MODE_AF, GPIO_PUPD_PULLUP, GPIO_PIN_2);
 8000872:	2304      	movs	r3, #4
 8000874:	2201      	movs	r2, #1
 8000876:	2102      	movs	r1, #2
 8000878:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087c:	f002 f874 	bl	8002968 <gpio_mode_set>
	gpio_output_options_set(GPIOA, GPIO_OTYPE_PP, GPIO_OSPEED_10MHZ, GPIO_PIN_2);
 8000880:	2304      	movs	r3, #4
 8000882:	2201      	movs	r2, #1
 8000884:	2100      	movs	r1, #0
 8000886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088a:	f002 f88f 	bl	80029ac <gpio_output_options_set>

	/* configure USART Rx as alternate function push-pull */
	gpio_mode_set(GPIOA, GPIO_MODE_AF, GPIO_PUPD_PULLUP, GPIO_PIN_3);
 800088e:	2308      	movs	r3, #8
 8000890:	2201      	movs	r2, #1
 8000892:	2102      	movs	r1, #2
 8000894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000898:	f002 f866 	bl	8002968 <gpio_mode_set>
	gpio_output_options_set(GPIOA, GPIO_OTYPE_PP, GPIO_OSPEED_10MHZ, GPIO_PIN_3);
 800089c:	2308      	movs	r3, #8
 800089e:	2201      	movs	r2, #1
 80008a0:	2100      	movs	r1, #0
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a6:	f002 f881 	bl	80029ac <gpio_output_options_set>
}
 80008aa:	bd08      	pop	{r3, pc}

080008ac <usart1_uart_config>:
    \param[in]  none
    \param[out] none
    \retval     none
*/
static void usart1_uart_config(void)
{
 80008ac:	b510      	push	{r4, lr}
	/* enable USART clock */
	rcu_periph_clock_enable(RCU_USART1);
 80008ae:	f240 7011 	movw	r0, #1809	@ 0x711
 80008b2:	f002 f931 	bl	8002b18 <rcu_periph_clock_enable>

	/* USART configure */
	usart_deinit(USART1);
 80008b6:	4c14      	ldr	r4, [pc, #80]	@ (8000908 <usart1_uart_config+0x5c>)
 80008b8:	4620      	mov	r0, r4
 80008ba:	f002 fa17 	bl	8002cec <usart_deinit>
	usart_word_length_set(USART1, USART_WL_8BIT);
 80008be:	2100      	movs	r1, #0
 80008c0:	4620      	mov	r0, r4
 80008c2:	f002 fa65 	bl	8002d90 <usart_word_length_set>
	usart_stop_bit_set(USART1, USART_STB_1BIT);
 80008c6:	2100      	movs	r1, #0
 80008c8:	4620      	mov	r0, r4
 80008ca:	f002 fa6d 	bl	8002da8 <usart_stop_bit_set>
	usart_parity_config(USART1, USART_PM_NONE);
 80008ce:	2100      	movs	r1, #0
 80008d0:	4620      	mov	r0, r4
 80008d2:	f002 fa51 	bl	8002d78 <usart_parity_config>
	usart_baudrate_set(USART1, 115200);
 80008d6:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80008da:	4620      	mov	r0, r4
 80008dc:	f002 fa22 	bl	8002d24 <usart_baudrate_set>
	usart_receive_config(USART1, USART_RECEIVE_ENABLE);
 80008e0:	2104      	movs	r1, #4
 80008e2:	4620      	mov	r0, r4
 80008e4:	f002 fa79 	bl	8002dda <usart_receive_config>
	usart_transmit_config(USART1, USART_TRANSMIT_ENABLE);
 80008e8:	2108      	movs	r1, #8
 80008ea:	4620      	mov	r0, r4
 80008ec:	f002 fa6d 	bl	8002dca <usart_transmit_config>

	/* USART DMA enable for transmission and reception */
	usart_dma_transmit_config(USART1, USART_TRANSMIT_DMA_ENABLE);
 80008f0:	2180      	movs	r1, #128	@ 0x80
 80008f2:	4620      	mov	r0, r4
 80008f4:	f002 fa83 	bl	8002dfe <usart_dma_transmit_config>
	usart_dma_receive_config(USART1, USART_RECEIVE_DMA_ENABLE);
 80008f8:	2140      	movs	r1, #64	@ 0x40
 80008fa:	4620      	mov	r0, r4
 80008fc:	f002 fa75 	bl	8002dea <usart_dma_receive_config>

	usart_enable(USART1);
 8000900:	4620      	mov	r0, r4
 8000902:	f002 fa5d 	bl	8002dc0 <usart_enable>
}
 8000906:	bd10      	pop	{r4, pc}
 8000908:	40004400 	.word	0x40004400

0800090c <usart1_dma_config>:

static void usart1_dma_config()
{
 800090c:	b530      	push	{r4, r5, lr}
 800090e:	b089      	sub	sp, #36	@ 0x24
	dma_parameter_struct dma_init_struct;
	rcu_periph_clock_enable(RCU_DMA);
 8000910:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8000914:	f002 f900 	bl	8002b18 <rcu_periph_clock_enable>

	dma_deinit(USART1_DMA_TX_CHx);
 8000918:	2003      	movs	r0, #3
 800091a:	f001 ff6f 	bl	80027fc <dma_deinit>

	dma_struct_para_init(&dma_init_struct);
 800091e:	4668      	mov	r0, sp
 8000920:	f001 ff88 	bl	8002834 <dma_struct_para_init>
	dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
 8000924:	2501      	movs	r5, #1
 8000926:	f88d 5015 	strb.w	r5, [sp, #21]
	dma_init_struct.memory_addr = 0;
 800092a:	2400      	movs	r4, #0
 800092c:	9403      	str	r4, [sp, #12]
	dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
 800092e:	f88d 5014 	strb.w	r5, [sp, #20]
	dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 8000932:	9404      	str	r4, [sp, #16]
	dma_init_struct.number = 0;
 8000934:	9406      	str	r4, [sp, #24]
	dma_init_struct.periph_addr = (uint32_t)&USART_TDATA(USART1);
 8000936:	4b19      	ldr	r3, [pc, #100]	@ (800099c <usart1_dma_config+0x90>)
 8000938:	9300      	str	r3, [sp, #0]
	dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 800093a:	f88d 4008 	strb.w	r4, [sp, #8]
	dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 800093e:	9401      	str	r4, [sp, #4]
	dma_init_struct.priority = DMA_PRIORITY_HIGH;
 8000940:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000944:	9307      	str	r3, [sp, #28]
	dma_init(USART1_DMA_TX_CHx, &dma_init_struct);
 8000946:	4669      	mov	r1, sp
 8000948:	2003      	movs	r0, #3
 800094a:	f001 ffa5 	bl	8002898 <dma_init>
	/* configure DMA mode */
	dma_circulation_disable(USART1_DMA_TX_CHx);
 800094e:	2003      	movs	r0, #3
 8000950:	f001 ff7a 	bl	8002848 <dma_circulation_disable>
	dma_memory_to_memory_disable(USART1_DMA_TX_CHx);
 8000954:	2003      	movs	r0, #3
 8000956:	f001 ff81 	bl	800285c <dma_memory_to_memory_disable>
	/* enable DMA channel1 */
	dma_channel_disable(USART1_DMA_TX_CHx);
 800095a:	2003      	movs	r0, #3
 800095c:	f001 ff92 	bl	8002884 <dma_channel_disable>

	/*设置接收DMA*/
	dma_struct_para_init(&dma_init_struct);
 8000960:	4668      	mov	r0, sp
 8000962:	f001 ff67 	bl	8002834 <dma_struct_para_init>
	dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
 8000966:	f88d 4015 	strb.w	r4, [sp, #21]
	dma_init_struct.memory_addr = 0;
 800096a:	9403      	str	r4, [sp, #12]
	dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
 800096c:	f88d 5014 	strb.w	r5, [sp, #20]
	dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 8000970:	9404      	str	r4, [sp, #16]
	dma_init_struct.number = 0;
 8000972:	9406      	str	r4, [sp, #24]
	dma_init_struct.periph_addr = (uint32_t)&USART_RDATA(USART1);
 8000974:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <usart1_dma_config+0x94>)
 8000976:	9300      	str	r3, [sp, #0]
	dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8000978:	f88d 4008 	strb.w	r4, [sp, #8]
	dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 800097c:	9401      	str	r4, [sp, #4]
	dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 800097e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000982:	9307      	str	r3, [sp, #28]
	dma_init(USART1_DMA_RX_CHx, &dma_init_struct);
 8000984:	4669      	mov	r1, sp
 8000986:	2004      	movs	r0, #4
 8000988:	f001 ff86 	bl	8002898 <dma_init>
	/* configure DMA mode */
	dma_circulation_disable(USART1_DMA_RX_CHx);
 800098c:	2004      	movs	r0, #4
 800098e:	f001 ff5b 	bl	8002848 <dma_circulation_disable>
	/* enable DMA channel2 */
	dma_channel_enable(USART1_DMA_RX_CHx);
 8000992:	2004      	movs	r0, #4
 8000994:	f001 ff6c 	bl	8002870 <dma_channel_enable>
}
 8000998:	b009      	add	sp, #36	@ 0x24
 800099a:	bd30      	pop	{r4, r5, pc}
 800099c:	40004428 	.word	0x40004428
 80009a0:	40004424 	.word	0x40004424

080009a4 <BSP_Uart_Init>:
{
 80009a4:	b508      	push	{r3, lr}
	nvic_irq_enable(USART1_IRQn, 1, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2101      	movs	r1, #1
 80009aa:	201c      	movs	r0, #28
 80009ac:	f002 f866 	bl	8002a7c <nvic_irq_enable>
	usart1_gpio_config();
 80009b0:	f7ff ff4e 	bl	8000850 <usart1_gpio_config>
	usart1_uart_config();
 80009b4:	f7ff ff7a 	bl	80008ac <usart1_uart_config>
	usart1_dma_config();
 80009b8:	f7ff ffa8 	bl	800090c <usart1_dma_config>
	usart_flag_clear(USART1, USART_FLAG_IDLE);
 80009bc:	f240 7104 	movw	r1, #1796	@ 0x704
 80009c0:	4801      	ldr	r0, [pc, #4]	@ (80009c8 <BSP_Uart_Init+0x24>)
 80009c2:	f002 fa2e 	bl	8002e22 <usart_flag_clear>
}
 80009c6:	bd08      	pop	{r3, pc}
 80009c8:	40004400 	.word	0x40004400

080009cc <UART_Transmit_DMA>:

void UART_Transmit_DMA(void *pData, uint32_t size)
{
 80009cc:	b538      	push	{r3, r4, r5, lr}
 80009ce:	4605      	mov	r5, r0
 80009d0:	460c      	mov	r4, r1
	dma_channel_disable(USART1_DMA_TX_CHx);
 80009d2:	2003      	movs	r0, #3
 80009d4:	f001 ff56 	bl	8002884 <dma_channel_disable>
	dma_flag_clear(USART1_DMA_TX_CHx, DMA_FLAG_G);
 80009d8:	2101      	movs	r1, #1
 80009da:	2003      	movs	r0, #3
 80009dc:	f001 ffba 	bl	8002954 <dma_flag_clear>
	dma_memory_address_config(USART1_DMA_TX_CHx, (uint32_t)pData);
 80009e0:	4629      	mov	r1, r5
 80009e2:	2003      	movs	r0, #3
 80009e4:	f001 ff92 	bl	800290c <dma_memory_address_config>
	dma_transfer_number_config(USART1_DMA_TX_CHx, size);
 80009e8:	4621      	mov	r1, r4
 80009ea:	2003      	movs	r0, #3
 80009ec:	f001 ff96 	bl	800291c <dma_transfer_number_config>
	while (RESET == usart_flag_get(USART1, USART_FLAG_TBE))
 80009f0:	f240 7107 	movw	r1, #1799	@ 0x707
 80009f4:	4807      	ldr	r0, [pc, #28]	@ (8000a14 <UART_Transmit_DMA+0x48>)
 80009f6:	f002 fa0c 	bl	8002e12 <usart_flag_get>
 80009fa:	2800      	cmp	r0, #0
 80009fc:	d0f8      	beq.n	80009f0 <UART_Transmit_DMA+0x24>
		;
	// usart_dma_transmit_config(USART1, USART_DENT_ENABLE);
	dma_channel_enable(USART1_DMA_TX_CHx);
 80009fe:	2003      	movs	r0, #3
 8000a00:	f001 ff36 	bl	8002870 <dma_channel_enable>
	while (RESET == dma_flag_get(USART1_DMA_TX_CHx, DMA_FLAG_FTF)) {
 8000a04:	2102      	movs	r1, #2
 8000a06:	2003      	movs	r0, #3
 8000a08:	f001 ff98 	bl	800293c <dma_flag_get>
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	d0f9      	beq.n	8000a04 <UART_Transmit_DMA+0x38>
	}
}
 8000a10:	bd38      	pop	{r3, r4, r5, pc}
 8000a12:	bf00      	nop
 8000a14:	40004400 	.word	0x40004400

08000a18 <USART1_IRQHandler>:

	rx_size = size;
}

void USART1_IRQHandler(void)
{
 8000a18:	b570      	push	{r4, r5, r6, lr}
	// LOG("USART1_IRQHandler");
	if (RESET != usart_interrupt_flag_get(USART1, USART_INT_FLAG_IDLE)) {
 8000a1a:	4912      	ldr	r1, [pc, #72]	@ (8000a64 <USART1_IRQHandler+0x4c>)
 8000a1c:	4812      	ldr	r0, [pc, #72]	@ (8000a68 <USART1_IRQHandler+0x50>)
 8000a1e:	f002 fa08 	bl	8002e32 <usart_interrupt_flag_get>
 8000a22:	b900      	cbnz	r0, 8000a26 <USART1_IRQHandler+0xe>
		/* disable DMA and reconfigure */
		dma_channel_disable(USART1_DMA_RX_CHx);
		dma_transfer_number_config(USART1_DMA_RX_CHx, rx_size);
		dma_channel_enable(USART1_DMA_RX_CHx);
	}
}
 8000a24:	bd70      	pop	{r4, r5, r6, pc}
		usart_interrupt_flag_clear(USART1, USART_INT_FLAG_IDLE);
 8000a26:	490f      	ldr	r1, [pc, #60]	@ (8000a64 <USART1_IRQHandler+0x4c>)
 8000a28:	480f      	ldr	r0, [pc, #60]	@ (8000a68 <USART1_IRQHandler+0x50>)
 8000a2a:	f002 fa17 	bl	8002e5c <usart_interrupt_flag_clear>
		s = (char *)DMA_CHMADDR(USART1_DMA_RX_CHx);
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <USART1_IRQHandler+0x54>)
 8000a30:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
		rx_count = rx_size - (dma_transfer_number_get(USART1_DMA_RX_CHx));
 8000a32:	4d0f      	ldr	r5, [pc, #60]	@ (8000a70 <USART1_IRQHandler+0x58>)
 8000a34:	682c      	ldr	r4, [r5, #0]
 8000a36:	2004      	movs	r0, #4
 8000a38:	f001 ff78 	bl	800292c <dma_transfer_number_get>
 8000a3c:	1a20      	subs	r0, r4, r0
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <USART1_IRQHandler+0x5c>)
 8000a40:	6018      	str	r0, [r3, #0]
		s[rx_count + 1] = 0;
 8000a42:	3001      	adds	r0, #1
 8000a44:	2300      	movs	r3, #0
 8000a46:	5433      	strb	r3, [r6, r0]
		receive_flag = 1;
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <USART1_IRQHandler+0x60>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	601a      	str	r2, [r3, #0]
		dma_channel_disable(USART1_DMA_RX_CHx);
 8000a4e:	2004      	movs	r0, #4
 8000a50:	f001 ff18 	bl	8002884 <dma_channel_disable>
		dma_transfer_number_config(USART1_DMA_RX_CHx, rx_size);
 8000a54:	6829      	ldr	r1, [r5, #0]
 8000a56:	2004      	movs	r0, #4
 8000a58:	f001 ff60 	bl	800291c <dma_transfer_number_config>
		dma_channel_enable(USART1_DMA_RX_CHx);
 8000a5c:	2004      	movs	r0, #4
 8000a5e:	f001 ff07 	bl	8002870 <dma_channel_enable>
}
 8000a62:	e7df      	b.n	8000a24 <USART1_IRQHandler+0xc>
 8000a64:	07040004 	.word	0x07040004
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	20000380 	.word	0x20000380
 8000a74:	20000384 	.word	0x20000384
 8000a78:	20000388 	.word	0x20000388

08000a7c <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000a7c:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <prvResetNextTaskUnblockTime+0x20>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	b923      	cbnz	r3, 8000a8e <prvResetNextTaskUnblockTime+0x12>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <prvResetNextTaskUnblockTime+0x24>)
 8000a86:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	4770      	bx	lr
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000a8e:	4b03      	ldr	r3, [pc, #12]	@ (8000a9c <prvResetNextTaskUnblockTime+0x20>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4b02      	ldr	r3, [pc, #8]	@ (8000aa0 <prvResetNextTaskUnblockTime+0x24>)
 8000a98:	601a      	str	r2, [r3, #0]
    }
}
 8000a9a:	4770      	bx	lr
 8000a9c:	20000404 	.word	0x20000404
 8000aa0:	2000039c 	.word	0x2000039c

08000aa4 <prvInitialiseNewTask>:
{
 8000aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa8:	4680      	mov	r8, r0
 8000aaa:	460d      	mov	r5, r1
 8000aac:	4617      	mov	r7, r2
 8000aae:	4699      	mov	r9, r3
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8000ab6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000ab8:	0092      	lsls	r2, r2, #2
 8000aba:	21a5      	movs	r1, #165	@ 0xa5
 8000abc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8000abe:	f7ff fc6b 	bl	8000398 <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000ac2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000ac4:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8000ac8:	3a01      	subs	r2, #1
 8000aca:	eb03 0782 	add.w	r7, r3, r2, lsl #2
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000ace:	f027 0707 	bic.w	r7, r7, #7
    if( pcName != NULL )
 8000ad2:	b18d      	cbz	r5, 8000af8 <prvInitialiseNewTask+0x54>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000ad4:	f04f 0c00 	mov.w	ip, #0
 8000ad8:	f1bc 0f0f 	cmp.w	ip, #15
 8000adc:	d809      	bhi.n	8000af2 <prvInitialiseNewTask+0x4e>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000ade:	f815 300c 	ldrb.w	r3, [r5, ip]
 8000ae2:	eb04 020c 	add.w	r2, r4, ip
 8000ae6:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
            if( pcName[ x ] == ( char ) 0x00 )
 8000aea:	b113      	cbz	r3, 8000af2 <prvInitialiseNewTask+0x4e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000aec:	f10c 0c01 	add.w	ip, ip, #1
 8000af0:	e7f2      	b.n	8000ad8 <prvInitialiseNewTask+0x34>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000af2:	2300      	movs	r3, #0
 8000af4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000af8:	2e0f      	cmp	r6, #15
 8000afa:	d81a      	bhi.n	8000b32 <prvInitialiseNewTask+0x8e>
    pxNewTCB->uxPriority = uxPriority;
 8000afc:	62e6      	str	r6, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 8000afe:	6466      	str	r6, [r4, #68]	@ 0x44
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000b00:	1d20      	adds	r0, r4, #4
 8000b02:	f001 f940 	bl	8001d86 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000b06:	f104 0018 	add.w	r0, r4, #24
 8000b0a:	f001 f93c 	bl	8001d86 <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000b0e:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b10:	f1c6 0610 	rsb	r6, r6, #16
 8000b14:	61a6      	str	r6, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000b16:	6264      	str	r4, [r4, #36]	@ 0x24
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000b18:	464a      	mov	r2, r9
 8000b1a:	4641      	mov	r1, r8
 8000b1c:	4638      	mov	r0, r7
 8000b1e:	f002 f9f7 	bl	8002f10 <pxPortInitialiseStack>
 8000b22:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8000b24:	f1ba 0f00 	cmp.w	sl, #0
 8000b28:	d001      	beq.n	8000b2e <prvInitialiseNewTask+0x8a>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000b2a:	f8ca 4000 	str.w	r4, [sl]
}
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b36:	f383 8811 	msr	BASEPRI, r3
 8000b3a:	f3bf 8f6f 	isb	sy
 8000b3e:	f3bf 8f4f 	dsb	sy
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000b42:	f240 3192 	movw	r1, #914	@ 0x392
 8000b46:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <prvInitialiseNewTask+0xac>)
 8000b48:	f7ff fe78 	bl	800083c <assert_failed>
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000b4c:	260f      	movs	r6, #15
 8000b4e:	e7d5      	b.n	8000afc <prvInitialiseNewTask+0x58>
 8000b50:	08004118 	.word	0x08004118

08000b54 <prvInitialiseTaskLists>:
{
 8000b54:	b538      	push	{r3, r4, r5, lr}
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000b56:	2400      	movs	r4, #0
 8000b58:	e007      	b.n	8000b6a <prvInitialiseTaskLists+0x16>
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000b5a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000b5e:	0093      	lsls	r3, r2, #2
 8000b60:	480e      	ldr	r0, [pc, #56]	@ (8000b9c <prvInitialiseTaskLists+0x48>)
 8000b62:	4418      	add	r0, r3
 8000b64:	f001 f904 	bl	8001d70 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000b68:	3401      	adds	r4, #1
 8000b6a:	2c0f      	cmp	r4, #15
 8000b6c:	d9f5      	bls.n	8000b5a <prvInitialiseTaskLists+0x6>
    vListInitialise( &xDelayedTaskList1 );
 8000b6e:	4d0c      	ldr	r5, [pc, #48]	@ (8000ba0 <prvInitialiseTaskLists+0x4c>)
 8000b70:	4628      	mov	r0, r5
 8000b72:	f001 f8fd 	bl	8001d70 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000b76:	4c0b      	ldr	r4, [pc, #44]	@ (8000ba4 <prvInitialiseTaskLists+0x50>)
 8000b78:	4620      	mov	r0, r4
 8000b7a:	f001 f8f9 	bl	8001d70 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000b7e:	480a      	ldr	r0, [pc, #40]	@ (8000ba8 <prvInitialiseTaskLists+0x54>)
 8000b80:	f001 f8f6 	bl	8001d70 <vListInitialise>
        vListInitialise( &xTasksWaitingTermination );
 8000b84:	4809      	ldr	r0, [pc, #36]	@ (8000bac <prvInitialiseTaskLists+0x58>)
 8000b86:	f001 f8f3 	bl	8001d70 <vListInitialise>
        vListInitialise( &xSuspendedTaskList );
 8000b8a:	4809      	ldr	r0, [pc, #36]	@ (8000bb0 <prvInitialiseTaskLists+0x5c>)
 8000b8c:	f001 f8f0 	bl	8001d70 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8000b90:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <prvInitialiseTaskLists+0x60>)
 8000b92:	601d      	str	r5, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <prvInitialiseTaskLists+0x64>)
 8000b96:	601c      	str	r4, [r3, #0]
}
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000430 	.word	0x20000430
 8000ba0:	2000041c 	.word	0x2000041c
 8000ba4:	20000408 	.word	0x20000408
 8000ba8:	200003ec 	.word	0x200003ec
 8000bac:	200003d8 	.word	0x200003d8
 8000bb0:	200003c0 	.word	0x200003c0
 8000bb4:	20000404 	.word	0x20000404
 8000bb8:	20000400 	.word	0x20000400

08000bbc <prvAddNewTaskToReadyList>:
{
 8000bbc:	b510      	push	{r4, lr}
 8000bbe:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8000bc0:	f002 f9d0 	bl	8002f64 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8000bc4:	4a28      	ldr	r2, [pc, #160]	@ (8000c68 <prvAddNewTaskToReadyList+0xac>)
 8000bc6:	6813      	ldr	r3, [r2, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
 8000bcc:	4b27      	ldr	r3, [pc, #156]	@ (8000c6c <prvAddNewTaskToReadyList+0xb0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	b15b      	cbz	r3, 8000bea <prvAddNewTaskToReadyList+0x2e>
            if( xSchedulerRunning == pdFALSE )
 8000bd2:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <prvAddNewTaskToReadyList+0xb4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	b96b      	cbnz	r3, 8000bf4 <prvAddNewTaskToReadyList+0x38>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000bd8:	4b24      	ldr	r3, [pc, #144]	@ (8000c6c <prvAddNewTaskToReadyList+0xb0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bde:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d807      	bhi.n	8000bf4 <prvAddNewTaskToReadyList+0x38>
                    pxCurrentTCB = pxNewTCB;
 8000be4:	4b21      	ldr	r3, [pc, #132]	@ (8000c6c <prvAddNewTaskToReadyList+0xb0>)
 8000be6:	601c      	str	r4, [r3, #0]
 8000be8:	e004      	b.n	8000bf4 <prvAddNewTaskToReadyList+0x38>
            pxCurrentTCB = pxNewTCB;
 8000bea:	4b20      	ldr	r3, [pc, #128]	@ (8000c6c <prvAddNewTaskToReadyList+0xb0>)
 8000bec:	601c      	str	r4, [r3, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000bee:	6813      	ldr	r3, [r2, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d036      	beq.n	8000c62 <prvAddNewTaskToReadyList+0xa6>
        uxTaskNumber++;
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c74 <prvAddNewTaskToReadyList+0xb8>)
 8000bf6:	6813      	ldr	r3, [r2, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8000bfc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000bfe:	2201      	movs	r2, #1
 8000c00:	409a      	lsls	r2, r3
 8000c02:	491d      	ldr	r1, [pc, #116]	@ (8000c78 <prvAddNewTaskToReadyList+0xbc>)
 8000c04:	6808      	ldr	r0, [r1, #0]
 8000c06:	4302      	orrs	r2, r0
 8000c08:	600a      	str	r2, [r1, #0]
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c7c <prvAddNewTaskToReadyList+0xc0>)
 8000c0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	60a3      	str	r3, [r4, #8]
 8000c18:	6898      	ldr	r0, [r3, #8]
 8000c1a:	60e0      	str	r0, [r4, #12]
 8000c1c:	1d21      	adds	r1, r4, #4
 8000c1e:	6041      	str	r1, [r0, #4]
 8000c20:	6099      	str	r1, [r3, #8]
 8000c22:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000c24:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000c28:	0088      	lsls	r0, r1, #2
 8000c2a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8000c2e:	6161      	str	r1, [r4, #20]
 8000c30:	5811      	ldr	r1, [r2, r0]
 8000c32:	3101      	adds	r1, #1
 8000c34:	5011      	str	r1, [r2, r0]
    taskEXIT_CRITICAL();
 8000c36:	f002 f9bf 	bl	8002fb8 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <prvAddNewTaskToReadyList+0xb4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	b17b      	cbz	r3, 8000c60 <prvAddNewTaskToReadyList+0xa4>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000c40:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <prvAddNewTaskToReadyList+0xb0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c46:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d209      	bcs.n	8000c60 <prvAddNewTaskToReadyList+0xa4>
            taskYIELD_IF_USING_PREEMPTION();
 8000c4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000c50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8000c58:	f3bf 8f4f 	dsb	sy
 8000c5c:	f3bf 8f6f 	isb	sy
}
 8000c60:	bd10      	pop	{r4, pc}
                prvInitialiseTaskLists();
 8000c62:	f7ff ff77 	bl	8000b54 <prvInitialiseTaskLists>
 8000c66:	e7c5      	b.n	8000bf4 <prvAddNewTaskToReadyList+0x38>
 8000c68:	200003bc 	.word	0x200003bc
 8000c6c:	20000570 	.word	0x20000570
 8000c70:	200003b0 	.word	0x200003b0
 8000c74:	200003a0 	.word	0x200003a0
 8000c78:	200003b4 	.word	0x200003b4
 8000c7c:	20000430 	.word	0x20000430

08000c80 <prvDeleteTCB>:
    {
 8000c80:	b510      	push	{r4, lr}
 8000c82:	4604      	mov	r4, r0
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8000c84:	f890 3055 	ldrb.w	r3, [r0, #85]	@ 0x55
 8000c88:	b18b      	cbz	r3, 8000cae <prvDeleteTCB+0x2e>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d016      	beq.n	8000cbc <prvDeleteTCB+0x3c>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d013      	beq.n	8000cba <prvDeleteTCB+0x3a>
 8000c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c96:	f383 8811 	msr	BASEPRI, r3
 8000c9a:	f3bf 8f6f 	isb	sy
 8000c9e:	f3bf 8f4f 	dsb	sy
 8000ca2:	f640 7195 	movw	r1, #3989	@ 0xf95
 8000ca6:	4807      	ldr	r0, [pc, #28]	@ (8000cc4 <prvDeleteTCB+0x44>)
 8000ca8:	f7ff fdc8 	bl	800083c <assert_failed>
    }
 8000cac:	e005      	b.n	8000cba <prvDeleteTCB+0x3a>
                vPortFreeStack( pxTCB->pxStack );
 8000cae:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8000cb0:	f001 f80a 	bl	8001cc8 <vPortFree>
                vPortFree( pxTCB );
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f001 f807 	bl	8001cc8 <vPortFree>
    }
 8000cba:	bd10      	pop	{r4, pc}
                vPortFree( pxTCB );
 8000cbc:	f001 f804 	bl	8001cc8 <vPortFree>
 8000cc0:	e7fb      	b.n	8000cba <prvDeleteTCB+0x3a>
 8000cc2:	bf00      	nop
 8000cc4:	08004118 	.word	0x08004118

08000cc8 <prvCheckTasksWaitingTermination>:
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <prvCheckTasksWaitingTermination+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	b1d3      	cbz	r3, 8000d04 <prvCheckTasksWaitingTermination+0x3c>
{
 8000cce:	b510      	push	{r4, lr}
            taskENTER_CRITICAL();
 8000cd0:	f002 f948 	bl	8002f64 <vPortEnterCritical>
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <prvCheckTasksWaitingTermination+0x44>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	68dc      	ldr	r4, [r3, #12]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000cda:	1d20      	adds	r0, r4, #4
 8000cdc:	f001 f86f 	bl	8001dbe <uxListRemove>
                --uxCurrentNumberOfTasks;
 8000ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8000d10 <prvCheckTasksWaitingTermination+0x48>)
 8000ce2:	6813      	ldr	r3, [r2, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8000ce8:	4a07      	ldr	r2, [pc, #28]	@ (8000d08 <prvCheckTasksWaitingTermination+0x40>)
 8000cea:	6813      	ldr	r3, [r2, #0]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	6013      	str	r3, [r2, #0]
            taskEXIT_CRITICAL();
 8000cf0:	f002 f962 	bl	8002fb8 <vPortExitCritical>
            prvDeleteTCB( pxTCB );
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f7ff ffc3 	bl	8000c80 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000cfa:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <prvCheckTasksWaitingTermination+0x40>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1e6      	bne.n	8000cd0 <prvCheckTasksWaitingTermination+0x8>
}
 8000d02:	bd10      	pop	{r4, pc}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	200003d4 	.word	0x200003d4
 8000d0c:	200003d8 	.word	0x200003d8
 8000d10:	200003bc 	.word	0x200003bc

08000d14 <prvIdleTask>:
{
 8000d14:	b508      	push	{r3, lr}
        prvCheckTasksWaitingTermination();
 8000d16:	f7ff ffd7 	bl	8000cc8 <prvCheckTasksWaitingTermination>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <prvIdleTask+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d9f9      	bls.n	8000d16 <prvIdleTask+0x2>
                taskYIELD();
 8000d22:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d2a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8000d2e:	f3bf 8f4f 	dsb	sy
 8000d32:	f3bf 8f6f 	isb	sy
 8000d36:	e7ee      	b.n	8000d16 <prvIdleTask+0x2>
 8000d38:	20000430 	.word	0x20000430

08000d3c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000d3c:	b570      	push	{r4, r5, r6, lr}
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000d42:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8000d44:	681e      	ldr	r6, [r3, #0]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000d46:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8000d48:	6818      	ldr	r0, [r3, #0]
 8000d4a:	3004      	adds	r0, #4
 8000d4c:	f001 f837 	bl	8001dbe <uxListRemove>
 8000d50:	b948      	cbnz	r0, 8000d66 <prvAddCurrentTaskToDelayedList+0x2a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000d52:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d58:	2201      	movs	r2, #1
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	491e      	ldr	r1, [pc, #120]	@ (8000dd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8000d5e:	680b      	ldr	r3, [r1, #0]
 8000d60:	ea23 0302 	bic.w	r3, r3, r2
 8000d64:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000d66:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000d6a:	d00d      	beq.n	8000d88 <prvAddCurrentTaskToDelayedList+0x4c>
        else
        {
            /* Calculate the time at which the task should be woken if the event
             * does not occur.  This may overflow but this doesn't matter, the
             * kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
 8000d6c:	4434      	add	r4, r6

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000d6e:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	605c      	str	r4, [r3, #4]

            if( xTimeToWake < xConstTickCount )
 8000d74:	42a6      	cmp	r6, r4
 8000d76:	d91d      	bls.n	8000db4 <prvAddCurrentTaskToDelayedList+0x78>
            {
                /* Wake time has overflowed.  Place this item in the overflow
                 * list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <prvAddCurrentTaskToDelayedList+0xa0>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8000d7e:	6819      	ldr	r1, [r3, #0]
 8000d80:	3104      	adds	r1, #4
 8000d82:	f001 f803 	bl	8001d8c <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000d86:	bd70      	pop	{r4, r5, r6, pc}
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000d88:	2d00      	cmp	r5, #0
 8000d8a:	d0ef      	beq.n	8000d6c <prvAddCurrentTaskToDelayedList+0x30>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000d8c:	4a14      	ldr	r2, [pc, #80]	@ (8000de0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8000d8e:	6851      	ldr	r1, [r2, #4]
 8000d90:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	6081      	str	r1, [r0, #8]
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	688c      	ldr	r4, [r1, #8]
 8000d9a:	60c4      	str	r4, [r0, #12]
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	3004      	adds	r0, #4
 8000da0:	6060      	str	r0, [r4, #4]
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	3004      	adds	r0, #4
 8000da6:	6088      	str	r0, [r1, #8]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	615a      	str	r2, [r3, #20]
 8000dac:	6813      	ldr	r3, [r2, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e7e8      	b.n	8000d86 <prvAddCurrentTaskToDelayedList+0x4a>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000db4:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <prvAddCurrentTaskToDelayedList+0xa8>)
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8000dba:	6819      	ldr	r1, [r3, #0]
 8000dbc:	3104      	adds	r1, #4
 8000dbe:	f000 ffe5 	bl	8001d8c <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <prvAddCurrentTaskToDelayedList+0xac>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	42a3      	cmp	r3, r4
 8000dc8:	d9dd      	bls.n	8000d86 <prvAddCurrentTaskToDelayedList+0x4a>
                    xNextTaskUnblockTime = xTimeToWake;
 8000dca:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <prvAddCurrentTaskToDelayedList+0xac>)
 8000dcc:	601c      	str	r4, [r3, #0]
}
 8000dce:	e7da      	b.n	8000d86 <prvAddCurrentTaskToDelayedList+0x4a>
 8000dd0:	200003b8 	.word	0x200003b8
 8000dd4:	20000570 	.word	0x20000570
 8000dd8:	200003b4 	.word	0x200003b4
 8000ddc:	20000400 	.word	0x20000400
 8000de0:	200003c0 	.word	0x200003c0
 8000de4:	20000404 	.word	0x20000404
 8000de8:	2000039c 	.word	0x2000039c

08000dec <xTaskCreateStatic>:
    {
 8000dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000df0:	b087      	sub	sp, #28
 8000df2:	4681      	mov	r9, r0
 8000df4:	460e      	mov	r6, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	4698      	mov	r8, r3
 8000dfa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8000dfc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
        configASSERT( puxStackBuffer != NULL );
 8000dfe:	b32d      	cbz	r5, 8000e4c <xTaskCreateStatic+0x60>
        configASSERT( pxTaskBuffer != NULL );
 8000e00:	2c00      	cmp	r4, #0
 8000e02:	d031      	beq.n	8000e68 <xTaskCreateStatic+0x7c>
            volatile size_t xSize = sizeof( StaticTask_t );
 8000e04:	2258      	movs	r2, #88	@ 0x58
 8000e06:	9204      	str	r2, [sp, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
 8000e08:	9a04      	ldr	r2, [sp, #16]
 8000e0a:	2a58      	cmp	r2, #88	@ 0x58
 8000e0c:	d13a      	bne.n	8000e84 <xTaskCreateStatic+0x98>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8000e0e:	9b04      	ldr	r3, [sp, #16]
        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8000e10:	2c00      	cmp	r4, #0
 8000e12:	d045      	beq.n	8000ea0 <xTaskCreateStatic+0xb4>
 8000e14:	2d00      	cmp	r5, #0
 8000e16:	d043      	beq.n	8000ea0 <xTaskCreateStatic+0xb4>
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000e18:	2258      	movs	r2, #88	@ 0x58
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f7ff fabb 	bl	8000398 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8000e22:	6325      	str	r5, [r4, #48]	@ 0x30
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8000e24:	2302      	movs	r3, #2
 8000e26:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9303      	str	r3, [sp, #12]
 8000e2e:	9402      	str	r4, [sp, #8]
 8000e30:	ab05      	add	r3, sp, #20
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	4643      	mov	r3, r8
 8000e3a:	463a      	mov	r2, r7
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	4648      	mov	r0, r9
 8000e40:	f7ff fe30 	bl	8000aa4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000e44:	4620      	mov	r0, r4
 8000e46:	f7ff feb9 	bl	8000bbc <prvAddNewTaskToReadyList>
 8000e4a:	e02b      	b.n	8000ea4 <xTaskCreateStatic+0xb8>
 8000e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e50:	f383 8811 	msr	BASEPRI, r3
 8000e54:	f3bf 8f6f 	isb	sy
 8000e58:	f3bf 8f4f 	dsb	sy
        configASSERT( puxStackBuffer != NULL );
 8000e5c:	f240 213f 	movw	r1, #575	@ 0x23f
 8000e60:	4812      	ldr	r0, [pc, #72]	@ (8000eac <xTaskCreateStatic+0xc0>)
 8000e62:	f7ff fceb 	bl	800083c <assert_failed>
 8000e66:	e7cb      	b.n	8000e00 <xTaskCreateStatic+0x14>
 8000e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e6c:	f383 8811 	msr	BASEPRI, r3
 8000e70:	f3bf 8f6f 	isb	sy
 8000e74:	f3bf 8f4f 	dsb	sy
        configASSERT( pxTaskBuffer != NULL );
 8000e78:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000e7c:	480b      	ldr	r0, [pc, #44]	@ (8000eac <xTaskCreateStatic+0xc0>)
 8000e7e:	f7ff fcdd 	bl	800083c <assert_failed>
 8000e82:	e7bf      	b.n	8000e04 <xTaskCreateStatic+0x18>
 8000e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e88:	f383 8811 	msr	BASEPRI, r3
 8000e8c:	f3bf 8f6f 	isb	sy
 8000e90:	f3bf 8f4f 	dsb	sy
            configASSERT( xSize == sizeof( TCB_t ) );
 8000e94:	f44f 7112 	mov.w	r1, #584	@ 0x248
 8000e98:	4804      	ldr	r0, [pc, #16]	@ (8000eac <xTaskCreateStatic+0xc0>)
 8000e9a:	f7ff fccf 	bl	800083c <assert_failed>
 8000e9e:	e7b6      	b.n	8000e0e <xTaskCreateStatic+0x22>
            xReturn = NULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	9305      	str	r3, [sp, #20]
    }
 8000ea4:	9805      	ldr	r0, [sp, #20]
 8000ea6:	b007      	add	sp, #28
 8000ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000eac:	08004118 	.word	0x08004118

08000eb0 <xTaskCreate>:
    {
 8000eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000eb4:	b085      	sub	sp, #20
 8000eb6:	4607      	mov	r7, r0
 8000eb8:	4688      	mov	r8, r1
 8000eba:	4614      	mov	r4, r2
 8000ebc:	461e      	mov	r6, r3
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000ebe:	0090      	lsls	r0, r2, #2
 8000ec0:	f000 fe70 	bl	8001ba4 <pvPortMalloc>
            if( pxStack != NULL )
 8000ec4:	b318      	cbz	r0, 8000f0e <xTaskCreate+0x5e>
 8000ec6:	4681      	mov	r9, r0
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000ec8:	2058      	movs	r0, #88	@ 0x58
 8000eca:	f000 fe6b 	bl	8001ba4 <pvPortMalloc>
                if( pxNewTCB != NULL )
 8000ece:	4605      	mov	r5, r0
 8000ed0:	b1b8      	cbz	r0, 8000f02 <xTaskCreate+0x52>
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000ed2:	2258      	movs	r2, #88	@ 0x58
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	f7ff fa5f 	bl	8000398 <memset>
                    pxNewTCB->pxStack = pxStack;
 8000eda:	f8c5 9030 	str.w	r9, [r5, #48]	@ 0x30
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000ede:	2300      	movs	r3, #0
 8000ee0:	9303      	str	r3, [sp, #12]
 8000ee2:	9502      	str	r5, [sp, #8]
 8000ee4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	4633      	mov	r3, r6
 8000eee:	4622      	mov	r2, r4
 8000ef0:	4641      	mov	r1, r8
 8000ef2:	4638      	mov	r0, r7
 8000ef4:	f7ff fdd6 	bl	8000aa4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000ef8:	4628      	mov	r0, r5
 8000efa:	f7ff fe5f 	bl	8000bbc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000efe:	2001      	movs	r0, #1
 8000f00:	e007      	b.n	8000f12 <xTaskCreate+0x62>
                    vPortFreeStack( pxStack );
 8000f02:	4648      	mov	r0, r9
 8000f04:	f000 fee0 	bl	8001cc8 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	e001      	b.n	8000f12 <xTaskCreate+0x62>
 8000f0e:	f04f 30ff 	mov.w	r0, #4294967295
    }
 8000f12:	b005      	add	sp, #20
 8000f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f18 <vTaskStartScheduler>:
{
 8000f18:	b510      	push	{r4, lr}
 8000f1a:	b088      	sub	sp, #32
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	9405      	str	r4, [sp, #20]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8000f20:	9406      	str	r4, [sp, #24]
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8000f22:	aa07      	add	r2, sp, #28
 8000f24:	a906      	add	r1, sp, #24
 8000f26:	a805      	add	r0, sp, #20
 8000f28:	f7ff fa6e 	bl	8000408 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8000f2c:	9b05      	ldr	r3, [sp, #20]
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	9b06      	ldr	r3, [sp, #24]
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	9400      	str	r4, [sp, #0]
 8000f36:	4623      	mov	r3, r4
 8000f38:	9a07      	ldr	r2, [sp, #28]
 8000f3a:	491c      	ldr	r1, [pc, #112]	@ (8000fac <vTaskStartScheduler+0x94>)
 8000f3c:	481c      	ldr	r0, [pc, #112]	@ (8000fb0 <vTaskStartScheduler+0x98>)
 8000f3e:	f7ff ff55 	bl	8000dec <xTaskCreateStatic>
 8000f42:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <vTaskStartScheduler+0x9c>)
 8000f44:	6018      	str	r0, [r3, #0]
        if( xIdleTaskHandle != NULL )
 8000f46:	b1d0      	cbz	r0, 8000f7e <vTaskStartScheduler+0x66>
            xReturn = xTimerCreateTimerTask();
 8000f48:	f000 fd94 	bl	8001a74 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 8000f4c:	2801      	cmp	r0, #1
 8000f4e:	d117      	bne.n	8000f80 <vTaskStartScheduler+0x68>
 8000f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f54:	f383 8811 	msr	BASEPRI, r3
 8000f58:	f3bf 8f6f 	isb	sy
 8000f5c:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <vTaskStartScheduler+0xa0>)
 8000f62:	f04f 32ff 	mov.w	r2, #4294967295
 8000f66:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000f68:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <vTaskStartScheduler+0xa4>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <vTaskStartScheduler+0xa8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8000f74:	f7ff fa60 	bl	8000438 <configureTimerForRunTimeStats>
        xPortStartScheduler();
 8000f78:	f002 f89e 	bl	80030b8 <xPortStartScheduler>
 8000f7c:	e003      	b.n	8000f86 <vTaskStartScheduler+0x6e>
            xReturn = pdFAIL;
 8000f7e:	2000      	movs	r0, #0
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000f80:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000f84:	d003      	beq.n	8000f8e <vTaskStartScheduler+0x76>
    ( void ) uxTopUsedPriority;
 8000f86:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <vTaskStartScheduler+0xac>)
 8000f88:	681b      	ldr	r3, [r3, #0]
}
 8000f8a:	b008      	add	sp, #32
 8000f8c:	bd10      	pop	{r4, pc}
 8000f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f92:	f383 8811 	msr	BASEPRI, r3
 8000f96:	f3bf 8f6f 	isb	sy
 8000f9a:	f3bf 8f4f 	dsb	sy
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000f9e:	f640 0112 	movw	r1, #2066	@ 0x812
 8000fa2:	4809      	ldr	r0, [pc, #36]	@ (8000fc8 <vTaskStartScheduler+0xb0>)
 8000fa4:	f7ff fc4a 	bl	800083c <assert_failed>
 8000fa8:	e7ed      	b.n	8000f86 <vTaskStartScheduler+0x6e>
 8000faa:	bf00      	nop
 8000fac:	08004164 	.word	0x08004164
 8000fb0:	08000d15 	.word	0x08000d15
 8000fb4:	20000398 	.word	0x20000398
 8000fb8:	2000039c 	.word	0x2000039c
 8000fbc:	200003b0 	.word	0x200003b0
 8000fc0:	200003b8 	.word	0x200003b8
 8000fc4:	0800431c 	.word	0x0800431c
 8000fc8:	08004118 	.word	0x08004118

08000fcc <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8000fcc:	4a02      	ldr	r2, [pc, #8]	@ (8000fd8 <vTaskSuspendAll+0xc>)
 8000fce:	6813      	ldr	r3, [r2, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000394 	.word	0x20000394

08000fdc <xTaskGetTickCount>:
        xTicks = xTickCount;
 8000fdc:	4b01      	ldr	r3, [pc, #4]	@ (8000fe4 <xTaskGetTickCount+0x8>)
 8000fde:	6818      	ldr	r0, [r3, #0]
}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	200003b8 	.word	0x200003b8

08000fe8 <pcTaskGetName>:
{
 8000fe8:	b510      	push	{r4, lr}
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8000fea:	4604      	mov	r4, r0
 8000fec:	b110      	cbz	r0, 8000ff4 <pcTaskGetName+0xc>
}
 8000fee:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8000ff2:	bd10      	pop	{r4, pc}
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <pcTaskGetName+0x30>)
 8000ff6:	681c      	ldr	r4, [r3, #0]
    configASSERT( pxTCB );
 8000ff8:	2c00      	cmp	r4, #0
 8000ffa:	d1f8      	bne.n	8000fee <pcTaskGetName+0x6>
 8000ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001000:	f383 8811 	msr	BASEPRI, r3
 8001004:	f3bf 8f6f 	isb	sy
 8001008:	f3bf 8f4f 	dsb	sy
 800100c:	f640 112b 	movw	r1, #2347	@ 0x92b
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <pcTaskGetName+0x34>)
 8001012:	f7ff fc13 	bl	800083c <assert_failed>
 8001016:	e7ea      	b.n	8000fee <pcTaskGetName+0x6>
 8001018:	20000570 	.word	0x20000570
 800101c:	08004118 	.word	0x08004118

08001020 <xTaskIncrementTick>:
{
 8001020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001022:	4b4f      	ldr	r3, [pc, #316]	@ (8001160 <xTaskIncrementTick+0x140>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f040 8093 	bne.w	8001152 <xTaskIncrementTick+0x132>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800102c:	4b4d      	ldr	r3, [pc, #308]	@ (8001164 <xTaskIncrementTick+0x144>)
 800102e:	681c      	ldr	r4, [r3, #0]
 8001030:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8001032:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001034:	b97c      	cbnz	r4, 8001056 <xTaskIncrementTick+0x36>
            taskSWITCH_DELAYED_LISTS();
 8001036:	4b4c      	ldr	r3, [pc, #304]	@ (8001168 <xTaskIncrementTick+0x148>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	b9b3      	cbnz	r3, 800106c <xTaskIncrementTick+0x4c>
 800103e:	4a4a      	ldr	r2, [pc, #296]	@ (8001168 <xTaskIncrementTick+0x148>)
 8001040:	6811      	ldr	r1, [r2, #0]
 8001042:	4b4a      	ldr	r3, [pc, #296]	@ (800116c <xTaskIncrementTick+0x14c>)
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	6010      	str	r0, [r2, #0]
 8001048:	6019      	str	r1, [r3, #0]
 800104a:	4a49      	ldr	r2, [pc, #292]	@ (8001170 <xTaskIncrementTick+0x150>)
 800104c:	6813      	ldr	r3, [r2, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	f7ff fd13 	bl	8000a7c <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001056:	4b47      	ldr	r3, [pc, #284]	@ (8001174 <xTaskIncrementTick+0x154>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	42a3      	cmp	r3, r4
 800105c:	d914      	bls.n	8001088 <xTaskIncrementTick+0x68>
    BaseType_t xSwitchRequired = pdFALSE;
 800105e:	2000      	movs	r0, #0
            if( xYieldPending != pdFALSE )
 8001060:	4b45      	ldr	r3, [pc, #276]	@ (8001178 <xTaskIncrementTick+0x158>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d079      	beq.n	800115c <xTaskIncrementTick+0x13c>
                xSwitchRequired = pdTRUE;
 8001068:	2001      	movs	r0, #1
    return xSwitchRequired;
 800106a:	e077      	b.n	800115c <xTaskIncrementTick+0x13c>
 800106c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001070:	f383 8811 	msr	BASEPRI, r3
 8001074:	f3bf 8f6f 	isb	sy
 8001078:	f3bf 8f4f 	dsb	sy
            taskSWITCH_DELAYED_LISTS();
 800107c:	f640 21b7 	movw	r1, #2743	@ 0xab7
 8001080:	483e      	ldr	r0, [pc, #248]	@ (800117c <xTaskIncrementTick+0x15c>)
 8001082:	f7ff fbdb 	bl	800083c <assert_failed>
 8001086:	e7da      	b.n	800103e <xTaskIncrementTick+0x1e>
    BaseType_t xSwitchRequired = pdFALSE;
 8001088:	2000      	movs	r0, #0
 800108a:	e037      	b.n	80010fc <xTaskIncrementTick+0xdc>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800108c:	4b39      	ldr	r3, [pc, #228]	@ (8001174 <xTaskIncrementTick+0x154>)
 800108e:	f04f 32ff 	mov.w	r2, #4294967295
 8001092:	601a      	str	r2, [r3, #0]
                    break;
 8001094:	e7e4      	b.n	8001060 <xTaskIncrementTick+0x40>
                        xNextTaskUnblockTime = xItemValue;
 8001096:	4b37      	ldr	r3, [pc, #220]	@ (8001174 <xTaskIncrementTick+0x154>)
 8001098:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800109a:	e7e1      	b.n	8001060 <xTaskIncrementTick+0x40>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800109c:	68d9      	ldr	r1, [r3, #12]
 800109e:	6051      	str	r1, [r2, #4]
 80010a0:	e042      	b.n	8001128 <xTaskIncrementTick+0x108>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80010a2:	2100      	movs	r1, #0
 80010a4:	6299      	str	r1, [r3, #40]	@ 0x28
 80010a6:	6811      	ldr	r1, [r2, #0]
 80010a8:	3901      	subs	r1, #1
 80010aa:	6011      	str	r1, [r2, #0]
                    prvAddTaskToReadyList( pxTCB );
 80010ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010ae:	2101      	movs	r1, #1
 80010b0:	4091      	lsls	r1, r2
 80010b2:	4e33      	ldr	r6, [pc, #204]	@ (8001180 <xTaskIncrementTick+0x160>)
 80010b4:	6837      	ldr	r7, [r6, #0]
 80010b6:	4339      	orrs	r1, r7
 80010b8:	6031      	str	r1, [r6, #0]
 80010ba:	4932      	ldr	r1, [pc, #200]	@ (8001184 <xTaskIncrementTick+0x164>)
 80010bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80010c0:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 80010c4:	448c      	add	ip, r1
 80010c6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	6896      	ldr	r6, [r2, #8]
 80010ce:	60de      	str	r6, [r3, #12]
 80010d0:	6075      	str	r5, [r6, #4]
 80010d2:	6095      	str	r5, [r2, #8]
 80010d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010d6:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 80010da:	ea4f 058c 	mov.w	r5, ip, lsl #2
 80010de:	186e      	adds	r6, r5, r1
 80010e0:	615e      	str	r6, [r3, #20]
 80010e2:	594d      	ldr	r5, [r1, r5]
 80010e4:	3501      	adds	r5, #1
 80010e6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80010ea:	f841 500c 	str.w	r5, [r1, ip]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80010ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010f0:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <xTaskIncrementTick+0x168>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d900      	bls.n	80010fc <xTaskIncrementTick+0xdc>
                            xSwitchRequired = pdTRUE;
 80010fa:	2001      	movs	r0, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <xTaskIncrementTick+0x148>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0c2      	beq.n	800108c <xTaskIncrementTick+0x6c>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001106:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <xTaskIncrementTick+0x148>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800110e:	685a      	ldr	r2, [r3, #4]
                    if( xConstTickCount < xItemValue )
 8001110:	4294      	cmp	r4, r2
 8001112:	d3c0      	bcc.n	8001096 <xTaskIncrementTick+0x76>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	689d      	ldr	r5, [r3, #8]
 8001118:	68d9      	ldr	r1, [r3, #12]
 800111a:	60a9      	str	r1, [r5, #8]
 800111c:	689d      	ldr	r5, [r3, #8]
 800111e:	604d      	str	r5, [r1, #4]
 8001120:	6851      	ldr	r1, [r2, #4]
 8001122:	1d1d      	adds	r5, r3, #4
 8001124:	42a9      	cmp	r1, r5
 8001126:	d0b9      	beq.n	800109c <xTaskIncrementTick+0x7c>
 8001128:	2100      	movs	r1, #0
 800112a:	6159      	str	r1, [r3, #20]
 800112c:	6811      	ldr	r1, [r2, #0]
 800112e:	3901      	subs	r1, #1
 8001130:	6011      	str	r1, [r2, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001132:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001134:	2a00      	cmp	r2, #0
 8001136:	d0b9      	beq.n	80010ac <xTaskIncrementTick+0x8c>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001138:	69de      	ldr	r6, [r3, #28]
 800113a:	6a19      	ldr	r1, [r3, #32]
 800113c:	60b1      	str	r1, [r6, #8]
 800113e:	69de      	ldr	r6, [r3, #28]
 8001140:	604e      	str	r6, [r1, #4]
 8001142:	6856      	ldr	r6, [r2, #4]
 8001144:	f103 0118 	add.w	r1, r3, #24
 8001148:	428e      	cmp	r6, r1
 800114a:	d1aa      	bne.n	80010a2 <xTaskIncrementTick+0x82>
 800114c:	6a19      	ldr	r1, [r3, #32]
 800114e:	6051      	str	r1, [r2, #4]
 8001150:	e7a7      	b.n	80010a2 <xTaskIncrementTick+0x82>
        ++xPendedTicks;
 8001152:	4a0e      	ldr	r2, [pc, #56]	@ (800118c <xTaskIncrementTick+0x16c>)
 8001154:	6813      	ldr	r3, [r2, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	6013      	str	r3, [r2, #0]
    BaseType_t xSwitchRequired = pdFALSE;
 800115a:	2000      	movs	r0, #0
}
 800115c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800115e:	bf00      	nop
 8001160:	20000394 	.word	0x20000394
 8001164:	200003b8 	.word	0x200003b8
 8001168:	20000404 	.word	0x20000404
 800116c:	20000400 	.word	0x20000400
 8001170:	200003a4 	.word	0x200003a4
 8001174:	2000039c 	.word	0x2000039c
 8001178:	200003a8 	.word	0x200003a8
 800117c:	08004118 	.word	0x08004118
 8001180:	200003b4 	.word	0x200003b4
 8001184:	20000430 	.word	0x20000430
 8001188:	20000570 	.word	0x20000570
 800118c:	200003ac 	.word	0x200003ac

08001190 <xTaskResumeAll>:
{
 8001190:	b538      	push	{r3, r4, r5, lr}
    configASSERT( uxSchedulerSuspended );
 8001192:	4b4d      	ldr	r3, [pc, #308]	@ (80012c8 <xTaskResumeAll+0x138>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	b173      	cbz	r3, 80011b6 <xTaskResumeAll+0x26>
    taskENTER_CRITICAL();
 8001198:	f001 fee4 	bl	8002f64 <vPortEnterCritical>
        --uxSchedulerSuspended;
 800119c:	4b4a      	ldr	r3, [pc, #296]	@ (80012c8 <xTaskResumeAll+0x138>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	3a01      	subs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f040 8089 	bne.w	80012be <xTaskResumeAll+0x12e>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80011ac:	4b47      	ldr	r3, [pc, #284]	@ (80012cc <xTaskResumeAll+0x13c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b9ab      	cbnz	r3, 80011de <xTaskResumeAll+0x4e>
    BaseType_t xAlreadyYielded = pdFALSE;
 80011b2:	2400      	movs	r4, #0
 80011b4:	e084      	b.n	80012c0 <xTaskResumeAll+0x130>
 80011b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ba:	f383 8811 	msr	BASEPRI, r3
 80011be:	f3bf 8f6f 	isb	sy
 80011c2:	f3bf 8f4f 	dsb	sy
    configASSERT( uxSchedulerSuspended );
 80011c6:	f640 0185 	movw	r1, #2181	@ 0x885
 80011ca:	4841      	ldr	r0, [pc, #260]	@ (80012d0 <xTaskResumeAll+0x140>)
 80011cc:	f7ff fb36 	bl	800083c <assert_failed>
 80011d0:	e7e2      	b.n	8001198 <xTaskResumeAll+0x8>
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80011d2:	6a19      	ldr	r1, [r3, #32]
 80011d4:	6051      	str	r1, [r2, #4]
 80011d6:	e015      	b.n	8001204 <xTaskResumeAll+0x74>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80011d8:	68d9      	ldr	r1, [r3, #12]
 80011da:	6051      	str	r1, [r2, #4]
 80011dc:	e021      	b.n	8001222 <xTaskResumeAll+0x92>
    TCB_t * pxTCB = NULL;
 80011de:	2300      	movs	r3, #0
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011e0:	4a3c      	ldr	r2, [pc, #240]	@ (80012d4 <xTaskResumeAll+0x144>)
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	2a00      	cmp	r2, #0
 80011e6:	d047      	beq.n	8001278 <xTaskResumeAll+0xe8>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011e8:	4b3a      	ldr	r3, [pc, #232]	@ (80012d4 <xTaskResumeAll+0x144>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80011ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011f0:	69d8      	ldr	r0, [r3, #28]
 80011f2:	6a19      	ldr	r1, [r3, #32]
 80011f4:	6081      	str	r1, [r0, #8]
 80011f6:	69d8      	ldr	r0, [r3, #28]
 80011f8:	6048      	str	r0, [r1, #4]
 80011fa:	6850      	ldr	r0, [r2, #4]
 80011fc:	f103 0118 	add.w	r1, r3, #24
 8001200:	4288      	cmp	r0, r1
 8001202:	d0e6      	beq.n	80011d2 <xTaskResumeAll+0x42>
 8001204:	2100      	movs	r1, #0
 8001206:	6299      	str	r1, [r3, #40]	@ 0x28
 8001208:	6811      	ldr	r1, [r2, #0]
 800120a:	3901      	subs	r1, #1
 800120c:	6011      	str	r1, [r2, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	6898      	ldr	r0, [r3, #8]
 8001212:	68d9      	ldr	r1, [r3, #12]
 8001214:	6081      	str	r1, [r0, #8]
 8001216:	6898      	ldr	r0, [r3, #8]
 8001218:	6048      	str	r0, [r1, #4]
 800121a:	6851      	ldr	r1, [r2, #4]
 800121c:	1d18      	adds	r0, r3, #4
 800121e:	4281      	cmp	r1, r0
 8001220:	d0da      	beq.n	80011d8 <xTaskResumeAll+0x48>
 8001222:	2100      	movs	r1, #0
 8001224:	6159      	str	r1, [r3, #20]
 8001226:	6811      	ldr	r1, [r2, #0]
 8001228:	3901      	subs	r1, #1
 800122a:	6011      	str	r1, [r2, #0]
                    prvAddTaskToReadyList( pxTCB );
 800122c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800122e:	2101      	movs	r1, #1
 8001230:	4091      	lsls	r1, r2
 8001232:	4c29      	ldr	r4, [pc, #164]	@ (80012d8 <xTaskResumeAll+0x148>)
 8001234:	6825      	ldr	r5, [r4, #0]
 8001236:	4329      	orrs	r1, r5
 8001238:	6021      	str	r1, [r4, #0]
 800123a:	4928      	ldr	r1, [pc, #160]	@ (80012dc <xTaskResumeAll+0x14c>)
 800123c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001240:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001244:	6852      	ldr	r2, [r2, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	6894      	ldr	r4, [r2, #8]
 800124a:	60dc      	str	r4, [r3, #12]
 800124c:	6060      	str	r0, [r4, #4]
 800124e:	6090      	str	r0, [r2, #8]
 8001250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001252:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8001256:	0084      	lsls	r4, r0, #2
 8001258:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800125c:	6158      	str	r0, [r3, #20]
 800125e:	5908      	ldr	r0, [r1, r4]
 8001260:	3001      	adds	r0, #1
 8001262:	5108      	str	r0, [r1, r4]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001264:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001266:	4a1e      	ldr	r2, [pc, #120]	@ (80012e0 <xTaskResumeAll+0x150>)
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800126c:	4291      	cmp	r1, r2
 800126e:	d3b7      	bcc.n	80011e0 <xTaskResumeAll+0x50>
                        xYieldPending = pdTRUE;
 8001270:	4a1c      	ldr	r2, [pc, #112]	@ (80012e4 <xTaskResumeAll+0x154>)
 8001272:	2101      	movs	r1, #1
 8001274:	6011      	str	r1, [r2, #0]
 8001276:	e7b3      	b.n	80011e0 <xTaskResumeAll+0x50>
                if( pxTCB != NULL )
 8001278:	b10b      	cbz	r3, 800127e <xTaskResumeAll+0xee>
                    prvResetNextTaskUnblockTime();
 800127a:	f7ff fbff 	bl	8000a7c <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800127e:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <xTaskResumeAll+0x158>)
 8001280:	681c      	ldr	r4, [r3, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
 8001282:	b984      	cbnz	r4, 80012a6 <xTaskResumeAll+0x116>
                if( xYieldPending != pdFALSE )
 8001284:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <xTaskResumeAll+0x154>)
 8001286:	681c      	ldr	r4, [r3, #0]
 8001288:	b1d4      	cbz	r4, 80012c0 <xTaskResumeAll+0x130>
                    taskYIELD_IF_USING_PREEMPTION();
 800128a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800128e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001292:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001296:	f3bf 8f4f 	dsb	sy
 800129a:	f3bf 8f6f 	isb	sy
                        xAlreadyYielded = pdTRUE;
 800129e:	2401      	movs	r4, #1
 80012a0:	e00e      	b.n	80012c0 <xTaskResumeAll+0x130>
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80012a2:	3c01      	subs	r4, #1
 80012a4:	d007      	beq.n	80012b6 <xTaskResumeAll+0x126>
                            if( xTaskIncrementTick() != pdFALSE )
 80012a6:	f7ff febb 	bl	8001020 <xTaskIncrementTick>
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d0f9      	beq.n	80012a2 <xTaskResumeAll+0x112>
                                xYieldPending = pdTRUE;
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <xTaskResumeAll+0x154>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	e7f5      	b.n	80012a2 <xTaskResumeAll+0x112>
                        xPendedTicks = 0;
 80012b6:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <xTaskResumeAll+0x158>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	e7e2      	b.n	8001284 <xTaskResumeAll+0xf4>
    BaseType_t xAlreadyYielded = pdFALSE;
 80012be:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 80012c0:	f001 fe7a 	bl	8002fb8 <vPortExitCritical>
}
 80012c4:	4620      	mov	r0, r4
 80012c6:	bd38      	pop	{r3, r4, r5, pc}
 80012c8:	20000394 	.word	0x20000394
 80012cc:	200003bc 	.word	0x200003bc
 80012d0:	08004118 	.word	0x08004118
 80012d4:	200003ec 	.word	0x200003ec
 80012d8:	200003b4 	.word	0x200003b4
 80012dc:	20000430 	.word	0x20000430
 80012e0:	20000570 	.word	0x20000570
 80012e4:	200003a8 	.word	0x200003a8
 80012e8:	200003ac 	.word	0x200003ac

080012ec <xTaskDelayUntil>:
    {
 80012ec:	b538      	push	{r3, r4, r5, lr}
 80012ee:	460c      	mov	r4, r1
        configASSERT( pxPreviousWakeTime );
 80012f0:	4605      	mov	r5, r0
 80012f2:	b180      	cbz	r0, 8001316 <xTaskDelayUntil+0x2a>
        configASSERT( ( xTimeIncrement > 0U ) );
 80012f4:	b1ec      	cbz	r4, 8001332 <xTaskDelayUntil+0x46>
        configASSERT( uxSchedulerSuspended == 0 );
 80012f6:	4b2e      	ldr	r3, [pc, #184]	@ (80013b0 <xTaskDelayUntil+0xc4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	bb43      	cbnz	r3, 800134e <xTaskDelayUntil+0x62>
        vTaskSuspendAll();
 80012fc:	f7ff fe66 	bl	8000fcc <vTaskSuspendAll>
            const TickType_t xConstTickCount = xTickCount;
 8001300:	4b2c      	ldr	r3, [pc, #176]	@ (80013b4 <xTaskDelayUntil+0xc8>)
 8001302:	6818      	ldr	r0, [r3, #0]
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001304:	682a      	ldr	r2, [r5, #0]
 8001306:	4414      	add	r4, r2
            if( xConstTickCount < *pxPreviousWakeTime )
 8001308:	4282      	cmp	r2, r0
 800130a:	d935      	bls.n	8001378 <xTaskDelayUntil+0x8c>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800130c:	42a2      	cmp	r2, r4
 800130e:	d82c      	bhi.n	800136a <xTaskDelayUntil+0x7e>
            *pxPreviousWakeTime = xTimeToWake;
 8001310:	602c      	str	r4, [r5, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8001312:	2400      	movs	r4, #0
 8001314:	e03a      	b.n	800138c <xTaskDelayUntil+0xa0>
 8001316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800131a:	f383 8811 	msr	BASEPRI, r3
 800131e:	f3bf 8f6f 	isb	sy
 8001322:	f3bf 8f4f 	dsb	sy
        configASSERT( pxPreviousWakeTime );
 8001326:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800132a:	4823      	ldr	r0, [pc, #140]	@ (80013b8 <xTaskDelayUntil+0xcc>)
 800132c:	f7ff fa86 	bl	800083c <assert_failed>
 8001330:	e7e0      	b.n	80012f4 <xTaskDelayUntil+0x8>
 8001332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001336:	f383 8811 	msr	BASEPRI, r3
 800133a:	f3bf 8f6f 	isb	sy
 800133e:	f3bf 8f4f 	dsb	sy
        configASSERT( ( xTimeIncrement > 0U ) );
 8001342:	f240 41c5 	movw	r1, #1221	@ 0x4c5
 8001346:	481c      	ldr	r0, [pc, #112]	@ (80013b8 <xTaskDelayUntil+0xcc>)
 8001348:	f7ff fa78 	bl	800083c <assert_failed>
 800134c:	e7d3      	b.n	80012f6 <xTaskDelayUntil+0xa>
 800134e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001352:	f383 8811 	msr	BASEPRI, r3
 8001356:	f3bf 8f6f 	isb	sy
 800135a:	f3bf 8f4f 	dsb	sy
        configASSERT( uxSchedulerSuspended == 0 );
 800135e:	f240 41c6 	movw	r1, #1222	@ 0x4c6
 8001362:	4815      	ldr	r0, [pc, #84]	@ (80013b8 <xTaskDelayUntil+0xcc>)
 8001364:	f7ff fa6a 	bl	800083c <assert_failed>
 8001368:	e7c8      	b.n	80012fc <xTaskDelayUntil+0x10>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800136a:	42a0      	cmp	r0, r4
 800136c:	d302      	bcc.n	8001374 <xTaskDelayUntil+0x88>
            *pxPreviousWakeTime = xTimeToWake;
 800136e:	602c      	str	r4, [r5, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8001370:	2400      	movs	r4, #0
 8001372:	e00b      	b.n	800138c <xTaskDelayUntil+0xa0>
            *pxPreviousWakeTime = xTimeToWake;
 8001374:	602c      	str	r4, [r5, #0]
            if( xShouldDelay != pdFALSE )
 8001376:	e004      	b.n	8001382 <xTaskDelayUntil+0x96>
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001378:	42a2      	cmp	r2, r4
 800137a:	d801      	bhi.n	8001380 <xTaskDelayUntil+0x94>
 800137c:	42a0      	cmp	r0, r4
 800137e:	d214      	bcs.n	80013aa <xTaskDelayUntil+0xbe>
            *pxPreviousWakeTime = xTimeToWake;
 8001380:	602c      	str	r4, [r5, #0]
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8001382:	2100      	movs	r1, #0
 8001384:	1a20      	subs	r0, r4, r0
 8001386:	f7ff fcd9 	bl	8000d3c <prvAddCurrentTaskToDelayedList>
 800138a:	2401      	movs	r4, #1
        xAlreadyYielded = xTaskResumeAll();
 800138c:	f7ff ff00 	bl	8001190 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8001390:	b948      	cbnz	r0, 80013a6 <xTaskDelayUntil+0xba>
            portYIELD_WITHIN_API();
 8001392:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800139a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800139e:	f3bf 8f4f 	dsb	sy
 80013a2:	f3bf 8f6f 	isb	sy
    }
 80013a6:	4620      	mov	r0, r4
 80013a8:	bd38      	pop	{r3, r4, r5, pc}
            *pxPreviousWakeTime = xTimeToWake;
 80013aa:	602c      	str	r4, [r5, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80013ac:	2400      	movs	r4, #0
 80013ae:	e7ed      	b.n	800138c <xTaskDelayUntil+0xa0>
 80013b0:	20000394 	.word	0x20000394
 80013b4:	200003b8 	.word	0x200003b8
 80013b8:	08004118 	.word	0x08004118

080013bc <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80013bc:	4b3a      	ldr	r3, [pc, #232]	@ (80014a8 <vTaskSwitchContext+0xec>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	b11b      	cbz	r3, 80013ca <vTaskSwitchContext+0xe>
        xYieldPending = pdTRUE;
 80013c2:	4b3a      	ldr	r3, [pc, #232]	@ (80014ac <vTaskSwitchContext+0xf0>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	4770      	bx	lr
{
 80013ca:	b510      	push	{r4, lr}
        xYieldPending = pdFALSE;
 80013cc:	4b37      	ldr	r3, [pc, #220]	@ (80014ac <vTaskSwitchContext+0xf0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
                ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80013d2:	f7ff f849 	bl	8000468 <getRunTimeCounterValue>
 80013d6:	4b36      	ldr	r3, [pc, #216]	@ (80014b0 <vTaskSwitchContext+0xf4>)
 80013d8:	6018      	str	r0, [r3, #0]
            if( ulTotalRunTime > ulTaskSwitchedInTime )
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b35      	ldr	r3, [pc, #212]	@ (80014b4 <vTaskSwitchContext+0xf8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d907      	bls.n	80013f4 <vTaskSwitchContext+0x38>
                pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80013e4:	4a32      	ldr	r2, [pc, #200]	@ (80014b0 <vTaskSwitchContext+0xf4>)
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	1ad2      	subs	r2, r2, r3
 80013ea:	4b33      	ldr	r3, [pc, #204]	@ (80014b8 <vTaskSwitchContext+0xfc>)
 80013ec:	6819      	ldr	r1, [r3, #0]
 80013ee:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 80013f0:	4413      	add	r3, r2
 80013f2:	64cb      	str	r3, [r1, #76]	@ 0x4c
            ulTaskSwitchedInTime = ulTotalRunTime;
 80013f4:	4b2e      	ldr	r3, [pc, #184]	@ (80014b0 <vTaskSwitchContext+0xf4>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b2e      	ldr	r3, [pc, #184]	@ (80014b4 <vTaskSwitchContext+0xf8>)
 80013fa:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 80013fc:	4b2e      	ldr	r3, [pc, #184]	@ (80014b8 <vTaskSwitchContext+0xfc>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 8001408:	d103      	bne.n	8001412 <vTaskSwitchContext+0x56>
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 8001410:	d02b      	beq.n	800146a <vTaskSwitchContext+0xae>
 8001412:	4b29      	ldr	r3, [pc, #164]	@ (80014b8 <vTaskSwitchContext+0xfc>)
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	6819      	ldr	r1, [r3, #0]
 8001418:	3134      	adds	r1, #52	@ 0x34
 800141a:	f7ff f82b 	bl	8000474 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800141e:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <vTaskSwitchContext+0x100>)
 8001420:	681c      	ldr	r4, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001422:	fab4 f484 	clz	r4, r4
 8001426:	b2e4      	uxtb	r4, r4
 8001428:	f1c4 041f 	rsb	r4, r4, #31
 800142c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4a23      	ldr	r2, [pc, #140]	@ (80014c0 <vTaskSwitchContext+0x104>)
 8001434:	58d3      	ldr	r3, [r2, r3]
 8001436:	b30b      	cbz	r3, 800147c <vTaskSwitchContext+0xc0>
 8001438:	4921      	ldr	r1, [pc, #132]	@ (80014c0 <vTaskSwitchContext+0x104>)
 800143a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800143e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	6852      	ldr	r2, [r2, #4]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	3308      	adds	r3, #8
 8001450:	440b      	add	r3, r1
 8001452:	429a      	cmp	r2, r3
 8001454:	d020      	beq.n	8001498 <vTaskSwitchContext+0xdc>
 8001456:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800145a:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <vTaskSwitchContext+0x104>)
 800145c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <vTaskSwitchContext+0xfc>)
 8001466:	601a      	str	r2, [r3, #0]
}
 8001468:	bd10      	pop	{r4, pc}
        taskCHECK_FOR_STACK_OVERFLOW();
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 8001470:	d1cf      	bne.n	8001412 <vTaskSwitchContext+0x56>
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 8001478:	d1cb      	bne.n	8001412 <vTaskSwitchContext+0x56>
 800147a:	e7d0      	b.n	800141e <vTaskSwitchContext+0x62>
        __asm volatile
 800147c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001480:	f383 8811 	msr	BASEPRI, r3
 8001484:	f3bf 8f6f 	isb	sy
 8001488:	f3bf 8f4f 	dsb	sy
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800148c:	f640 31f6 	movw	r1, #3062	@ 0xbf6
 8001490:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <vTaskSwitchContext+0x108>)
 8001492:	f7ff f9d3 	bl	800083c <assert_failed>
 8001496:	e7cf      	b.n	8001438 <vTaskSwitchContext+0x7c>
 8001498:	6851      	ldr	r1, [r2, #4]
 800149a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <vTaskSwitchContext+0x104>)
 80014a0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80014a4:	6059      	str	r1, [r3, #4]
 80014a6:	e7d6      	b.n	8001456 <vTaskSwitchContext+0x9a>
 80014a8:	20000394 	.word	0x20000394
 80014ac:	200003a8 	.word	0x200003a8
 80014b0:	2000038c 	.word	0x2000038c
 80014b4:	20000390 	.word	0x20000390
 80014b8:	20000570 	.word	0x20000570
 80014bc:	200003b4 	.word	0x200003b4
 80014c0:	20000430 	.word	0x20000430
 80014c4:	08004118 	.word	0x08004118

080014c8 <vTaskPlaceOnEventList>:
{
 80014c8:	b538      	push	{r3, r4, r5, lr}
 80014ca:	460c      	mov	r4, r1
    configASSERT( pxEventList );
 80014cc:	4605      	mov	r5, r0
 80014ce:	b150      	cbz	r0, 80014e6 <vTaskPlaceOnEventList+0x1e>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <vTaskPlaceOnEventList+0x3c>)
 80014d2:	6819      	ldr	r1, [r3, #0]
 80014d4:	3118      	adds	r1, #24
 80014d6:	4628      	mov	r0, r5
 80014d8:	f000 fc58 	bl	8001d8c <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80014dc:	2101      	movs	r1, #1
 80014de:	4620      	mov	r0, r4
 80014e0:	f7ff fc2c 	bl	8000d3c <prvAddCurrentTaskToDelayedList>
}
 80014e4:	bd38      	pop	{r3, r4, r5, pc}
 80014e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014ea:	f383 8811 	msr	BASEPRI, r3
 80014ee:	f3bf 8f6f 	isb	sy
 80014f2:	f3bf 8f4f 	dsb	sy
    configASSERT( pxEventList );
 80014f6:	f640 410e 	movw	r1, #3086	@ 0xc0e
 80014fa:	4803      	ldr	r0, [pc, #12]	@ (8001508 <vTaskPlaceOnEventList+0x40>)
 80014fc:	f7ff f99e 	bl	800083c <assert_failed>
 8001500:	e7e6      	b.n	80014d0 <vTaskPlaceOnEventList+0x8>
 8001502:	bf00      	nop
 8001504:	20000570 	.word	0x20000570
 8001508:	08004118 	.word	0x08004118

0800150c <vTaskPlaceOnEventListRestricted>:
    {
 800150c:	b570      	push	{r4, r5, r6, lr}
 800150e:	460e      	mov	r6, r1
 8001510:	4614      	mov	r4, r2
        configASSERT( pxEventList );
 8001512:	4605      	mov	r5, r0
 8001514:	b1c8      	cbz	r0, 800154a <vTaskPlaceOnEventListRestricted+0x3e>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001516:	686a      	ldr	r2, [r5, #4]
 8001518:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <vTaskPlaceOnEventListRestricted+0x5c>)
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	61ca      	str	r2, [r1, #28]
 800151e:	6819      	ldr	r1, [r3, #0]
 8001520:	6890      	ldr	r0, [r2, #8]
 8001522:	6208      	str	r0, [r1, #32]
 8001524:	6819      	ldr	r1, [r3, #0]
 8001526:	3118      	adds	r1, #24
 8001528:	6041      	str	r1, [r0, #4]
 800152a:	6819      	ldr	r1, [r3, #0]
 800152c:	3118      	adds	r1, #24
 800152e:	6091      	str	r1, [r2, #8]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	629d      	str	r5, [r3, #40]	@ 0x28
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	602b      	str	r3, [r5, #0]
        if( xWaitIndefinitely != pdFALSE )
 800153a:	b10c      	cbz	r4, 8001540 <vTaskPlaceOnEventListRestricted+0x34>
            xTicksToWait = portMAX_DELAY;
 800153c:	f04f 36ff 	mov.w	r6, #4294967295
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001540:	4621      	mov	r1, r4
 8001542:	4630      	mov	r0, r6
 8001544:	f7ff fbfa 	bl	8000d3c <prvAddCurrentTaskToDelayedList>
    }
 8001548:	bd70      	pop	{r4, r5, r6, pc}
 800154a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800154e:	f383 8811 	msr	BASEPRI, r3
 8001552:	f3bf 8f6f 	isb	sy
 8001556:	f3bf 8f4f 	dsb	sy
        configASSERT( pxEventList );
 800155a:	f640 4144 	movw	r1, #3140	@ 0xc44
 800155e:	4803      	ldr	r0, [pc, #12]	@ (800156c <vTaskPlaceOnEventListRestricted+0x60>)
 8001560:	f7ff f96c 	bl	800083c <assert_failed>
 8001564:	e7d7      	b.n	8001516 <vTaskPlaceOnEventListRestricted+0xa>
 8001566:	bf00      	nop
 8001568:	20000570 	.word	0x20000570
 800156c:	08004118 	.word	0x08004118

08001570 <xTaskRemoveFromEventList>:
{
 8001570:	b538      	push	{r3, r4, r5, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001572:	68c3      	ldr	r3, [r0, #12]
 8001574:	68dc      	ldr	r4, [r3, #12]
    configASSERT( pxUnblockedTCB );
 8001576:	2c00      	cmp	r4, #0
 8001578:	d048      	beq.n	800160c <xTaskRemoveFromEventList+0x9c>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800157a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800157c:	69e1      	ldr	r1, [r4, #28]
 800157e:	6a22      	ldr	r2, [r4, #32]
 8001580:	608a      	str	r2, [r1, #8]
 8001582:	69e1      	ldr	r1, [r4, #28]
 8001584:	6051      	str	r1, [r2, #4]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	f104 0118 	add.w	r1, r4, #24
 800158c:	428a      	cmp	r2, r1
 800158e:	d04b      	beq.n	8001628 <xTaskRemoveFromEventList+0xb8>
 8001590:	2200      	movs	r2, #0
 8001592:	62a2      	str	r2, [r4, #40]	@ 0x28
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	3a01      	subs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800159a:	4b2d      	ldr	r3, [pc, #180]	@ (8001650 <xTaskRemoveFromEventList+0xe0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d148      	bne.n	8001634 <xTaskRemoveFromEventList+0xc4>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80015a2:	6963      	ldr	r3, [r4, #20]
 80015a4:	68a1      	ldr	r1, [r4, #8]
 80015a6:	68e2      	ldr	r2, [r4, #12]
 80015a8:	608a      	str	r2, [r1, #8]
 80015aa:	68a1      	ldr	r1, [r4, #8]
 80015ac:	6051      	str	r1, [r2, #4]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	1d21      	adds	r1, r4, #4
 80015b2:	428a      	cmp	r2, r1
 80015b4:	d03b      	beq.n	800162e <xTaskRemoveFromEventList+0xbe>
 80015b6:	2200      	movs	r2, #0
 80015b8:	6162      	str	r2, [r4, #20]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	3a01      	subs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80015c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80015c2:	2201      	movs	r2, #1
 80015c4:	409a      	lsls	r2, r3
 80015c6:	4823      	ldr	r0, [pc, #140]	@ (8001654 <xTaskRemoveFromEventList+0xe4>)
 80015c8:	6805      	ldr	r5, [r0, #0]
 80015ca:	432a      	orrs	r2, r5
 80015cc:	6002      	str	r2, [r0, #0]
 80015ce:	4a22      	ldr	r2, [pc, #136]	@ (8001658 <xTaskRemoveFromEventList+0xe8>)
 80015d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	60a3      	str	r3, [r4, #8]
 80015dc:	6898      	ldr	r0, [r3, #8]
 80015de:	60e0      	str	r0, [r4, #12]
 80015e0:	6041      	str	r1, [r0, #4]
 80015e2:	6099      	str	r1, [r3, #8]
 80015e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80015e6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80015ea:	0088      	lsls	r0, r1, #2
 80015ec:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80015f0:	6161      	str	r1, [r4, #20]
 80015f2:	5811      	ldr	r1, [r2, r0]
 80015f4:	3101      	adds	r1, #1
 80015f6:	5011      	str	r1, [r2, r0]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80015f8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80015fa:	4b18      	ldr	r3, [pc, #96]	@ (800165c <xTaskRemoveFromEventList+0xec>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001600:	429a      	cmp	r2, r3
 8001602:	d923      	bls.n	800164c <xTaskRemoveFromEventList+0xdc>
        xYieldPending = pdTRUE;
 8001604:	2001      	movs	r0, #1
 8001606:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <xTaskRemoveFromEventList+0xf0>)
 8001608:	6018      	str	r0, [r3, #0]
}
 800160a:	bd38      	pop	{r3, r4, r5, pc}
 800160c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001610:	f383 8811 	msr	BASEPRI, r3
 8001614:	f3bf 8f6f 	isb	sy
 8001618:	f3bf 8f4f 	dsb	sy
    configASSERT( pxUnblockedTCB );
 800161c:	f640 4174 	movw	r1, #3188	@ 0xc74
 8001620:	4810      	ldr	r0, [pc, #64]	@ (8001664 <xTaskRemoveFromEventList+0xf4>)
 8001622:	f7ff f90b 	bl	800083c <assert_failed>
 8001626:	e7a8      	b.n	800157a <xTaskRemoveFromEventList+0xa>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001628:	6a22      	ldr	r2, [r4, #32]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	e7b0      	b.n	8001590 <xTaskRemoveFromEventList+0x20>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800162e:	68e2      	ldr	r2, [r4, #12]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	e7c0      	b.n	80015b6 <xTaskRemoveFromEventList+0x46>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <xTaskRemoveFromEventList+0xf8>)
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	61e2      	str	r2, [r4, #28]
 800163a:	6890      	ldr	r0, [r2, #8]
 800163c:	6220      	str	r0, [r4, #32]
 800163e:	6041      	str	r1, [r0, #4]
 8001640:	6091      	str	r1, [r2, #8]
 8001642:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	3201      	adds	r2, #1
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	e7d5      	b.n	80015f8 <xTaskRemoveFromEventList+0x88>
        xReturn = pdFALSE;
 800164c:	2000      	movs	r0, #0
    return xReturn;
 800164e:	e7dc      	b.n	800160a <xTaskRemoveFromEventList+0x9a>
 8001650:	20000394 	.word	0x20000394
 8001654:	200003b4 	.word	0x200003b4
 8001658:	20000430 	.word	0x20000430
 800165c:	20000570 	.word	0x20000570
 8001660:	200003a8 	.word	0x200003a8
 8001664:	08004118 	.word	0x08004118
 8001668:	200003ec 	.word	0x200003ec

0800166c <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800166c:	4b03      	ldr	r3, [pc, #12]	@ (800167c <vTaskInternalSetTimeOutState+0x10>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001672:	4b03      	ldr	r3, [pc, #12]	@ (8001680 <vTaskInternalSetTimeOutState+0x14>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6043      	str	r3, [r0, #4]
}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200003a4 	.word	0x200003a4
 8001680:	200003b8 	.word	0x200003b8

08001684 <xTaskCheckForTimeOut>:
{
 8001684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001686:	460c      	mov	r4, r1
    configASSERT( pxTimeOut );
 8001688:	4605      	mov	r5, r0
 800168a:	b1a8      	cbz	r0, 80016b8 <xTaskCheckForTimeOut+0x34>
    configASSERT( pxTicksToWait );
 800168c:	b314      	cbz	r4, 80016d4 <xTaskCheckForTimeOut+0x50>
    taskENTER_CRITICAL();
 800168e:	f001 fc69 	bl	8002f64 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 8001692:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <xTaskCheckForTimeOut+0x94>)
 8001694:	6819      	ldr	r1, [r3, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001696:	686b      	ldr	r3, [r5, #4]
 8001698:	1ac8      	subs	r0, r1, r3
            if( *pxTicksToWait == portMAX_DELAY )
 800169a:	6822      	ldr	r2, [r4, #0]
 800169c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80016a0:	d034      	beq.n	800170c <xTaskCheckForTimeOut+0x88>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80016a2:	4e1e      	ldr	r6, [pc, #120]	@ (800171c <xTaskCheckForTimeOut+0x98>)
 80016a4:	6836      	ldr	r6, [r6, #0]
 80016a6:	682f      	ldr	r7, [r5, #0]
 80016a8:	42b7      	cmp	r7, r6
 80016aa:	d021      	beq.n	80016f0 <xTaskCheckForTimeOut+0x6c>
 80016ac:	428b      	cmp	r3, r1
 80016ae:	d81f      	bhi.n	80016f0 <xTaskCheckForTimeOut+0x6c>
            *pxTicksToWait = ( TickType_t ) 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
 80016b4:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 80016b6:	e02a      	b.n	800170e <xTaskCheckForTimeOut+0x8a>
 80016b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016bc:	f383 8811 	msr	BASEPRI, r3
 80016c0:	f3bf 8f6f 	isb	sy
 80016c4:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTimeOut );
 80016c8:	f640 41ef 	movw	r1, #3311	@ 0xcef
 80016cc:	4814      	ldr	r0, [pc, #80]	@ (8001720 <xTaskCheckForTimeOut+0x9c>)
 80016ce:	f7ff f8b5 	bl	800083c <assert_failed>
 80016d2:	e7db      	b.n	800168c <xTaskCheckForTimeOut+0x8>
 80016d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016d8:	f383 8811 	msr	BASEPRI, r3
 80016dc:	f3bf 8f6f 	isb	sy
 80016e0:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTicksToWait );
 80016e4:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 80016e8:	480d      	ldr	r0, [pc, #52]	@ (8001720 <xTaskCheckForTimeOut+0x9c>)
 80016ea:	f7ff f8a7 	bl	800083c <assert_failed>
 80016ee:	e7ce      	b.n	800168e <xTaskCheckForTimeOut+0xa>
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80016f0:	4282      	cmp	r2, r0
 80016f2:	d803      	bhi.n	80016fc <xTaskCheckForTimeOut+0x78>
            *pxTicksToWait = ( TickType_t ) 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
 80016f8:	2401      	movs	r4, #1
 80016fa:	e008      	b.n	800170e <xTaskCheckForTimeOut+0x8a>
            *pxTicksToWait -= xElapsedTime;
 80016fc:	1a5b      	subs	r3, r3, r1
 80016fe:	4413      	add	r3, r2
 8001700:	6023      	str	r3, [r4, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001702:	4628      	mov	r0, r5
 8001704:	f7ff ffb2 	bl	800166c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001708:	2400      	movs	r4, #0
 800170a:	e000      	b.n	800170e <xTaskCheckForTimeOut+0x8a>
                xReturn = pdFALSE;
 800170c:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 800170e:	f001 fc53 	bl	8002fb8 <vPortExitCritical>
}
 8001712:	4620      	mov	r0, r4
 8001714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001716:	bf00      	nop
 8001718:	200003b8 	.word	0x200003b8
 800171c:	200003a4 	.word	0x200003a4
 8001720:	08004118 	.word	0x08004118

08001724 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 8001724:	4b01      	ldr	r3, [pc, #4]	@ (800172c <vTaskMissedYield+0x8>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]
}
 800172a:	4770      	bx	lr
 800172c:	200003a8 	.word	0x200003a8

08001730 <xTaskGetCurrentTaskHandle>:
        xReturn = pxCurrentTCB;
 8001730:	4b01      	ldr	r3, [pc, #4]	@ (8001738 <xTaskGetCurrentTaskHandle+0x8>)
 8001732:	6818      	ldr	r0, [r3, #0]
    }
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000570 	.word	0x20000570

0800173c <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 800173c:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <xTaskGetSchedulerState+0x18>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	b133      	cbz	r3, 8001750 <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001742:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <xTaskGetSchedulerState+0x1c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b10b      	cbz	r3, 800174c <xTaskGetSchedulerState+0x10>
                xReturn = taskSCHEDULER_SUSPENDED;
 8001748:	2000      	movs	r0, #0
    }
 800174a:	4770      	bx	lr
                xReturn = taskSCHEDULER_RUNNING;
 800174c:	2002      	movs	r0, #2
 800174e:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001750:	2001      	movs	r0, #1
 8001752:	4770      	bx	lr
 8001754:	200003b0 	.word	0x200003b0
 8001758:	20000394 	.word	0x20000394

0800175c <prvGetNextExpireTime>:
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <prvGetNextExpireTime+0x1c>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	6813      	ldr	r3, [r2, #0]
 8001762:	b92b      	cbnz	r3, 8001770 <prvGetNextExpireTime+0x14>
 8001764:	2301      	movs	r3, #1
 8001766:	6003      	str	r3, [r0, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001768:	b923      	cbnz	r3, 8001774 <prvGetNextExpireTime+0x18>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800176a:	68d3      	ldr	r3, [r2, #12]
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	4770      	bx	lr
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001770:	2300      	movs	r3, #0
 8001772:	e7f8      	b.n	8001766 <prvGetNextExpireTime+0xa>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001774:	2000      	movs	r0, #0
        }

        return xNextExpireTime;
    }
 8001776:	4770      	bx	lr
 8001778:	20000644 	.word	0x20000644

0800177c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800177c:	b508      	push	{r3, lr}
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800177e:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001780:	6100      	str	r0, [r0, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001782:	4291      	cmp	r1, r2
 8001784:	d80c      	bhi.n	80017a0 <prvInsertTimerInActiveList+0x24>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001786:	1ad2      	subs	r2, r2, r3
 8001788:	6983      	ldr	r3, [r0, #24]
 800178a:	429a      	cmp	r2, r3
 800178c:	d301      	bcc.n	8001792 <prvInsertTimerInActiveList+0x16>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800178e:	2001      	movs	r0, #1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
 8001790:	bd08      	pop	{r3, pc}
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001792:	1d01      	adds	r1, r0, #4
 8001794:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <prvInsertTimerInActiveList+0x40>)
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	f000 faf8 	bl	8001d8c <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 800179c:	2000      	movs	r0, #0
 800179e:	e7f7      	b.n	8001790 <prvInsertTimerInActiveList+0x14>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d201      	bcs.n	80017a8 <prvInsertTimerInActiveList+0x2c>
 80017a4:	4299      	cmp	r1, r3
 80017a6:	d206      	bcs.n	80017b6 <prvInsertTimerInActiveList+0x3a>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80017a8:	1d01      	adds	r1, r0, #4
 80017aa:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <prvInsertTimerInActiveList+0x44>)
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	f000 faed 	bl	8001d8c <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 80017b2:	2000      	movs	r0, #0
 80017b4:	e7ec      	b.n	8001790 <prvInsertTimerInActiveList+0x14>
                xProcessTimerNow = pdTRUE;
 80017b6:	2001      	movs	r0, #1
        return xProcessTimerNow;
 80017b8:	e7ea      	b.n	8001790 <prvInsertTimerInActiveList+0x14>
 80017ba:	bf00      	nop
 80017bc:	20000640 	.word	0x20000640
 80017c0:	20000644 	.word	0x20000644

080017c4 <prvReloadTimer>:
    {
 80017c4:	b570      	push	{r4, r5, r6, lr}
 80017c6:	4604      	mov	r4, r0
 80017c8:	460d      	mov	r5, r1
 80017ca:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80017cc:	e004      	b.n	80017d8 <prvReloadTimer+0x14>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80017ce:	69a3      	ldr	r3, [r4, #24]
 80017d0:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80017d2:	6a23      	ldr	r3, [r4, #32]
 80017d4:	4620      	mov	r0, r4
 80017d6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80017d8:	69a1      	ldr	r1, [r4, #24]
 80017da:	462b      	mov	r3, r5
 80017dc:	4632      	mov	r2, r6
 80017de:	4429      	add	r1, r5
 80017e0:	4620      	mov	r0, r4
 80017e2:	f7ff ffcb 	bl	800177c <prvInsertTimerInActiveList>
 80017e6:	2800      	cmp	r0, #0
 80017e8:	d1f1      	bne.n	80017ce <prvReloadTimer+0xa>
    }
 80017ea:	bd70      	pop	{r4, r5, r6, pc}

080017ec <prvProcessExpiredTimer>:
    {
 80017ec:	b570      	push	{r4, r5, r6, lr}
 80017ee:	4605      	mov	r5, r0
 80017f0:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <prvProcessExpiredTimer+0x3c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80017fa:	1d20      	adds	r0, r4, #4
 80017fc:	f000 fadf 	bl	8001dbe <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001800:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001804:	f013 0f04 	tst.w	r3, #4
 8001808:	d107      	bne.n	800181a <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800180a:	f023 0301 	bic.w	r3, r3, #1
 800180e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001812:	6a23      	ldr	r3, [r4, #32]
 8001814:	4620      	mov	r0, r4
 8001816:	4798      	blx	r3
    }
 8001818:	bd70      	pop	{r4, r5, r6, pc}
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800181a:	4632      	mov	r2, r6
 800181c:	4629      	mov	r1, r5
 800181e:	4620      	mov	r0, r4
 8001820:	f7ff ffd0 	bl	80017c4 <prvReloadTimer>
 8001824:	e7f5      	b.n	8001812 <prvProcessExpiredTimer+0x26>
 8001826:	bf00      	nop
 8001828:	20000644 	.word	0x20000644

0800182c <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800182c:	b508      	push	{r3, lr}

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800182e:	e005      	b.n	800183c <prvSwitchTimerLists+0x10>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001830:	68db      	ldr	r3, [r3, #12]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001832:	f04f 31ff 	mov.w	r1, #4294967295
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	f7ff ffd8 	bl	80017ec <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800183c:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <prvSwitchTimerLists+0x28>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	2a00      	cmp	r2, #0
 8001844:	d1f4      	bne.n	8001830 <prvSwitchTimerLists+0x4>
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
 8001846:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <prvSwitchTimerLists+0x2c>)
 8001848:	6810      	ldr	r0, [r2, #0]
 800184a:	4902      	ldr	r1, [pc, #8]	@ (8001854 <prvSwitchTimerLists+0x28>)
 800184c:	6008      	str	r0, [r1, #0]
        pxOverflowTimerList = pxTemp;
 800184e:	6013      	str	r3, [r2, #0]
    }
 8001850:	bd08      	pop	{r3, pc}
 8001852:	bf00      	nop
 8001854:	20000644 	.word	0x20000644
 8001858:	20000640 	.word	0x20000640

0800185c <prvSampleTimeNow>:
    {
 800185c:	b538      	push	{r3, r4, r5, lr}
 800185e:	4605      	mov	r5, r0
        xTimeNow = xTaskGetTickCount();
 8001860:	f7ff fbbc 	bl	8000fdc <xTaskGetTickCount>
 8001864:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
 8001866:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <prvSampleTimeNow+0x28>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4283      	cmp	r3, r0
 800186c:	d805      	bhi.n	800187a <prvSampleTimeNow+0x1e>
            *pxTimerListsWereSwitched = pdFALSE;
 800186e:	2300      	movs	r3, #0
 8001870:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
 8001872:	4b04      	ldr	r3, [pc, #16]	@ (8001884 <prvSampleTimeNow+0x28>)
 8001874:	601c      	str	r4, [r3, #0]
    }
 8001876:	4620      	mov	r0, r4
 8001878:	bd38      	pop	{r3, r4, r5, pc}
            prvSwitchTimerLists();
 800187a:	f7ff ffd7 	bl	800182c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800187e:	2301      	movs	r3, #1
 8001880:	602b      	str	r3, [r5, #0]
 8001882:	e7f6      	b.n	8001872 <prvSampleTimeNow+0x16>
 8001884:	20000634 	.word	0x20000634

08001888 <prvProcessTimerOrBlockTask>:
    {
 8001888:	b570      	push	{r4, r5, r6, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	4606      	mov	r6, r0
 800188e:	460c      	mov	r4, r1
        vTaskSuspendAll();
 8001890:	f7ff fb9c 	bl	8000fcc <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001894:	a801      	add	r0, sp, #4
 8001896:	f7ff ffe1 	bl	800185c <prvSampleTimeNow>
            if( xTimerListsWereSwitched == pdFALSE )
 800189a:	9b01      	ldr	r3, [sp, #4]
 800189c:	bb33      	cbnz	r3, 80018ec <prvProcessTimerOrBlockTask+0x64>
 800189e:	4605      	mov	r5, r0
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80018a0:	b9e4      	cbnz	r4, 80018dc <prvProcessTimerOrBlockTask+0x54>
 80018a2:	42b0      	cmp	r0, r6
 80018a4:	d213      	bcs.n	80018ce <prvProcessTimerOrBlockTask+0x46>
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80018a6:	4622      	mov	r2, r4
 80018a8:	1b71      	subs	r1, r6, r5
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <prvProcessTimerOrBlockTask+0x6c>)
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	f000 fc6d 	bl	800218c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80018b2:	f7ff fc6d 	bl	8001190 <xTaskResumeAll>
 80018b6:	b9d8      	cbnz	r0, 80018f0 <prvProcessTimerOrBlockTask+0x68>
                        portYIELD_WITHIN_API();
 80018b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80018bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80018c4:	f3bf 8f4f 	dsb	sy
 80018c8:	f3bf 8f6f 	isb	sy
 80018cc:	e010      	b.n	80018f0 <prvProcessTimerOrBlockTask+0x68>
                    ( void ) xTaskResumeAll();
 80018ce:	f7ff fc5f 	bl	8001190 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80018d2:	4629      	mov	r1, r5
 80018d4:	4630      	mov	r0, r6
 80018d6:	f7ff ff89 	bl	80017ec <prvProcessExpiredTimer>
 80018da:	e009      	b.n	80018f0 <prvProcessTimerOrBlockTask+0x68>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80018dc:	4a06      	ldr	r2, [pc, #24]	@ (80018f8 <prvProcessTimerOrBlockTask+0x70>)
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	b90a      	cbnz	r2, 80018e8 <prvProcessTimerOrBlockTask+0x60>
 80018e4:	2401      	movs	r4, #1
 80018e6:	e7de      	b.n	80018a6 <prvProcessTimerOrBlockTask+0x1e>
 80018e8:	461c      	mov	r4, r3
 80018ea:	e7dc      	b.n	80018a6 <prvProcessTimerOrBlockTask+0x1e>
                ( void ) xTaskResumeAll();
 80018ec:	f7ff fc50 	bl	8001190 <xTaskResumeAll>
    }
 80018f0:	b002      	add	sp, #8
 80018f2:	bd70      	pop	{r4, r5, r6, pc}
 80018f4:	2000063c 	.word	0x2000063c
 80018f8:	20000640 	.word	0x20000640

080018fc <prvProcessReceivedCommands>:
    {
 80018fc:	b530      	push	{r4, r5, lr}
 80018fe:	b085      	sub	sp, #20
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001900:	2200      	movs	r2, #0
 8001902:	a901      	add	r1, sp, #4
 8001904:	4b3b      	ldr	r3, [pc, #236]	@ (80019f4 <prvProcessReceivedCommands+0xf8>)
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	f000 fb82 	bl	8002010 <xQueueReceive>
 800190c:	2800      	cmp	r0, #0
 800190e:	d06f      	beq.n	80019f0 <prvProcessReceivedCommands+0xf4>
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001910:	9b01      	ldr	r3, [sp, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	dbf4      	blt.n	8001900 <prvProcessReceivedCommands+0x4>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001916:	9c03      	ldr	r4, [sp, #12]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001918:	6963      	ldr	r3, [r4, #20]
 800191a:	b113      	cbz	r3, 8001922 <prvProcessReceivedCommands+0x26>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800191c:	1d20      	adds	r0, r4, #4
 800191e:	f000 fa4e 	bl	8001dbe <uxListRemove>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001922:	4668      	mov	r0, sp
 8001924:	f7ff ff9a 	bl	800185c <prvSampleTimeNow>
 8001928:	4605      	mov	r5, r0
                switch( xMessage.xMessageID )
 800192a:	9b01      	ldr	r3, [sp, #4]
 800192c:	3b01      	subs	r3, #1
 800192e:	2b08      	cmp	r3, #8
 8001930:	d8e6      	bhi.n	8001900 <prvProcessReceivedCommands+0x4>
 8001932:	e8df f003 	tbb	[pc, r3]
 8001936:	0505      	.short	0x0505
 8001938:	054f3029 	.word	0x054f3029
 800193c:	2905      	.short	0x2905
 800193e:	30          	.byte	0x30
 800193f:	00          	.byte	0x00
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001940:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800194c:	9b02      	ldr	r3, [sp, #8]
 800194e:	69a1      	ldr	r1, [r4, #24]
 8001950:	4602      	mov	r2, r0
 8001952:	4419      	add	r1, r3
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff ff11 	bl	800177c <prvInsertTimerInActiveList>
 800195a:	2800      	cmp	r0, #0
 800195c:	d0d0      	beq.n	8001900 <prvProcessReceivedCommands+0x4>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800195e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001962:	f013 0f04 	tst.w	r3, #4
 8001966:	d107      	bne.n	8001978 <prvProcessReceivedCommands+0x7c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001970:	6a23      	ldr	r3, [r4, #32]
 8001972:	4620      	mov	r0, r4
 8001974:	4798      	blx	r3
 8001976:	e7c3      	b.n	8001900 <prvProcessReceivedCommands+0x4>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001978:	69a3      	ldr	r3, [r4, #24]
 800197a:	462a      	mov	r2, r5
 800197c:	9902      	ldr	r1, [sp, #8]
 800197e:	4419      	add	r1, r3
 8001980:	4620      	mov	r0, r4
 8001982:	f7ff ff1f 	bl	80017c4 <prvReloadTimer>
 8001986:	e7f3      	b.n	8001970 <prvProcessReceivedCommands+0x74>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001988:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800198c:	f023 0301 	bic.w	r3, r3, #1
 8001990:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
                        break;
 8001994:	e7b4      	b.n	8001900 <prvProcessReceivedCommands+0x4>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001996:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80019a2:	9b02      	ldr	r3, [sp, #8]
 80019a4:	61a3      	str	r3, [r4, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80019a6:	b13b      	cbz	r3, 80019b8 <prvProcessReceivedCommands+0xbc>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80019a8:	69a1      	ldr	r1, [r4, #24]
 80019aa:	462b      	mov	r3, r5
 80019ac:	462a      	mov	r2, r5
 80019ae:	4429      	add	r1, r5
 80019b0:	4620      	mov	r0, r4
 80019b2:	f7ff fee3 	bl	800177c <prvInsertTimerInActiveList>
                        break;
 80019b6:	e7a3      	b.n	8001900 <prvProcessReceivedCommands+0x4>
 80019b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019bc:	f383 8811 	msr	BASEPRI, r3
 80019c0:	f3bf 8f6f 	isb	sy
 80019c4:	f3bf 8f4f 	dsb	sy
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80019c8:	f240 315e 	movw	r1, #862	@ 0x35e
 80019cc:	480a      	ldr	r0, [pc, #40]	@ (80019f8 <prvProcessReceivedCommands+0xfc>)
 80019ce:	f7fe ff35 	bl	800083c <assert_failed>
 80019d2:	e7e9      	b.n	80019a8 <prvProcessReceivedCommands+0xac>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80019d4:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80019d8:	f013 0f02 	tst.w	r3, #2
 80019dc:	d004      	beq.n	80019e8 <prvProcessReceivedCommands+0xec>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80019de:	f023 0301 	bic.w	r3, r3, #1
 80019e2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80019e6:	e78b      	b.n	8001900 <prvProcessReceivedCommands+0x4>
                                vPortFree( pxTimer );
 80019e8:	4620      	mov	r0, r4
 80019ea:	f000 f96d 	bl	8001cc8 <vPortFree>
 80019ee:	e787      	b.n	8001900 <prvProcessReceivedCommands+0x4>
    }
 80019f0:	b005      	add	sp, #20
 80019f2:	bd30      	pop	{r4, r5, pc}
 80019f4:	2000063c 	.word	0x2000063c
 80019f8:	0800416c 	.word	0x0800416c

080019fc <prvTimerTask>:
    {
 80019fc:	b500      	push	{lr}
 80019fe:	b083      	sub	sp, #12
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001a00:	a801      	add	r0, sp, #4
 8001a02:	f7ff feab 	bl	800175c <prvGetNextExpireTime>
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001a06:	9901      	ldr	r1, [sp, #4]
 8001a08:	f7ff ff3e 	bl	8001888 <prvProcessTimerOrBlockTask>
            prvProcessReceivedCommands();
 8001a0c:	f7ff ff76 	bl	80018fc <prvProcessReceivedCommands>
        for( ; ; )
 8001a10:	e7f6      	b.n	8001a00 <prvTimerTask+0x4>
	...

08001a14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001a14:	b530      	push	{r4, r5, lr}
 8001a16:	b083      	sub	sp, #12
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001a18:	f001 faa4 	bl	8002f64 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <prvCheckForValidListAndQueue+0x44>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	b11b      	cbz	r3, 8001a2a <prvCheckForValidListAndQueue+0x16>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001a22:	f001 fac9 	bl	8002fb8 <vPortExitCritical>
    }
 8001a26:	b003      	add	sp, #12
 8001a28:	bd30      	pop	{r4, r5, pc}
                vListInitialise( &xActiveTimerList1 );
 8001a2a:	4d0c      	ldr	r5, [pc, #48]	@ (8001a5c <prvCheckForValidListAndQueue+0x48>)
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	f000 f99f 	bl	8001d70 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001a32:	4c0b      	ldr	r4, [pc, #44]	@ (8001a60 <prvCheckForValidListAndQueue+0x4c>)
 8001a34:	4620      	mov	r0, r4
 8001a36:	f000 f99b 	bl	8001d70 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <prvCheckForValidListAndQueue+0x50>)
 8001a3c:	601d      	str	r5, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <prvCheckForValidListAndQueue+0x54>)
 8001a40:	601c      	str	r4, [r3, #0]
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8001a42:	2300      	movs	r3, #0
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <prvCheckForValidListAndQueue+0x58>)
 8001a48:	4a09      	ldr	r2, [pc, #36]	@ (8001a70 <prvCheckForValidListAndQueue+0x5c>)
 8001a4a:	210c      	movs	r1, #12
 8001a4c:	200a      	movs	r0, #10
 8001a4e:	f000 fa91 	bl	8001f74 <xQueueGenericCreateStatic>
 8001a52:	4b01      	ldr	r3, [pc, #4]	@ (8001a58 <prvCheckForValidListAndQueue+0x44>)
 8001a54:	6018      	str	r0, [r3, #0]
 8001a56:	e7e4      	b.n	8001a22 <prvCheckForValidListAndQueue+0xe>
 8001a58:	2000063c 	.word	0x2000063c
 8001a5c:	2000065c 	.word	0x2000065c
 8001a60:	20000648 	.word	0x20000648
 8001a64:	20000644 	.word	0x20000644
 8001a68:	20000640 	.word	0x20000640
 8001a6c:	20000574 	.word	0x20000574
 8001a70:	200005bc 	.word	0x200005bc

08001a74 <xTimerCreateTimerTask>:
    {
 8001a74:	b510      	push	{r4, lr}
 8001a76:	b088      	sub	sp, #32
        prvCheckForValidListAndQueue();
 8001a78:	f7ff ffcc 	bl	8001a14 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 8001a7c:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <xTimerCreateTimerTask+0x60>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	b1c3      	cbz	r3, 8001ab4 <xTimerCreateTimerTask+0x40>
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8001a82:	2400      	movs	r4, #0
 8001a84:	9405      	str	r4, [sp, #20]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8001a86:	9406      	str	r4, [sp, #24]
                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8001a88:	aa07      	add	r2, sp, #28
 8001a8a:	a906      	add	r1, sp, #24
 8001a8c:	a805      	add	r0, sp, #20
 8001a8e:	f7fe fcc7 	bl	8000420 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8001a92:	9b05      	ldr	r3, [sp, #20]
 8001a94:	9302      	str	r3, [sp, #8]
 8001a96:	9b06      	ldr	r3, [sp, #24]
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	230f      	movs	r3, #15
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	4623      	mov	r3, r4
 8001aa0:	9a07      	ldr	r2, [sp, #28]
 8001aa2:	490d      	ldr	r1, [pc, #52]	@ (8001ad8 <xTimerCreateTimerTask+0x64>)
 8001aa4:	480d      	ldr	r0, [pc, #52]	@ (8001adc <xTimerCreateTimerTask+0x68>)
 8001aa6:	f7ff f9a1 	bl	8000dec <xTaskCreateStatic>
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <xTimerCreateTimerTask+0x6c>)
 8001aac:	6018      	str	r0, [r3, #0]
                if( xTimerTaskHandle != NULL )
 8001aae:	b108      	cbz	r0, 8001ab4 <xTimerCreateTimerTask+0x40>
                    xReturn = pdPASS;
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	e00d      	b.n	8001ad0 <xTimerCreateTimerTask+0x5c>
 8001ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ab8:	f383 8811 	msr	BASEPRI, r3
 8001abc:	f3bf 8f6f 	isb	sy
 8001ac0:	f3bf 8f4f 	dsb	sy
        configASSERT( xReturn );
 8001ac4:	f240 1119 	movw	r1, #281	@ 0x119
 8001ac8:	4806      	ldr	r0, [pc, #24]	@ (8001ae4 <xTimerCreateTimerTask+0x70>)
 8001aca:	f7fe feb7 	bl	800083c <assert_failed>
 8001ace:	2000      	movs	r0, #0
    }
 8001ad0:	b008      	add	sp, #32
 8001ad2:	bd10      	pop	{r4, pc}
 8001ad4:	2000063c 	.word	0x2000063c
 8001ad8:	080041b8 	.word	0x080041b8
 8001adc:	080019fd 	.word	0x080019fd
 8001ae0:	20000638 	.word	0x20000638
 8001ae4:	0800416c 	.word	0x0800416c

08001ae8 <prvHeapInit>:
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001ae8:	4a10      	ldr	r2, [pc, #64]	@ (8001b2c <prvHeapInit+0x44>)

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001aea:	f012 0f07 	tst.w	r2, #7
 8001aee:	d01a      	beq.n	8001b26 <prvHeapInit+0x3e>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001af0:	1dd1      	adds	r1, r2, #7
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001af2:	f021 0107 	bic.w	r1, r1, #7
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001af6:	f5c1 6340 	rsb	r3, r1, #3072	@ 0xc00
 8001afa:	4413      	add	r3, r2
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001afc:	460a      	mov	r2, r1

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001afe:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <prvHeapInit+0x48>)
 8001b00:	6002      	str	r2, [r0, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001b02:	2100      	movs	r1, #0
 8001b04:	6041      	str	r1, [r0, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8001b06:	4413      	add	r3, r2
    uxAddress -= xHeapStructSize;
 8001b08:	3b08      	subs	r3, #8
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001b0a:	f023 0307 	bic.w	r3, r3, #7
    pxEnd = ( BlockLink_t * ) uxAddress;
 8001b0e:	4809      	ldr	r0, [pc, #36]	@ (8001b34 <prvHeapInit+0x4c>)
 8001b10:	6003      	str	r3, [r0, #0]
    pxEnd->xBlockSize = 0;
 8001b12:	6059      	str	r1, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001b14:	6019      	str	r1, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001b16:	1a99      	subs	r1, r3, r2
 8001b18:	6051      	str	r1, [r2, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b1a:	6013      	str	r3, [r2, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <prvHeapInit+0x50>)
 8001b1e:	6019      	str	r1, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <prvHeapInit+0x54>)
 8001b22:	6019      	str	r1, [r3, #0]
}
 8001b24:	4770      	bx	lr
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001b26:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b2a:	e7e8      	b.n	8001afe <prvHeapInit+0x16>
 8001b2c:	2000068c 	.word	0x2000068c
 8001b30:	20000684 	.word	0x20000684
 8001b34:	20000680 	.word	0x20000680
 8001b38:	20000678 	.word	0x20000678
 8001b3c:	2000067c 	.word	0x2000067c

08001b40 <prvInsertBlockIntoFreeList>:
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001b40:	4b16      	ldr	r3, [pc, #88]	@ (8001b9c <prvInsertBlockIntoFreeList+0x5c>)
 8001b42:	461a      	mov	r2, r3
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4283      	cmp	r3, r0
 8001b48:	d3fb      	bcc.n	8001b42 <prvInsertBlockIntoFreeList+0x2>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001b4a:	6851      	ldr	r1, [r2, #4]
 8001b4c:	eb02 0c01 	add.w	ip, r2, r1
 8001b50:	4584      	cmp	ip, r0
 8001b52:	d009      	beq.n	8001b68 <prvInsertBlockIntoFreeList+0x28>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001b54:	6841      	ldr	r1, [r0, #4]
 8001b56:	eb00 0c01 	add.w	ip, r0, r1
 8001b5a:	4563      	cmp	r3, ip
 8001b5c:	d009      	beq.n	8001b72 <prvInsertBlockIntoFreeList+0x32>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001b5e:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001b60:	4290      	cmp	r0, r2
 8001b62:	d019      	beq.n	8001b98 <prvInsertBlockIntoFreeList+0x58>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001b64:	6010      	str	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
 8001b66:	4770      	bx	lr
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001b68:	6840      	ldr	r0, [r0, #4]
 8001b6a:	4401      	add	r1, r0
 8001b6c:	6051      	str	r1, [r2, #4]
        pxBlockToInsert = pxIterator;
 8001b6e:	4610      	mov	r0, r2
 8001b70:	e7f0      	b.n	8001b54 <prvInsertBlockIntoFreeList+0x14>
{
 8001b72:	b410      	push	{r4}
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001b74:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba0 <prvInsertBlockIntoFreeList+0x60>)
 8001b76:	6824      	ldr	r4, [r4, #0]
 8001b78:	42a3      	cmp	r3, r4
 8001b7a:	d00b      	beq.n	8001b94 <prvInsertBlockIntoFreeList+0x54>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4419      	add	r1, r3
 8001b80:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001b82:	6813      	ldr	r3, [r2, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6003      	str	r3, [r0, #0]
    if( pxIterator != pxBlockToInsert )
 8001b88:	4290      	cmp	r0, r2
 8001b8a:	d000      	beq.n	8001b8e <prvInsertBlockIntoFreeList+0x4e>
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001b8c:	6010      	str	r0, [r2, #0]
    }
}
 8001b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b92:	4770      	bx	lr
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001b94:	6004      	str	r4, [r0, #0]
 8001b96:	e7f7      	b.n	8001b88 <prvInsertBlockIntoFreeList+0x48>
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000684 	.word	0x20000684
 8001ba0:	20000680 	.word	0x20000680

08001ba4 <pvPortMalloc>:
{
 8001ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba6:	4605      	mov	r5, r0
    vTaskSuspendAll();
 8001ba8:	f7ff fa10 	bl	8000fcc <vTaskSuspendAll>
        if( pxEnd == NULL )
 8001bac:	4b40      	ldr	r3, [pc, #256]	@ (8001cb0 <pvPortMalloc+0x10c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	b16b      	cbz	r3, 8001bce <pvPortMalloc+0x2a>
        if( xWantedSize > 0 )
 8001bb2:	b185      	cbz	r5, 8001bd6 <pvPortMalloc+0x32>
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001bb4:	f005 0307 	and.w	r3, r5, #7
 8001bb8:	f1c3 0210 	rsb	r2, r3, #16
            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001bbc:	3b11      	subs	r3, #17
 8001bbe:	42ab      	cmp	r3, r5
 8001bc0:	d308      	bcc.n	8001bd4 <pvPortMalloc+0x30>
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001bc2:	18ad      	adds	r5, r5, r2
 8001bc4:	d507      	bpl.n	8001bd6 <pvPortMalloc+0x32>
    ( void ) xTaskResumeAll();
 8001bc6:	f7ff fae3 	bl	8001190 <xTaskResumeAll>
    void * pvReturn = NULL;
 8001bca:	2600      	movs	r6, #0
 8001bcc:	e00e      	b.n	8001bec <pvPortMalloc+0x48>
            prvHeapInit();
 8001bce:	f7ff ff8b 	bl	8001ae8 <prvHeapInit>
 8001bd2:	e7ee      	b.n	8001bb2 <pvPortMalloc+0xe>
                xWantedSize = 0;
 8001bd4:	2500      	movs	r5, #0
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001bd6:	b135      	cbz	r5, 8001be6 <pvPortMalloc+0x42>
 8001bd8:	4b36      	ldr	r3, [pc, #216]	@ (8001cb4 <pvPortMalloc+0x110>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	42ab      	cmp	r3, r5
 8001bde:	d30c      	bcc.n	8001bfa <pvPortMalloc+0x56>
                pxBlock = xStart.pxNextFreeBlock;
 8001be0:	4a35      	ldr	r2, [pc, #212]	@ (8001cb8 <pvPortMalloc+0x114>)
 8001be2:	6814      	ldr	r4, [r2, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001be4:	e00f      	b.n	8001c06 <pvPortMalloc+0x62>
    ( void ) xTaskResumeAll();
 8001be6:	f7ff fad3 	bl	8001190 <xTaskResumeAll>
    void * pvReturn = NULL;
 8001bea:	2600      	movs	r6, #0
            vApplicationMallocFailedHook();
 8001bec:	f7fe fc52 	bl	8000494 <vApplicationMallocFailedHook>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001bf0:	f016 0f07 	tst.w	r6, #7
 8001bf4:	d14e      	bne.n	8001c94 <pvPortMalloc+0xf0>
}
 8001bf6:	4630      	mov	r0, r6
 8001bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ( void ) xTaskResumeAll();
 8001bfa:	f7ff fac9 	bl	8001190 <xTaskResumeAll>
    void * pvReturn = NULL;
 8001bfe:	2600      	movs	r6, #0
 8001c00:	e7f4      	b.n	8001bec <pvPortMalloc+0x48>
                    pxPreviousBlock = pxBlock;
 8001c02:	4622      	mov	r2, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001c04:	461c      	mov	r4, r3
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c06:	6863      	ldr	r3, [r4, #4]
 8001c08:	42ab      	cmp	r3, r5
 8001c0a:	d202      	bcs.n	8001c12 <pvPortMalloc+0x6e>
 8001c0c:	6823      	ldr	r3, [r4, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f7      	bne.n	8001c02 <pvPortMalloc+0x5e>
                if( pxBlock != pxEnd )
 8001c12:	4b27      	ldr	r3, [pc, #156]	@ (8001cb0 <pvPortMalloc+0x10c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	42a3      	cmp	r3, r4
 8001c18:	d02b      	beq.n	8001c72 <pvPortMalloc+0xce>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001c1a:	6816      	ldr	r6, [r2, #0]
 8001c1c:	3608      	adds	r6, #8
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	6013      	str	r3, [r2, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001c22:	6863      	ldr	r3, [r4, #4]
 8001c24:	1b5b      	subs	r3, r3, r5
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	d90a      	bls.n	8001c40 <pvPortMalloc+0x9c>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c2a:	1967      	adds	r7, r4, r5
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c2c:	f017 0f07 	tst.w	r7, #7
 8001c30:	d123      	bne.n	8001c7a <pvPortMalloc+0xd6>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001c32:	6863      	ldr	r3, [r4, #4]
 8001c34:	1b5b      	subs	r3, r3, r5
 8001c36:	607b      	str	r3, [r7, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001c38:	6065      	str	r5, [r4, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001c3a:	4638      	mov	r0, r7
 8001c3c:	f7ff ff80 	bl	8001b40 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c40:	6862      	ldr	r2, [r4, #4]
 8001c42:	491c      	ldr	r1, [pc, #112]	@ (8001cb4 <pvPortMalloc+0x110>)
 8001c44:	680b      	ldr	r3, [r1, #0]
 8001c46:	1a9b      	subs	r3, r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c4a:	491c      	ldr	r1, [pc, #112]	@ (8001cbc <pvPortMalloc+0x118>)
 8001c4c:	6809      	ldr	r1, [r1, #0]
 8001c4e:	428b      	cmp	r3, r1
 8001c50:	d201      	bcs.n	8001c56 <pvPortMalloc+0xb2>
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001c52:	491a      	ldr	r1, [pc, #104]	@ (8001cbc <pvPortMalloc+0x118>)
 8001c54:	600b      	str	r3, [r1, #0]
                    heapALLOCATE_BLOCK( pxBlock );
 8001c56:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001c5a:	6062      	str	r2, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
 8001c60:	4a17      	ldr	r2, [pc, #92]	@ (8001cc0 <pvPortMalloc+0x11c>)
 8001c62:	6813      	ldr	r3, [r2, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
 8001c68:	f7ff fa92 	bl	8001190 <xTaskResumeAll>
        if( pvReturn == NULL )
 8001c6c:	2e00      	cmp	r6, #0
 8001c6e:	d1bf      	bne.n	8001bf0 <pvPortMalloc+0x4c>
 8001c70:	e7bc      	b.n	8001bec <pvPortMalloc+0x48>
    ( void ) xTaskResumeAll();
 8001c72:	f7ff fa8d 	bl	8001190 <xTaskResumeAll>
    void * pvReturn = NULL;
 8001c76:	2600      	movs	r6, #0
 8001c78:	e7b8      	b.n	8001bec <pvPortMalloc+0x48>
 8001c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c7e:	f383 8811 	msr	BASEPRI, r3
 8001c82:	f3bf 8f6f 	isb	sy
 8001c86:	f3bf 8f4f 	dsb	sy
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c8a:	21dc      	movs	r1, #220	@ 0xdc
 8001c8c:	480d      	ldr	r0, [pc, #52]	@ (8001cc4 <pvPortMalloc+0x120>)
 8001c8e:	f7fe fdd5 	bl	800083c <assert_failed>
 8001c92:	e7ce      	b.n	8001c32 <pvPortMalloc+0x8e>
 8001c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c98:	f383 8811 	msr	BASEPRI, r3
 8001c9c:	f3bf 8f6f 	isb	sy
 8001ca0:	f3bf 8f4f 	dsb	sy
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ca4:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8001ca8:	4806      	ldr	r0, [pc, #24]	@ (8001cc4 <pvPortMalloc+0x120>)
 8001caa:	f7fe fdc7 	bl	800083c <assert_failed>
    return pvReturn;
 8001cae:	e7a2      	b.n	8001bf6 <pvPortMalloc+0x52>
 8001cb0:	20000680 	.word	0x20000680
 8001cb4:	2000067c 	.word	0x2000067c
 8001cb8:	20000684 	.word	0x20000684
 8001cbc:	20000678 	.word	0x20000678
 8001cc0:	20000674 	.word	0x20000674
 8001cc4:	080041c0 	.word	0x080041c0

08001cc8 <vPortFree>:
    if( pv != NULL )
 8001cc8:	2800      	cmp	r0, #0
 8001cca:	d049      	beq.n	8001d60 <vPortFree+0x98>
{
 8001ccc:	b538      	push	{r3, r4, r5, lr}
 8001cce:	4604      	mov	r4, r0
        puc -= xHeapStructSize;
 8001cd0:	f1a0 0508 	sub.w	r5, r0, #8
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001cd4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	da14      	bge.n	8001d06 <vPortFree+0x3e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001cdc:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8001ce0:	b163      	cbz	r3, 8001cfc <vPortFree+0x34>
 8001ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ce6:	f383 8811 	msr	BASEPRI, r3
 8001cea:	f3bf 8f6f 	isb	sy
 8001cee:	f3bf 8f4f 	dsb	sy
 8001cf2:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8001cf6:	481b      	ldr	r0, [pc, #108]	@ (8001d64 <vPortFree+0x9c>)
 8001cf8:	f7fe fda0 	bl	800083c <assert_failed>
        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001cfc:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	db0e      	blt.n	8001d22 <vPortFree+0x5a>
}
 8001d04:	bd38      	pop	{r3, r4, r5, pc}
 8001d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d0a:	f383 8811 	msr	BASEPRI, r3
 8001d0e:	f3bf 8f6f 	isb	sy
 8001d12:	f3bf 8f4f 	dsb	sy
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001d16:	f240 112f 	movw	r1, #303	@ 0x12f
 8001d1a:	4812      	ldr	r0, [pc, #72]	@ (8001d64 <vPortFree+0x9c>)
 8001d1c:	f7fe fd8e 	bl	800083c <assert_failed>
 8001d20:	e7dc      	b.n	8001cdc <vPortFree+0x14>
            if( pxLink->pxNextFreeBlock == NULL )
 8001d22:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ec      	bne.n	8001d04 <vPortFree+0x3c>
                heapFREE_BLOCK( pxLink );
 8001d2a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d2e:	f844 2c04 	str.w	r2, [r4, #-4]
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
 8001d32:	3a08      	subs	r2, #8
 8001d34:	2100      	movs	r1, #0
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7fe fb2e 	bl	8000398 <memset>
                vTaskSuspendAll();
 8001d3c:	f7ff f946 	bl	8000fcc <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001d40:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001d44:	4a08      	ldr	r2, [pc, #32]	@ (8001d68 <vPortFree+0xa0>)
 8001d46:	6813      	ldr	r3, [r2, #0]
 8001d48:	440b      	add	r3, r1
 8001d4a:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	f7ff fef7 	bl	8001b40 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001d52:	4a06      	ldr	r2, [pc, #24]	@ (8001d6c <vPortFree+0xa4>)
 8001d54:	6813      	ldr	r3, [r2, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
 8001d5a:	f7ff fa19 	bl	8001190 <xTaskResumeAll>
}
 8001d5e:	e7d1      	b.n	8001d04 <vPortFree+0x3c>
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	080041c0 	.word	0x080041c0
 8001d68:	2000067c 	.word	0x2000067c
 8001d6c:	20000670 	.word	0x20000670

08001d70 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d70:	f100 0308 	add.w	r3, r0, #8
 8001d74:	6043      	str	r3, [r0, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d76:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7a:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d7c:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d7e:	6103      	str	r3, [r0, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d84:	4770      	bx	lr

08001d86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d8a:	4770      	bx	lr

08001d8c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001d8c:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d8e:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001d90:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001d94:	d011      	beq.n	8001dba <vListInsert+0x2e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001d96:	f100 0308 	add.w	r3, r0, #8
 8001d9a:	461c      	mov	r4, r3
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	42aa      	cmp	r2, r5
 8001da2:	d9fa      	bls.n	8001d9a <vListInsert+0xe>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001da4:	6863      	ldr	r3, [r4, #4]
 8001da6:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001da8:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001daa:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 8001dac:	6061      	str	r1, [r4, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001dae:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
 8001db0:	6803      	ldr	r3, [r0, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	6003      	str	r3, [r0, #0]
}
 8001db6:	bc30      	pop	{r4, r5}
 8001db8:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
 8001dba:	6904      	ldr	r4, [r0, #16]
 8001dbc:	e7f2      	b.n	8001da4 <vListInsert+0x18>

08001dbe <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001dbe:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001dc0:	6841      	ldr	r1, [r0, #4]
 8001dc2:	6882      	ldr	r2, [r0, #8]
 8001dc4:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001dc6:	6841      	ldr	r1, [r0, #4]
 8001dc8:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	4282      	cmp	r2, r0
 8001dce:	d006      	beq.n	8001dde <uxListRemove+0x20>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	3a01      	subs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001dda:	6818      	ldr	r0, [r3, #0]
}
 8001ddc:	4770      	bx	lr
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001dde:	6882      	ldr	r2, [r0, #8]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	e7f5      	b.n	8001dd0 <uxListRemove+0x12>

08001de4 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001de4:	b510      	push	{r4, lr}
 8001de6:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001de8:	f001 f8bc 	bl	8002f64 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001dec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001dee:	b923      	cbnz	r3, 8001dfa <prvIsQueueEmpty+0x16>
        {
            xReturn = pdTRUE;
 8001df0:	2401      	movs	r4, #1
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8001df2:	f001 f8e1 	bl	8002fb8 <vPortExitCritical>

    return xReturn;
}
 8001df6:	4620      	mov	r0, r4
 8001df8:	bd10      	pop	{r4, pc}
            xReturn = pdFALSE;
 8001dfa:	2400      	movs	r4, #0
 8001dfc:	e7f9      	b.n	8001df2 <prvIsQueueEmpty+0xe>

08001dfe <prvCopyDataFromQueue>:
{
 8001dfe:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001e00:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001e02:	b16a      	cbz	r2, 8001e20 <prvCopyDataFromQueue+0x22>
{
 8001e04:	b510      	push	{r4, lr}
 8001e06:	4608      	mov	r0, r1
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001e08:	68d9      	ldr	r1, [r3, #12]
 8001e0a:	4411      	add	r1, r2
 8001e0c:	60d9      	str	r1, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001e0e:	689c      	ldr	r4, [r3, #8]
 8001e10:	42a1      	cmp	r1, r4
 8001e12:	d301      	bcc.n	8001e18 <prvCopyDataFromQueue+0x1a>
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001e14:	6819      	ldr	r1, [r3, #0]
 8001e16:	60d9      	str	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001e18:	68d9      	ldr	r1, [r3, #12]
 8001e1a:	f002 f901 	bl	8004020 <memcpy>
}
 8001e1e:	bd10      	pop	{r4, pc}
 8001e20:	4770      	bx	lr

08001e22 <prvUnlockQueue>:
{
 8001e22:	b538      	push	{r3, r4, r5, lr}
 8001e24:	4605      	mov	r5, r0
    taskENTER_CRITICAL();
 8001e26:	f001 f89d 	bl	8002f64 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8001e2a:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8001e2e:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e30:	e001      	b.n	8001e36 <prvUnlockQueue+0x14>
            --cTxLock;
 8001e32:	3c01      	subs	r4, #1
 8001e34:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e36:	2c00      	cmp	r4, #0
 8001e38:	dd0a      	ble.n	8001e50 <prvUnlockQueue+0x2e>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e3a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001e3c:	b143      	cbz	r3, 8001e50 <prvUnlockQueue+0x2e>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e3e:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8001e42:	f7ff fb95 	bl	8001570 <xTaskRemoveFromEventList>
 8001e46:	2800      	cmp	r0, #0
 8001e48:	d0f3      	beq.n	8001e32 <prvUnlockQueue+0x10>
                        vTaskMissedYield();
 8001e4a:	f7ff fc6b 	bl	8001724 <vTaskMissedYield>
 8001e4e:	e7f0      	b.n	8001e32 <prvUnlockQueue+0x10>
        pxQueue->cTxLock = queueUNLOCKED;
 8001e50:	23ff      	movs	r3, #255	@ 0xff
 8001e52:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8001e56:	f001 f8af 	bl	8002fb8 <vPortExitCritical>
    taskENTER_CRITICAL();
 8001e5a:	f001 f883 	bl	8002f64 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8001e5e:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8001e62:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e64:	e001      	b.n	8001e6a <prvUnlockQueue+0x48>
                --cRxLock;
 8001e66:	3c01      	subs	r4, #1
 8001e68:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e6a:	2c00      	cmp	r4, #0
 8001e6c:	dd0a      	ble.n	8001e84 <prvUnlockQueue+0x62>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e6e:	692b      	ldr	r3, [r5, #16]
 8001e70:	b143      	cbz	r3, 8001e84 <prvUnlockQueue+0x62>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e72:	f105 0010 	add.w	r0, r5, #16
 8001e76:	f7ff fb7b 	bl	8001570 <xTaskRemoveFromEventList>
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	d0f3      	beq.n	8001e66 <prvUnlockQueue+0x44>
                    vTaskMissedYield();
 8001e7e:	f7ff fc51 	bl	8001724 <vTaskMissedYield>
 8001e82:	e7f0      	b.n	8001e66 <prvUnlockQueue+0x44>
        pxQueue->cRxLock = queueUNLOCKED;
 8001e84:	23ff      	movs	r3, #255	@ 0xff
 8001e86:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8001e8a:	f001 f895 	bl	8002fb8 <vPortExitCritical>
}
 8001e8e:	bd38      	pop	{r3, r4, r5, pc}

08001e90 <xQueueGenericReset>:
{
 8001e90:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxQueue );
 8001e92:	b190      	cbz	r0, 8001eba <xQueueGenericReset+0x2a>
 8001e94:	460d      	mov	r5, r1
 8001e96:	4604      	mov	r4, r0
        ( pxQueue->uxLength >= 1U ) &&
 8001e98:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8001e9a:	b9e3      	cbnz	r3, 8001ed6 <xQueueGenericReset+0x46>
 8001e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ea0:	f383 8811 	msr	BASEPRI, r3
 8001ea4:	f3bf 8f6f 	isb	sy
 8001ea8:	f3bf 8f4f 	dsb	sy
    configASSERT( xReturn != pdFAIL );
 8001eac:	f240 1163 	movw	r1, #355	@ 0x163
 8001eb0:	4828      	ldr	r0, [pc, #160]	@ (8001f54 <xQueueGenericReset+0xc4>)
 8001eb2:	f7fe fcc3 	bl	800083c <assert_failed>
 8001eb6:	2000      	movs	r0, #0
}
 8001eb8:	bd38      	pop	{r3, r4, r5, pc}
 8001eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ebe:	f383 8811 	msr	BASEPRI, r3
 8001ec2:	f3bf 8f6f 	isb	sy
 8001ec6:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8001eca:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8001ece:	4821      	ldr	r0, [pc, #132]	@ (8001f54 <xQueueGenericReset+0xc4>)
 8001ed0:	f7fe fcb4 	bl	800083c <assert_failed>
    configASSERT( xReturn != pdFAIL );
 8001ed4:	e7e2      	b.n	8001e9c <xQueueGenericReset+0xc>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001ed6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001ed8:	2100      	movs	r1, #0
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	b9e3      	cbnz	r3, 8001f1a <xQueueGenericReset+0x8a>
        ( pxQueue->uxLength >= 1U ) &&
 8001ee0:	2900      	cmp	r1, #0
 8001ee2:	d1db      	bne.n	8001e9c <xQueueGenericReset+0xc>
        taskENTER_CRITICAL();
 8001ee4:	f001 f83e 	bl	8002f64 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001eec:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001eee:	fb01 3002 	mla	r0, r1, r2, r3
 8001ef2:	60a0      	str	r0, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	63a0      	str	r0, [r4, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ef8:	6063      	str	r3, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001efa:	3a01      	subs	r2, #1
 8001efc:	fb02 3301 	mla	r3, r2, r1, r3
 8001f00:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001f02:	23ff      	movs	r3, #255	@ 0xff
 8001f04:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001f08:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
            if( xNewQueue == pdFALSE )
 8001f0c:	b9c5      	cbnz	r5, 8001f40 <xQueueGenericReset+0xb0>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f0e:	6923      	ldr	r3, [r4, #16]
 8001f10:	b92b      	cbnz	r3, 8001f1e <xQueueGenericReset+0x8e>
        taskEXIT_CRITICAL();
 8001f12:	f001 f851 	bl	8002fb8 <vPortExitCritical>
    BaseType_t xReturn = pdPASS;
 8001f16:	2001      	movs	r0, #1
 8001f18:	e7ce      	b.n	8001eb8 <xQueueGenericReset+0x28>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	e7e0      	b.n	8001ee0 <xQueueGenericReset+0x50>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f1e:	f104 0010 	add.w	r0, r4, #16
 8001f22:	f7ff fb25 	bl	8001570 <xTaskRemoveFromEventList>
 8001f26:	2800      	cmp	r0, #0
 8001f28:	d0f3      	beq.n	8001f12 <xQueueGenericReset+0x82>
                        queueYIELD_IF_USING_PREEMPTION();
 8001f2a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f32:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001f36:	f3bf 8f4f 	dsb	sy
 8001f3a:	f3bf 8f6f 	isb	sy
 8001f3e:	e7e8      	b.n	8001f12 <xQueueGenericReset+0x82>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f40:	f104 0010 	add.w	r0, r4, #16
 8001f44:	f7ff ff14 	bl	8001d70 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f48:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001f4c:	f7ff ff10 	bl	8001d70 <vListInitialise>
 8001f50:	e7df      	b.n	8001f12 <xQueueGenericReset+0x82>
 8001f52:	bf00      	nop
 8001f54:	0800421c 	.word	0x0800421c

08001f58 <prvInitialiseNewQueue>:
{
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	9802      	ldr	r0, [sp, #8]
    if( uxItemSize == ( UBaseType_t ) 0 )
 8001f5e:	460c      	mov	r4, r1
 8001f60:	b931      	cbnz	r1, 8001f70 <prvInitialiseNewQueue+0x18>
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f62:	6000      	str	r0, [r0, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8001f64:	63c3      	str	r3, [r0, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001f66:	6404      	str	r4, [r0, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f68:	2101      	movs	r1, #1
 8001f6a:	f7ff ff91 	bl	8001e90 <xQueueGenericReset>
}
 8001f6e:	bd10      	pop	{r4, pc}
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f70:	6002      	str	r2, [r0, #0]
 8001f72:	e7f7      	b.n	8001f64 <prvInitialiseNewQueue+0xc>

08001f74 <xQueueGenericCreateStatic>:
    {
 8001f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f76:	b085      	sub	sp, #20
 8001f78:	4605      	mov	r5, r0
 8001f7a:	460f      	mov	r7, r1
 8001f7c:	4616      	mov	r6, r2
        configASSERT( pxStaticQueue );
 8001f7e:	461c      	mov	r4, r3
 8001f80:	b1bb      	cbz	r3, 8001fb2 <xQueueGenericCreateStatic+0x3e>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001f82:	b335      	cbz	r5, 8001fd2 <xQueueGenericCreateStatic+0x5e>
 8001f84:	b32c      	cbz	r4, 8001fd2 <xQueueGenericCreateStatic+0x5e>
            ( pxStaticQueue != NULL ) &&
 8001f86:	b316      	cbz	r6, 8001fce <xQueueGenericCreateStatic+0x5a>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8001f88:	b31f      	cbz	r7, 8001fd2 <xQueueGenericCreateStatic+0x5e>
                volatile size_t xSize = sizeof( StaticQueue_t );
 8001f8a:	2348      	movs	r3, #72	@ 0x48
 8001f8c:	9303      	str	r3, [sp, #12]
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8001f8e:	9b03      	ldr	r3, [sp, #12]
 8001f90:	2b48      	cmp	r3, #72	@ 0x48
 8001f92:	d12d      	bne.n	8001ff0 <xQueueGenericCreateStatic+0x7c>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8001f94:	9b03      	ldr	r3, [sp, #12]
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f9c:	9400      	str	r4, [sp, #0]
 8001f9e:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8001fa2:	4632      	mov	r2, r6
 8001fa4:	4639      	mov	r1, r7
 8001fa6:	4628      	mov	r0, r5
 8001fa8:	f7ff ffd6 	bl	8001f58 <prvInitialiseNewQueue>
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001fac:	4620      	mov	r0, r4
    }
 8001fae:	b005      	add	sp, #20
 8001fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fb6:	f383 8811 	msr	BASEPRI, r3
 8001fba:	f3bf 8f6f 	isb	sy
 8001fbe:	f3bf 8f4f 	dsb	sy
        configASSERT( pxStaticQueue );
 8001fc2:	f240 1177 	movw	r1, #375	@ 0x177
 8001fc6:	4811      	ldr	r0, [pc, #68]	@ (800200c <xQueueGenericCreateStatic+0x98>)
 8001fc8:	f7fe fc38 	bl	800083c <assert_failed>
 8001fcc:	e7d9      	b.n	8001f82 <xQueueGenericCreateStatic+0xe>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8001fce:	2f00      	cmp	r7, #0
 8001fd0:	d0db      	beq.n	8001f8a <xQueueGenericCreateStatic+0x16>
 8001fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fd6:	f383 8811 	msr	BASEPRI, r3
 8001fda:	f3bf 8f6f 	isb	sy
 8001fde:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
 8001fe2:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8001fe6:	4809      	ldr	r0, [pc, #36]	@ (800200c <xQueueGenericCreateStatic+0x98>)
 8001fe8:	f7fe fc28 	bl	800083c <assert_failed>
        Queue_t * pxNewQueue = NULL;
 8001fec:	2000      	movs	r0, #0
        return pxNewQueue;
 8001fee:	e7de      	b.n	8001fae <xQueueGenericCreateStatic+0x3a>
 8001ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ff4:	f383 8811 	msr	BASEPRI, r3
 8001ff8:	f3bf 8f6f 	isb	sy
 8001ffc:	f3bf 8f4f 	dsb	sy
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002000:	f240 1189 	movw	r1, #393	@ 0x189
 8002004:	4801      	ldr	r0, [pc, #4]	@ (800200c <xQueueGenericCreateStatic+0x98>)
 8002006:	f7fe fc19 	bl	800083c <assert_failed>
 800200a:	e7c3      	b.n	8001f94 <xQueueGenericCreateStatic+0x20>
 800200c:	0800421c 	.word	0x0800421c

08002010 <xQueueReceive>:
{
 8002010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002012:	b085      	sub	sp, #20
 8002014:	460f      	mov	r7, r1
 8002016:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 8002018:	4604      	mov	r4, r0
 800201a:	b138      	cbz	r0, 800202c <xQueueReceive+0x1c>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800201c:	b1a7      	cbz	r7, 8002048 <xQueueReceive+0x38>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800201e:	f7ff fb8d 	bl	800173c <xTaskGetSchedulerState>
 8002022:	b908      	cbnz	r0, 8002028 <xQueueReceive+0x18>
 8002024:	9b01      	ldr	r3, [sp, #4]
 8002026:	bb03      	cbnz	r3, 800206a <xQueueReceive+0x5a>
{
 8002028:	2600      	movs	r6, #0
 800202a:	e06b      	b.n	8002104 <xQueueReceive+0xf4>
 800202c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
    configASSERT( ( pxQueue ) );
 800203c:	f240 516b 	movw	r1, #1387	@ 0x56b
 8002040:	4851      	ldr	r0, [pc, #324]	@ (8002188 <xQueueReceive+0x178>)
 8002042:	f7fe fbfb 	bl	800083c <assert_failed>
 8002046:	e7e9      	b.n	800201c <xQueueReceive+0xc>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002048:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0e7      	beq.n	800201e <xQueueReceive+0xe>
 800204e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002052:	f383 8811 	msr	BASEPRI, r3
 8002056:	f3bf 8f6f 	isb	sy
 800205a:	f3bf 8f4f 	dsb	sy
 800205e:	f240 516f 	movw	r1, #1391	@ 0x56f
 8002062:	4849      	ldr	r0, [pc, #292]	@ (8002188 <xQueueReceive+0x178>)
 8002064:	f7fe fbea 	bl	800083c <assert_failed>
 8002068:	e7d9      	b.n	800201e <xQueueReceive+0xe>
 800206a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800206e:	f383 8811 	msr	BASEPRI, r3
 8002072:	f3bf 8f6f 	isb	sy
 8002076:	f3bf 8f4f 	dsb	sy
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800207a:	f240 5174 	movw	r1, #1396	@ 0x574
 800207e:	4842      	ldr	r0, [pc, #264]	@ (8002188 <xQueueReceive+0x178>)
 8002080:	f7fe fbdc 	bl	800083c <assert_failed>
 8002084:	e7d0      	b.n	8002028 <xQueueReceive+0x18>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002086:	4639      	mov	r1, r7
 8002088:	4620      	mov	r0, r4
 800208a:	f7ff feb8 	bl	8001dfe <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800208e:	3d01      	subs	r5, #1
 8002090:	63a5      	str	r5, [r4, #56]	@ 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002092:	6923      	ldr	r3, [r4, #16]
 8002094:	b923      	cbnz	r3, 80020a0 <xQueueReceive+0x90>
                taskEXIT_CRITICAL();
 8002096:	f000 ff8f 	bl	8002fb8 <vPortExitCritical>
                return pdPASS;
 800209a:	2001      	movs	r0, #1
}
 800209c:	b005      	add	sp, #20
 800209e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020a0:	f104 0010 	add.w	r0, r4, #16
 80020a4:	f7ff fa64 	bl	8001570 <xTaskRemoveFromEventList>
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d0f4      	beq.n	8002096 <xQueueReceive+0x86>
                        queueYIELD_IF_USING_PREEMPTION();
 80020ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80020b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80020b8:	f3bf 8f4f 	dsb	sy
 80020bc:	f3bf 8f6f 	isb	sy
 80020c0:	e7e9      	b.n	8002096 <xQueueReceive+0x86>
                    taskEXIT_CRITICAL();
 80020c2:	f000 ff79 	bl	8002fb8 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 80020c6:	2000      	movs	r0, #0
 80020c8:	e7e8      	b.n	800209c <xQueueReceive+0x8c>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80020ca:	a802      	add	r0, sp, #8
 80020cc:	f7ff face 	bl	800166c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80020d0:	2601      	movs	r6, #1
 80020d2:	e021      	b.n	8002118 <xQueueReceive+0x108>
        prvLockQueue( pxQueue );
 80020d4:	2300      	movs	r3, #0
 80020d6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80020da:	e029      	b.n	8002130 <xQueueReceive+0x120>
 80020dc:	2300      	movs	r3, #0
 80020de:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80020e2:	e02b      	b.n	800213c <xQueueReceive+0x12c>
                prvUnlockQueue( pxQueue );
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7ff fe9c 	bl	8001e22 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80020ea:	f7ff f851 	bl	8001190 <xTaskResumeAll>
 80020ee:	e009      	b.n	8002104 <xQueueReceive+0xf4>
            prvUnlockQueue( pxQueue );
 80020f0:	4620      	mov	r0, r4
 80020f2:	f7ff fe96 	bl	8001e22 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80020f6:	f7ff f84b 	bl	8001190 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80020fa:	4620      	mov	r0, r4
 80020fc:	f7ff fe72 	bl	8001de4 <prvIsQueueEmpty>
 8002100:	2800      	cmp	r0, #0
 8002102:	d13f      	bne.n	8002184 <xQueueReceive+0x174>
        taskENTER_CRITICAL();
 8002104:	f000 ff2e 	bl	8002f64 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002108:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800210a:	2d00      	cmp	r5, #0
 800210c:	d1bb      	bne.n	8002086 <xQueueReceive+0x76>
                if( xTicksToWait == ( TickType_t ) 0 )
 800210e:	9b01      	ldr	r3, [sp, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0d6      	beq.n	80020c2 <xQueueReceive+0xb2>
                else if( xEntryTimeSet == pdFALSE )
 8002114:	2e00      	cmp	r6, #0
 8002116:	d0d8      	beq.n	80020ca <xQueueReceive+0xba>
        taskEXIT_CRITICAL();
 8002118:	f000 ff4e 	bl	8002fb8 <vPortExitCritical>
        vTaskSuspendAll();
 800211c:	f7fe ff56 	bl	8000fcc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002120:	f000 ff20 	bl	8002f64 <vPortEnterCritical>
 8002124:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002128:	b25b      	sxtb	r3, r3
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	d0d1      	beq.n	80020d4 <xQueueReceive+0xc4>
 8002130:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002134:	b25b      	sxtb	r3, r3
 8002136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213a:	d0cf      	beq.n	80020dc <xQueueReceive+0xcc>
 800213c:	f000 ff3c 	bl	8002fb8 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002140:	a901      	add	r1, sp, #4
 8002142:	a802      	add	r0, sp, #8
 8002144:	f7ff fa9e 	bl	8001684 <xTaskCheckForTimeOut>
 8002148:	2800      	cmp	r0, #0
 800214a:	d1d1      	bne.n	80020f0 <xQueueReceive+0xe0>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800214c:	4620      	mov	r0, r4
 800214e:	f7ff fe49 	bl	8001de4 <prvIsQueueEmpty>
 8002152:	2800      	cmp	r0, #0
 8002154:	d0c6      	beq.n	80020e4 <xQueueReceive+0xd4>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002156:	9901      	ldr	r1, [sp, #4]
 8002158:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800215c:	f7ff f9b4 	bl	80014c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002160:	4620      	mov	r0, r4
 8002162:	f7ff fe5e 	bl	8001e22 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8002166:	f7ff f813 	bl	8001190 <xTaskResumeAll>
 800216a:	2800      	cmp	r0, #0
 800216c:	d1ca      	bne.n	8002104 <xQueueReceive+0xf4>
                    portYIELD_WITHIN_API();
 800216e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002176:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800217a:	f3bf 8f4f 	dsb	sy
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	e7bf      	b.n	8002104 <xQueueReceive+0xf4>
                return errQUEUE_EMPTY;
 8002184:	2000      	movs	r0, #0
 8002186:	e789      	b.n	800209c <xQueueReceive+0x8c>
 8002188:	0800421c 	.word	0x0800421c

0800218c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800218c:	b570      	push	{r4, r5, r6, lr}
 800218e:	4604      	mov	r4, r0
 8002190:	460d      	mov	r5, r1
 8002192:	4616      	mov	r6, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002194:	f000 fee6 	bl	8002f64 <vPortEnterCritical>
 8002198:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800219c:	b25b      	sxtb	r3, r3
 800219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a2:	d00d      	beq.n	80021c0 <vQueueWaitForMessageRestricted+0x34>
 80021a4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ae:	d00b      	beq.n	80021c8 <vQueueWaitForMessageRestricted+0x3c>
 80021b0:	f000 ff02 	bl	8002fb8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80021b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80021b6:	b15b      	cbz	r3, 80021d0 <vQueueWaitForMessageRestricted+0x44>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80021b8:	4620      	mov	r0, r4
 80021ba:	f7ff fe32 	bl	8001e22 <prvUnlockQueue>
    }
 80021be:	bd70      	pop	{r4, r5, r6, pc}
        prvLockQueue( pxQueue );
 80021c0:	2300      	movs	r3, #0
 80021c2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80021c6:	e7ed      	b.n	80021a4 <vQueueWaitForMessageRestricted+0x18>
 80021c8:	2300      	movs	r3, #0
 80021ca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80021ce:	e7ef      	b.n	80021b0 <vQueueWaitForMessageRestricted+0x24>
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80021d0:	4632      	mov	r2, r6
 80021d2:	4629      	mov	r1, r5
 80021d4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80021d8:	f7ff f998 	bl	800150c <vTaskPlaceOnEventListRestricted>
 80021dc:	e7ec      	b.n	80021b8 <vQueueWaitForMessageRestricted+0x2c>

080021de <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 80021de:	b510      	push	{r4, lr}
 80021e0:	4604      	mov	r4, r0
  unsigned Cnt;

  Cnt = p->Cnt;
 80021e2:	6882      	ldr	r2, [r0, #8]
  if ((Cnt + 1u) <= p->BufferSize) {
 80021e4:	1c53      	adds	r3, r2, #1
 80021e6:	6840      	ldr	r0, [r0, #4]
 80021e8:	4283      	cmp	r3, r0
 80021ea:	d805      	bhi.n	80021f8 <_StoreChar+0x1a>
    *(p->pBuffer + Cnt) = c;
 80021ec:	6820      	ldr	r0, [r4, #0]
 80021ee:	5481      	strb	r1, [r0, r2]
    p->Cnt = Cnt + 1u;
 80021f0:	60a3      	str	r3, [r4, #8]
    p->ReturnValue++;
 80021f2:	68e3      	ldr	r3, [r4, #12]
 80021f4:	3301      	adds	r3, #1
 80021f6:	60e3      	str	r3, [r4, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80021f8:	68a2      	ldr	r2, [r4, #8]
 80021fa:	6863      	ldr	r3, [r4, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d000      	beq.n	8002202 <_StoreChar+0x24>
      p->ReturnValue = -1;
    } else {
      p->Cnt = 0u;
    }
  }
}
 8002200:	bd10      	pop	{r4, pc}
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8002202:	6821      	ldr	r1, [r4, #0]
 8002204:	6920      	ldr	r0, [r4, #16]
 8002206:	f000 facd 	bl	80027a4 <SEGGER_RTT_Write>
 800220a:	68a3      	ldr	r3, [r4, #8]
 800220c:	4298      	cmp	r0, r3
 800220e:	d003      	beq.n	8002218 <_StoreChar+0x3a>
      p->ReturnValue = -1;
 8002210:	f04f 33ff 	mov.w	r3, #4294967295
 8002214:	60e3      	str	r3, [r4, #12]
 8002216:	e7f3      	b.n	8002200 <_StoreChar+0x22>
      p->Cnt = 0u;
 8002218:	2300      	movs	r3, #0
 800221a:	60a3      	str	r3, [r4, #8]
}
 800221c:	e7f0      	b.n	8002200 <_StoreChar+0x22>
	...

08002220 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8002220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002224:	4681      	mov	r9, r0
 8002226:	460f      	mov	r7, r1
 8002228:	4615      	mov	r5, r2
 800222a:	461e      	mov	r6, r3
 800222c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002230:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8002232:	460b      	mov	r3, r1
  Digit = 1u;
  //
  // Get actual field width
  //
  Width = 1u;
 8002234:	f04f 0801 	mov.w	r8, #1
  while (Number >= Base) {
 8002238:	e003      	b.n	8002242 <_PrintUnsigned+0x22>
    Number = (Number / Base);
 800223a:	fbb3 f3f5 	udiv	r3, r3, r5
    Width++;
 800223e:	f108 0801 	add.w	r8, r8, #1
  while (Number >= Base) {
 8002242:	42ab      	cmp	r3, r5
 8002244:	d2f9      	bcs.n	800223a <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
 8002246:	45b0      	cmp	r8, r6
 8002248:	d200      	bcs.n	800224c <_PrintUnsigned+0x2c>
    Width = NumDigits;
 800224a:	46b0      	mov	r8, r6
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800224c:	f012 0b01 	ands.w	fp, r2, #1
 8002250:	d118      	bne.n	8002284 <_PrintUnsigned+0x64>
    if (FieldWidth != 0u) {
 8002252:	f1ba 0f00 	cmp.w	sl, #0
 8002256:	d015      	beq.n	8002284 <_PrintUnsigned+0x64>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8002258:	f012 0f02 	tst.w	r2, #2
 800225c:	d002      	beq.n	8002264 <_PrintUnsigned+0x44>
 800225e:	b1be      	cbz	r6, 8002290 <_PrintUnsigned+0x70>
        c = '0';
      } else {
        c = ' ';
 8002260:	2420      	movs	r4, #32
 8002262:	e000      	b.n	8002266 <_PrintUnsigned+0x46>
 8002264:	2420      	movs	r4, #32
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002266:	f1ba 0f00 	cmp.w	sl, #0
 800226a:	d00b      	beq.n	8002284 <_PrintUnsigned+0x64>
 800226c:	45c2      	cmp	sl, r8
 800226e:	d909      	bls.n	8002284 <_PrintUnsigned+0x64>
        FieldWidth--;
 8002270:	f10a 3aff 	add.w	sl, sl, #4294967295
        _StoreChar(pBufferDesc, c);
 8002274:	4621      	mov	r1, r4
 8002276:	4648      	mov	r0, r9
 8002278:	f7ff ffb1 	bl	80021de <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800227c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	daf0      	bge.n	8002266 <_PrintUnsigned+0x46>
          break;
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8002284:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db25      	blt.n	80022d8 <_PrintUnsigned+0xb8>
  Digit = 1u;
 800228c:	2401      	movs	r4, #1
 800228e:	e004      	b.n	800229a <_PrintUnsigned+0x7a>
        c = '0';
 8002290:	2430      	movs	r4, #48	@ 0x30
 8002292:	e7e8      	b.n	8002266 <_PrintUnsigned+0x46>
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
        NumDigits--;
 8002294:	3e01      	subs	r6, #1
        Div = v / Digit;
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
          break;
        }
      }
      Digit *= Base;
 8002296:	fb05 f404 	mul.w	r4, r5, r4
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800229a:	2e01      	cmp	r6, #1
 800229c:	d8fa      	bhi.n	8002294 <_PrintUnsigned+0x74>
        Div = v / Digit;
 800229e:	fbb7 f3f4 	udiv	r3, r7, r4
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80022a2:	429d      	cmp	r5, r3
 80022a4:	d9f7      	bls.n	8002296 <_PrintUnsigned+0x76>
 80022a6:	e000      	b.n	80022aa <_PrintUnsigned+0x8a>
      v -= Div * Digit;
      _StoreChar(pBufferDesc, _aV2C[Div]);
      if (pBufferDesc->ReturnValue < 0) {
        break;
      }
      Digit /= Base;
 80022a8:	461c      	mov	r4, r3
      Div = v / Digit;
 80022aa:	fbb7 f3f4 	udiv	r3, r7, r4
      v -= Div * Digit;
 80022ae:	fb04 7713 	mls	r7, r4, r3, r7
      _StoreChar(pBufferDesc, _aV2C[Div]);
 80022b2:	4a12      	ldr	r2, [pc, #72]	@ (80022fc <_PrintUnsigned+0xdc>)
 80022b4:	5cd1      	ldrb	r1, [r2, r3]
 80022b6:	4648      	mov	r0, r9
 80022b8:	f7ff ff91 	bl	80021de <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 80022bc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db03      	blt.n	80022cc <_PrintUnsigned+0xac>
      Digit /= Base;
 80022c4:	fbb4 f3f5 	udiv	r3, r4, r5
    } while (Digit);
 80022c8:	42ac      	cmp	r4, r5
 80022ca:	d2ed      	bcs.n	80022a8 <_PrintUnsigned+0x88>
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80022cc:	f1bb 0f00 	cmp.w	fp, #0
 80022d0:	d002      	beq.n	80022d8 <_PrintUnsigned+0xb8>
      if (FieldWidth != 0u) {
 80022d2:	f1ba 0f00 	cmp.w	sl, #0
 80022d6:	d101      	bne.n	80022dc <_PrintUnsigned+0xbc>
          }
        }
      }
    }
  }
}
 80022d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80022dc:	f1ba 0f00 	cmp.w	sl, #0
 80022e0:	d0fa      	beq.n	80022d8 <_PrintUnsigned+0xb8>
 80022e2:	45c2      	cmp	sl, r8
 80022e4:	d9f8      	bls.n	80022d8 <_PrintUnsigned+0xb8>
          FieldWidth--;
 80022e6:	f10a 3aff 	add.w	sl, sl, #4294967295
          _StoreChar(pBufferDesc, ' ');
 80022ea:	2120      	movs	r1, #32
 80022ec:	4648      	mov	r0, r9
 80022ee:	f7ff ff76 	bl	80021de <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80022f2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	daf0      	bge.n	80022dc <_PrintUnsigned+0xbc>
 80022fa:	e7ed      	b.n	80022d8 <_PrintUnsigned+0xb8>
 80022fc:	08004320 	.word	0x08004320

08002300 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8002300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	4607      	mov	r7, r0
 8002308:	4688      	mov	r8, r1
 800230a:	4615      	mov	r5, r2
 800230c:	4699      	mov	r9, r3
 800230e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8002310:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8002314:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
 8002318:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31

  //
  // Get actual field width
  //
  Width = 1u;
 800231c:	2401      	movs	r4, #1
  while (Number >= (int)Base) {
 800231e:	e002      	b.n	8002326 <_PrintInt+0x26>
    Number = (Number / (int)Base);
 8002320:	fb9c fcf5 	sdiv	ip, ip, r5
    Width++;
 8002324:	3401      	adds	r4, #1
  while (Number >= (int)Base) {
 8002326:	4565      	cmp	r5, ip
 8002328:	ddfa      	ble.n	8002320 <_PrintInt+0x20>
  }
  if (NumDigits > Width) {
 800232a:	454c      	cmp	r4, r9
 800232c:	d200      	bcs.n	8002330 <_PrintInt+0x30>
    Width = NumDigits;
 800232e:	464c      	mov	r4, r9
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8002330:	b136      	cbz	r6, 8002340 <_PrintInt+0x40>
 8002332:	f1b8 0f00 	cmp.w	r8, #0
 8002336:	db02      	blt.n	800233e <_PrintInt+0x3e>
 8002338:	f01a 0f04 	tst.w	sl, #4
 800233c:	d000      	beq.n	8002340 <_PrintInt+0x40>
    FieldWidth--;
 800233e:	3e01      	subs	r6, #1
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8002340:	f01a 0f02 	tst.w	sl, #2
 8002344:	d002      	beq.n	800234c <_PrintInt+0x4c>
 8002346:	f1b9 0f00 	cmp.w	r9, #0
 800234a:	d003      	beq.n	8002354 <_PrintInt+0x54>
 800234c:	f01a 0f01 	tst.w	sl, #1
 8002350:	d100      	bne.n	8002354 <_PrintInt+0x54>
    if (FieldWidth != 0u) {
 8002352:	b9ae      	cbnz	r6, 8002380 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db0f      	blt.n	800237a <_PrintInt+0x7a>
    if (v < 0) {
 800235a:	f1b8 0f00 	cmp.w	r8, #0
 800235e:	db1c      	blt.n	800239a <_PrintInt+0x9a>
      v = -v;
      _StoreChar(pBufferDesc, '-');
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8002360:	f01a 0f04 	tst.w	sl, #4
 8002364:	d120      	bne.n	80023a8 <_PrintInt+0xa8>
      _StoreChar(pBufferDesc, '+');
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	db06      	blt.n	800237a <_PrintInt+0x7a>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800236c:	f00a 0303 	and.w	r3, sl, #3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d01e      	beq.n	80023b2 <_PrintInt+0xb2>
              break;
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	da2d      	bge.n	80023d6 <_PrintInt+0xd6>
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
      }
    }
  }
}
 800237a:	b002      	add	sp, #8
 800237c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002380:	2e00      	cmp	r6, #0
 8002382:	d0e7      	beq.n	8002354 <_PrintInt+0x54>
 8002384:	42a6      	cmp	r6, r4
 8002386:	d9e5      	bls.n	8002354 <_PrintInt+0x54>
        FieldWidth--;
 8002388:	3e01      	subs	r6, #1
        _StoreChar(pBufferDesc, ' ');
 800238a:	2120      	movs	r1, #32
 800238c:	4638      	mov	r0, r7
 800238e:	f7ff ff26 	bl	80021de <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	daf3      	bge.n	8002380 <_PrintInt+0x80>
 8002398:	e7dc      	b.n	8002354 <_PrintInt+0x54>
      v = -v;
 800239a:	f1c8 0800 	rsb	r8, r8, #0
      _StoreChar(pBufferDesc, '-');
 800239e:	212d      	movs	r1, #45	@ 0x2d
 80023a0:	4638      	mov	r0, r7
 80023a2:	f7ff ff1c 	bl	80021de <_StoreChar>
 80023a6:	e7de      	b.n	8002366 <_PrintInt+0x66>
      _StoreChar(pBufferDesc, '+');
 80023a8:	212b      	movs	r1, #43	@ 0x2b
 80023aa:	4638      	mov	r0, r7
 80023ac:	f7ff ff17 	bl	80021de <_StoreChar>
 80023b0:	e7d9      	b.n	8002366 <_PrintInt+0x66>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80023b2:	f1b9 0f00 	cmp.w	r9, #0
 80023b6:	d1dd      	bne.n	8002374 <_PrintInt+0x74>
        if (FieldWidth != 0u) {
 80023b8:	2e00      	cmp	r6, #0
 80023ba:	d0db      	beq.n	8002374 <_PrintInt+0x74>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80023bc:	2e00      	cmp	r6, #0
 80023be:	d0d9      	beq.n	8002374 <_PrintInt+0x74>
 80023c0:	42a6      	cmp	r6, r4
 80023c2:	d9d7      	bls.n	8002374 <_PrintInt+0x74>
            FieldWidth--;
 80023c4:	3e01      	subs	r6, #1
            _StoreChar(pBufferDesc, '0');
 80023c6:	2130      	movs	r1, #48	@ 0x30
 80023c8:	4638      	mov	r0, r7
 80023ca:	f7ff ff08 	bl	80021de <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	daf3      	bge.n	80023bc <_PrintInt+0xbc>
 80023d4:	e7ce      	b.n	8002374 <_PrintInt+0x74>
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 80023d6:	f8cd a004 	str.w	sl, [sp, #4]
 80023da:	9600      	str	r6, [sp, #0]
 80023dc:	464b      	mov	r3, r9
 80023de:	462a      	mov	r2, r5
 80023e0:	4641      	mov	r1, r8
 80023e2:	4638      	mov	r0, r7
 80023e4:	f7ff ff1c 	bl	8002220 <_PrintUnsigned>
}
 80023e8:	e7c7      	b.n	800237a <_PrintInt+0x7a>
	...

080023ec <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 80023ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ee:	b099      	sub	sp, #100	@ 0x64
 80023f0:	4606      	mov	r6, r0
 80023f2:	460c      	mov	r4, r1
 80023f4:	4615      	mov	r5, r2
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 80023f6:	ab03      	add	r3, sp, #12
 80023f8:	9313      	str	r3, [sp, #76]	@ 0x4c
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 80023fa:	2340      	movs	r3, #64	@ 0x40
 80023fc:	9314      	str	r3, [sp, #80]	@ 0x50
  BufferDesc.Cnt            = 0u;
 80023fe:	2300      	movs	r3, #0
 8002400:	9315      	str	r3, [sp, #84]	@ 0x54
  BufferDesc.RTTBufferIndex = BufferIndex;
 8002402:	9017      	str	r0, [sp, #92]	@ 0x5c
  BufferDesc.ReturnValue    = 0;
 8002404:	9316      	str	r3, [sp, #88]	@ 0x58
 8002406:	e08b      	b.n	8002520 <SEGGER_RTT_vprintf+0x134>
    }
    if (c == '%') {
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8002408:	2000      	movs	r0, #0
      v = 1;
 800240a:	2201      	movs	r2, #1
 800240c:	e011      	b.n	8002432 <SEGGER_RTT_vprintf+0x46>
      do {
        c = *sFormat;
        switch (c) {
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800240e:	f040 0001 	orr.w	r0, r0, #1
 8002412:	3401      	adds	r4, #1
 8002414:	e00c      	b.n	8002430 <SEGGER_RTT_vprintf+0x44>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8002416:	f040 0002 	orr.w	r0, r0, #2
 800241a:	3401      	adds	r4, #1
 800241c:	e008      	b.n	8002430 <SEGGER_RTT_vprintf+0x44>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800241e:	f040 0004 	orr.w	r0, r0, #4
 8002422:	3401      	adds	r4, #1
 8002424:	e004      	b.n	8002430 <SEGGER_RTT_vprintf+0x44>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8002426:	f040 0008 	orr.w	r0, r0, #8
 800242a:	3401      	adds	r4, #1
 800242c:	e000      	b.n	8002430 <SEGGER_RTT_vprintf+0x44>
        switch (c) {
 800242e:	2200      	movs	r2, #0
        default:  v = 0; break;
        }
      } while (v);
 8002430:	b312      	cbz	r2, 8002478 <SEGGER_RTT_vprintf+0x8c>
        c = *sFormat;
 8002432:	7823      	ldrb	r3, [r4, #0]
        switch (c) {
 8002434:	3b23      	subs	r3, #35	@ 0x23
 8002436:	2b0d      	cmp	r3, #13
 8002438:	d8f9      	bhi.n	800242e <SEGGER_RTT_vprintf+0x42>
 800243a:	a101      	add	r1, pc, #4	@ (adr r1, 8002440 <SEGGER_RTT_vprintf+0x54>)
 800243c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002440:	08002427 	.word	0x08002427
 8002444:	0800242f 	.word	0x0800242f
 8002448:	0800242f 	.word	0x0800242f
 800244c:	0800242f 	.word	0x0800242f
 8002450:	0800242f 	.word	0x0800242f
 8002454:	0800242f 	.word	0x0800242f
 8002458:	0800242f 	.word	0x0800242f
 800245c:	0800242f 	.word	0x0800242f
 8002460:	0800241f 	.word	0x0800241f
 8002464:	0800242f 	.word	0x0800242f
 8002468:	0800240f 	.word	0x0800240f
 800246c:	0800242f 	.word	0x0800242f
 8002470:	0800242f 	.word	0x0800242f
 8002474:	08002417 	.word	0x08002417
      //
      // filter out field with
      //
      FieldWidth = 0u;
      do {
        c = *sFormat;
 8002478:	7823      	ldrb	r3, [r4, #0]
        if ((c < '0') || (c > '9')) {
 800247a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800247e:	b2c9      	uxtb	r1, r1
 8002480:	2909      	cmp	r1, #9
 8002482:	d807      	bhi.n	8002494 <SEGGER_RTT_vprintf+0xa8>
          break;
        }
        sFormat++;
 8002484:	3401      	adds	r4, #1
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8002486:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800248a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800248e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
        c = *sFormat;
 8002492:	e7f1      	b.n	8002478 <SEGGER_RTT_vprintf+0x8c>
      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
      c = *sFormat;
      if (c == '.') {
 8002494:	2b2e      	cmp	r3, #46	@ 0x2e
 8002496:	d002      	beq.n	800249e <SEGGER_RTT_vprintf+0xb2>
      NumDigits = 0u;
 8002498:	2300      	movs	r3, #0
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800249a:	7821      	ldrb	r1, [r4, #0]
 800249c:	e014      	b.n	80024c8 <SEGGER_RTT_vprintf+0xdc>
        sFormat++;
 800249e:	3401      	adds	r4, #1
      NumDigits = 0u;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e006      	b.n	80024b2 <SEGGER_RTT_vprintf+0xc6>
          sFormat++;
 80024a4:	3401      	adds	r4, #1
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 80024a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80024aa:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80024ae:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
          c = *sFormat;
 80024b2:	7821      	ldrb	r1, [r4, #0]
          if ((c < '0') || (c > '9')) {
 80024b4:	f1a1 0c30 	sub.w	ip, r1, #48	@ 0x30
 80024b8:	fa5f fc8c 	uxtb.w	ip, ip
 80024bc:	f1bc 0f09 	cmp.w	ip, #9
 80024c0:	d9f0      	bls.n	80024a4 <SEGGER_RTT_vprintf+0xb8>
 80024c2:	e7ea      	b.n	800249a <SEGGER_RTT_vprintf+0xae>
      do {
        if ((c == 'l') || (c == 'h')) {
          sFormat++;
          c = *sFormat;
 80024c4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
        if ((c == 'l') || (c == 'h')) {
 80024c8:	296c      	cmp	r1, #108	@ 0x6c
 80024ca:	d0fb      	beq.n	80024c4 <SEGGER_RTT_vprintf+0xd8>
 80024cc:	2968      	cmp	r1, #104	@ 0x68
 80024ce:	d0f9      	beq.n	80024c4 <SEGGER_RTT_vprintf+0xd8>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80024d0:	2925      	cmp	r1, #37	@ 0x25
 80024d2:	d070      	beq.n	80025b6 <SEGGER_RTT_vprintf+0x1ca>
 80024d4:	d320      	bcc.n	8002518 <SEGGER_RTT_vprintf+0x12c>
 80024d6:	2978      	cmp	r1, #120	@ 0x78
 80024d8:	d81e      	bhi.n	8002518 <SEGGER_RTT_vprintf+0x12c>
 80024da:	2958      	cmp	r1, #88	@ 0x58
 80024dc:	d31c      	bcc.n	8002518 <SEGGER_RTT_vprintf+0x12c>
 80024de:	3958      	subs	r1, #88	@ 0x58
 80024e0:	2920      	cmp	r1, #32
 80024e2:	d819      	bhi.n	8002518 <SEGGER_RTT_vprintf+0x12c>
 80024e4:	e8df f001 	tbb	[pc, r1]
 80024e8:	1818183d 	.word	0x1818183d
 80024ec:	18181818 	.word	0x18181818
 80024f0:	11181818 	.word	0x11181818
 80024f4:	18181827 	.word	0x18181827
 80024f8:	18181818 	.word	0x18181818
 80024fc:	18181818 	.word	0x18181818
 8002500:	4818185a 	.word	0x4818185a
 8002504:	18183218 	.word	0x18183218
 8002508:	3d          	.byte	0x3d
 8002509:	00          	.byte	0x00
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800250a:	682b      	ldr	r3, [r5, #0]
 800250c:	1d1a      	adds	r2, r3, #4
 800250e:	602a      	str	r2, [r5, #0]
        c0 = (char)v;
        _StoreChar(&BufferDesc, c0);
 8002510:	7819      	ldrb	r1, [r3, #0]
 8002512:	a813      	add	r0, sp, #76	@ 0x4c
 8002514:	f7ff fe63 	bl	80021de <_StoreChar>
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
      }
      sFormat++;
 8002518:	3401      	adds	r4, #1
    } else {
      _StoreChar(&BufferDesc, c);
    }
  } while (BufferDesc.ReturnValue >= 0);
 800251a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800251c:	2b00      	cmp	r3, #0
 800251e:	db4f      	blt.n	80025c0 <SEGGER_RTT_vprintf+0x1d4>
    c = *sFormat;
 8002520:	f814 1b01 	ldrb.w	r1, [r4], #1
    if (c == 0u) {
 8002524:	2900      	cmp	r1, #0
 8002526:	d04b      	beq.n	80025c0 <SEGGER_RTT_vprintf+0x1d4>
    if (c == '%') {
 8002528:	2925      	cmp	r1, #37	@ 0x25
 800252a:	f43f af6d 	beq.w	8002408 <SEGGER_RTT_vprintf+0x1c>
      _StoreChar(&BufferDesc, c);
 800252e:	a813      	add	r0, sp, #76	@ 0x4c
 8002530:	f7ff fe55 	bl	80021de <_StoreChar>
 8002534:	e7f1      	b.n	800251a <SEGGER_RTT_vprintf+0x12e>
        v = va_arg(*pParamList, int);
 8002536:	6829      	ldr	r1, [r5, #0]
 8002538:	1d0f      	adds	r7, r1, #4
 800253a:	602f      	str	r7, [r5, #0]
 800253c:	6809      	ldr	r1, [r1, #0]
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800253e:	9001      	str	r0, [sp, #4]
 8002540:	9200      	str	r2, [sp, #0]
 8002542:	220a      	movs	r2, #10
 8002544:	a813      	add	r0, sp, #76	@ 0x4c
 8002546:	f7ff fedb 	bl	8002300 <_PrintInt>
        break;
 800254a:	e7e5      	b.n	8002518 <SEGGER_RTT_vprintf+0x12c>
        v = va_arg(*pParamList, int);
 800254c:	6829      	ldr	r1, [r5, #0]
 800254e:	1d0f      	adds	r7, r1, #4
 8002550:	602f      	str	r7, [r5, #0]
 8002552:	6809      	ldr	r1, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8002554:	9001      	str	r0, [sp, #4]
 8002556:	9200      	str	r2, [sp, #0]
 8002558:	220a      	movs	r2, #10
 800255a:	a813      	add	r0, sp, #76	@ 0x4c
 800255c:	f7ff fe60 	bl	8002220 <_PrintUnsigned>
        break;
 8002560:	e7da      	b.n	8002518 <SEGGER_RTT_vprintf+0x12c>
        v = va_arg(*pParamList, int);
 8002562:	6829      	ldr	r1, [r5, #0]
 8002564:	1d0f      	adds	r7, r1, #4
 8002566:	602f      	str	r7, [r5, #0]
 8002568:	6809      	ldr	r1, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800256a:	9001      	str	r0, [sp, #4]
 800256c:	9200      	str	r2, [sp, #0]
 800256e:	2210      	movs	r2, #16
 8002570:	a813      	add	r0, sp, #76	@ 0x4c
 8002572:	f7ff fe55 	bl	8002220 <_PrintUnsigned>
        break;
 8002576:	e7cf      	b.n	8002518 <SEGGER_RTT_vprintf+0x12c>
          const char * s = va_arg(*pParamList, const char *);
 8002578:	682b      	ldr	r3, [r5, #0]
 800257a:	1d1a      	adds	r2, r3, #4
 800257c:	602a      	str	r2, [r5, #0]
 800257e:	681f      	ldr	r7, [r3, #0]
          if (s == NULL) {
 8002580:	b157      	cbz	r7, 8002598 <SEGGER_RTT_vprintf+0x1ac>
            c = *s;
 8002582:	f817 1b01 	ldrb.w	r1, [r7], #1
            if (c == '\0') {
 8002586:	2900      	cmp	r1, #0
 8002588:	d0c6      	beq.n	8002518 <SEGGER_RTT_vprintf+0x12c>
           _StoreChar(&BufferDesc, c);
 800258a:	a813      	add	r0, sp, #76	@ 0x4c
 800258c:	f7ff fe27 	bl	80021de <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8002590:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002592:	2b00      	cmp	r3, #0
 8002594:	daf5      	bge.n	8002582 <SEGGER_RTT_vprintf+0x196>
 8002596:	e7bf      	b.n	8002518 <SEGGER_RTT_vprintf+0x12c>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
 8002598:	4f12      	ldr	r7, [pc, #72]	@ (80025e4 <SEGGER_RTT_vprintf+0x1f8>)
 800259a:	e7f2      	b.n	8002582 <SEGGER_RTT_vprintf+0x196>
        v = va_arg(*pParamList, int);
 800259c:	682b      	ldr	r3, [r5, #0]
 800259e:	1d1a      	adds	r2, r3, #4
 80025a0:	602a      	str	r2, [r5, #0]
 80025a2:	6819      	ldr	r1, [r3, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 80025a4:	2300      	movs	r3, #0
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	2308      	movs	r3, #8
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2210      	movs	r2, #16
 80025ae:	a813      	add	r0, sp, #76	@ 0x4c
 80025b0:	f7ff fe36 	bl	8002220 <_PrintUnsigned>
        break;
 80025b4:	e7b0      	b.n	8002518 <SEGGER_RTT_vprintf+0x12c>
        _StoreChar(&BufferDesc, '%');
 80025b6:	2125      	movs	r1, #37	@ 0x25
 80025b8:	a813      	add	r0, sp, #76	@ 0x4c
 80025ba:	f7ff fe10 	bl	80021de <_StoreChar>
        break;
 80025be:	e7ab      	b.n	8002518 <SEGGER_RTT_vprintf+0x12c>

  if (BufferDesc.ReturnValue > 0) {
 80025c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	dd05      	ble.n	80025d2 <SEGGER_RTT_vprintf+0x1e6>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 80025c6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80025c8:	b932      	cbnz	r2, 80025d8 <SEGGER_RTT_vprintf+0x1ec>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 80025ca:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80025cc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80025ce:	4413      	add	r3, r2
 80025d0:	9316      	str	r3, [sp, #88]	@ 0x58
  }
  return BufferDesc.ReturnValue;
}
 80025d2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80025d4:	b019      	add	sp, #100	@ 0x64
 80025d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 80025d8:	a903      	add	r1, sp, #12
 80025da:	4630      	mov	r0, r6
 80025dc:	f000 f8e2 	bl	80027a4 <SEGGER_RTT_Write>
 80025e0:	e7f3      	b.n	80025ca <SEGGER_RTT_vprintf+0x1de>
 80025e2:	bf00      	nop
 80025e4:	08004268 	.word	0x08004268

080025e8 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 80025e8:	b40e      	push	{r1, r2, r3}
 80025ea:	b500      	push	{lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	ab03      	add	r3, sp, #12
 80025f0:	f853 1b04 	ldr.w	r1, [r3], #4
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 80025f4:	9301      	str	r3, [sp, #4]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 80025f6:	aa01      	add	r2, sp, #4
 80025f8:	f7ff fef8 	bl	80023ec <SEGGER_RTT_vprintf>
  va_end(ParamList);
  return r;
}
 80025fc:	b002      	add	sp, #8
 80025fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8002602:	b003      	add	sp, #12
 8002604:	4770      	bx	lr

08002606 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8002606:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
 8002608:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
 800260a:	4293      	cmp	r3, r2
 800260c:	d804      	bhi.n	8002618 <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800260e:	6881      	ldr	r1, [r0, #8]
 8002610:	1a8a      	subs	r2, r1, r2
 8002612:	4413      	add	r3, r2
 8002614:	1e58      	subs	r0, r3, #1
 8002616:	4770      	bx	lr
  } else {
    r = RdOff - WrOff - 1u;
 8002618:	1a98      	subs	r0, r3, r2
 800261a:	3801      	subs	r0, #1
  }
  return r;
}
 800261c:	4770      	bx	lr

0800261e <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800261e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002622:	4604      	mov	r4, r0
 8002624:	4688      	mov	r8, r1
 8002626:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
 8002628:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
 800262a:	6887      	ldr	r7, [r0, #8]
 800262c:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
 8002630:	4591      	cmp	r9, r2
 8002632:	d909      	bls.n	8002648 <_WriteNoCheck+0x2a>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002634:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8002636:	4428      	add	r0, r5
 8002638:	f001 fcf2 	bl	8004020 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800263c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8002640:	4435      	add	r5, r6
 8002642:	60e5      	str	r5, [r4, #12]
}
 8002644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002648:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800264a:	464a      	mov	r2, r9
 800264c:	4428      	add	r0, r5
 800264e:	f001 fce7 	bl	8004020 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002652:	1bed      	subs	r5, r5, r7
 8002654:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002656:	462a      	mov	r2, r5
 8002658:	eb08 0109 	add.w	r1, r8, r9
 800265c:	6860      	ldr	r0, [r4, #4]
 800265e:	f001 fcdf 	bl	8004020 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002662:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8002666:	60e5      	str	r5, [r4, #12]
}
 8002668:	e7ec      	b.n	8002644 <_WriteNoCheck+0x26>

0800266a <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800266a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800266e:	4606      	mov	r6, r0
 8002670:	4688      	mov	r8, r1
 8002672:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
 8002674:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
 8002676:	f04f 0900 	mov.w	r9, #0
 800267a:	e01a      	b.n	80026b2 <_WriteBlocking+0x48>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800267c:	1b5b      	subs	r3, r3, r5
 800267e:	1e5a      	subs	r2, r3, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002680:	68b3      	ldr	r3, [r6, #8]
 8002682:	1b5c      	subs	r4, r3, r5
 8002684:	4294      	cmp	r4, r2
 8002686:	bf28      	it	cs
 8002688:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800268a:	42bc      	cmp	r4, r7
 800268c:	bf28      	it	cs
 800268e:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002690:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8002692:	4622      	mov	r2, r4
 8002694:	4641      	mov	r1, r8
 8002696:	4428      	add	r0, r5
 8002698:	f001 fcc2 	bl	8004020 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800269c:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
 800269e:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
 80026a0:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
 80026a2:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
 80026a4:	68b3      	ldr	r3, [r6, #8]
 80026a6:	42ab      	cmp	r3, r5
 80026a8:	d00b      	beq.n	80026c2 <_WriteBlocking+0x58>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80026aa:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80026ae:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 80026b0:	b14f      	cbz	r7, 80026c6 <_WriteBlocking+0x5c>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80026b2:	6933      	ldr	r3, [r6, #16]
    if (RdOff > WrOff) {
 80026b4:	429d      	cmp	r5, r3
 80026b6:	d3e1      	bcc.n	800267c <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80026b8:	68b2      	ldr	r2, [r6, #8]
 80026ba:	1b5b      	subs	r3, r3, r5
 80026bc:	441a      	add	r2, r3
 80026be:	3a01      	subs	r2, #1
 80026c0:	e7de      	b.n	8002680 <_WriteBlocking+0x16>
      WrOff = 0u;
 80026c2:	2500      	movs	r5, #0
 80026c4:	e7f1      	b.n	80026aa <_WriteBlocking+0x40>
}
 80026c6:	4648      	mov	r0, r9
 80026c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080026cc <_DoInit>:
static void _DoInit(void) {
 80026cc:	b510      	push	{r4, lr}
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80026ce:	4c15      	ldr	r4, [pc, #84]	@ (8002724 <_DoInit+0x58>)
 80026d0:	2248      	movs	r2, #72	@ 0x48
 80026d2:	2100      	movs	r1, #0
 80026d4:	4620      	mov	r0, r4
 80026d6:	f7fd fe5f 	bl	8000398 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80026da:	2301      	movs	r3, #1
 80026dc:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80026de:	6163      	str	r3, [r4, #20]
  p->aUp[0].sName         = "Terminal";
 80026e0:	4a11      	ldr	r2, [pc, #68]	@ (8002728 <_DoInit+0x5c>)
 80026e2:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <_DoInit+0x60>)
 80026e6:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80026e8:	2378      	movs	r3, #120	@ 0x78
 80026ea:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62a3      	str	r3, [r4, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80026f0:	6263      	str	r3, [r4, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80026f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
  p->aDown[0].sName         = "Terminal";
 80026f4:	6322      	str	r2, [r4, #48]	@ 0x30
  p->aDown[0].pBuffer       = _acDownBuffer;
 80026f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002730 <_DoInit+0x64>)
 80026f8:	6362      	str	r2, [r4, #52]	@ 0x34
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80026fa:	2204      	movs	r2, #4
 80026fc:	63a2      	str	r2, [r4, #56]	@ 0x38
  p->aDown[0].RdOff         = 0u;
 80026fe:	6423      	str	r3, [r4, #64]	@ 0x40
  p->aDown[0].WrOff         = 0u;
 8002700:	63e3      	str	r3, [r4, #60]	@ 0x3c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002702:	6463      	str	r3, [r4, #68]	@ 0x44
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8002704:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002708:	e006      	b.n	8002718 <_DoInit+0x4c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800270a:	f1c3 020f 	rsb	r2, r3, #15
 800270e:	4909      	ldr	r1, [pc, #36]	@ (8002734 <_DoInit+0x68>)
 8002710:	5c89      	ldrb	r1, [r1, r2]
 8002712:	4a04      	ldr	r2, [pc, #16]	@ (8002724 <_DoInit+0x58>)
 8002714:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002716:	3301      	adds	r3, #1
 8002718:	2b0f      	cmp	r3, #15
 800271a:	d9f6      	bls.n	800270a <_DoInit+0x3e>
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800271c:	f3bf 8f5f 	dmb	sy
}
 8002720:	bd10      	pop	{r4, pc}
 8002722:	bf00      	nop
 8002724:	20001308 	.word	0x20001308
 8002728:	08004270 	.word	0x08004270
 800272c:	20001290 	.word	0x20001290
 8002730:	2000128c 	.word	0x2000128c
 8002734:	08004330 	.word	0x08004330

08002738 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273a:	460f      	mov	r7, r1
 800273c:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800273e:	1c44      	adds	r4, r0, #1
 8002740:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002744:	4b16      	ldr	r3, [pc, #88]	@ (80027a0 <SEGGER_RTT_WriteNoLock+0x68>)
 8002746:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800274a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800274e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002752:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8002754:	2d01      	cmp	r5, #1
 8002756:	d00e      	beq.n	8002776 <SEGGER_RTT_WriteNoLock+0x3e>
 8002758:	2d02      	cmp	r5, #2
 800275a:	d01a      	beq.n	8002792 <SEGGER_RTT_WriteNoLock+0x5a>
 800275c:	b9f5      	cbnz	r5, 800279c <SEGGER_RTT_WriteNoLock+0x64>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800275e:	4620      	mov	r0, r4
 8002760:	f7ff ff51 	bl	8002606 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 8002764:	4286      	cmp	r6, r0
 8002766:	d812      	bhi.n	800278e <SEGGER_RTT_WriteNoLock+0x56>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
 8002768:	4632      	mov	r2, r6
 800276a:	4639      	mov	r1, r7
 800276c:	4620      	mov	r0, r4
 800276e:	f7ff ff56 	bl	800261e <_WriteNoCheck>
      Status = NumBytes;
 8002772:	4635      	mov	r5, r6
 8002774:	e00b      	b.n	800278e <SEGGER_RTT_WriteNoLock+0x56>
    break;
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002776:	4620      	mov	r0, r4
 8002778:	f7ff ff45 	bl	8002606 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 800277c:	4635      	mov	r5, r6
 800277e:	4286      	cmp	r6, r0
 8002780:	bf28      	it	cs
 8002782:	4605      	movcs	r5, r0
    _WriteNoCheck(pRing, pData, Status);
 8002784:	462a      	mov	r2, r5
 8002786:	4639      	mov	r1, r7
 8002788:	4620      	mov	r0, r4
 800278a:	f7ff ff48 	bl	800261e <_WriteNoCheck>
  }
  //
  // Finish up.
  //
  return Status;
}
 800278e:	4628      	mov	r0, r5
 8002790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff ff69 	bl	800266a <_WriteBlocking>
 8002798:	4605      	mov	r5, r0
    break;
 800279a:	e7f8      	b.n	800278e <SEGGER_RTT_WriteNoLock+0x56>
  switch (pRing->Flags) {
 800279c:	2500      	movs	r5, #0
  return Status;
 800279e:	e7f6      	b.n	800278e <SEGGER_RTT_WriteNoLock+0x56>
 80027a0:	20001308 	.word	0x20001308

080027a4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	4604      	mov	r4, r0
 80027a8:	460d      	mov	r5, r1
 80027aa:	4616      	mov	r6, r2
  unsigned Status;

  INIT();
 80027ac:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <SEGGER_RTT_Write+0x34>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b53      	cmp	r3, #83	@ 0x53
 80027b4:	d10d      	bne.n	80027d2 <SEGGER_RTT_Write+0x2e>
  SEGGER_RTT_LOCK();
 80027b6:	f3ef 8711 	mrs	r7, BASEPRI
 80027ba:	f04f 0120 	mov.w	r1, #32
 80027be:	f381 8811 	msr	BASEPRI, r1
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80027c2:	4632      	mov	r2, r6
 80027c4:	4629      	mov	r1, r5
 80027c6:	4620      	mov	r0, r4
 80027c8:	f7ff ffb6 	bl	8002738 <SEGGER_RTT_WriteNoLock>
  SEGGER_RTT_UNLOCK();
 80027cc:	f387 8811 	msr	BASEPRI, r7
  return Status;
}
 80027d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  INIT();
 80027d2:	f7ff ff7b 	bl	80026cc <_DoInit>
 80027d6:	e7ee      	b.n	80027b6 <SEGGER_RTT_Write+0x12>
 80027d8:	20001308 	.word	0x20001308

080027dc <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 80027dc:	b538      	push	{r3, r4, r5, lr}
 80027de:	4605      	mov	r5, r0
 80027e0:	460c      	mov	r4, r1
  unsigned Len;

  Len = STRLEN(s);
 80027e2:	4608      	mov	r0, r1
 80027e4:	f7fd fd8a 	bl	80002fc <strlen>
 80027e8:	4602      	mov	r2, r0
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 80027ea:	4621      	mov	r1, r4
 80027ec:	4628      	mov	r0, r5
 80027ee:	f7ff ffd9 	bl	80027a4 <SEGGER_RTT_Write>
}
 80027f2:	bd38      	pop	{r3, r4, r5, pc}

080027f4 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 80027f4:	b508      	push	{r3, lr}
  _DoInit();
 80027f6:	f7ff ff69 	bl	80026cc <_DoInit>
}
 80027fa:	bd08      	pop	{r3, pc}

080027fc <dma_deinit>:
    \retval     none
*/
void dma_deinit(dma_channel_enum channelx)
{
    /* disable DMA a channel */
    DMA_CHCTL(channelx) &= ~DMA_CHXCTL_CHEN;
 80027fc:	2314      	movs	r3, #20
 80027fe:	4343      	muls	r3, r0
 8002800:	490a      	ldr	r1, [pc, #40]	@ (800282c <dma_deinit+0x30>)
 8002802:	585a      	ldr	r2, [r3, r1]
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	505a      	str	r2, [r3, r1]
    /* reset DMA channel registers */
    DMA_CHCTL(channelx) = DMA_CHCTL_RESET_VALUE;
 800280a:	2200      	movs	r2, #0
 800280c:	505a      	str	r2, [r3, r1]
    DMA_CHCNT(channelx) = DMA_CHCNT_RESET_VALUE;
 800280e:	3104      	adds	r1, #4
    DMA_CHPADDR(channelx) = DMA_CHPADDR_RESET_VALUE;
    DMA_CHMADDR(channelx) = DMA_CHMADDR_RESET_VALUE;
    DMA_INTC |= DMA_FLAG_ADD(DMA_CHINTF_RESET_VALUE, channelx);
 8002810:	0080      	lsls	r0, r0, #2
    DMA_CHCNT(channelx) = DMA_CHCNT_RESET_VALUE;
 8002812:	505a      	str	r2, [r3, r1]
    DMA_CHPADDR(channelx) = DMA_CHPADDR_RESET_VALUE;
 8002814:	3104      	adds	r1, #4
 8002816:	505a      	str	r2, [r3, r1]
    DMA_CHMADDR(channelx) = DMA_CHMADDR_RESET_VALUE;
 8002818:	3104      	adds	r1, #4
 800281a:	505a      	str	r2, [r3, r1]
    DMA_INTC |= DMA_FLAG_ADD(DMA_CHINTF_RESET_VALUE, channelx);
 800281c:	4a04      	ldr	r2, [pc, #16]	@ (8002830 <dma_deinit+0x34>)
 800281e:	230f      	movs	r3, #15
 8002820:	6851      	ldr	r1, [r2, #4]
 8002822:	4083      	lsls	r3, r0
 8002824:	430b      	orrs	r3, r1
 8002826:	6053      	str	r3, [r2, #4]
}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40020008 	.word	0x40020008
 8002830:	40020000 	.word	0x40020000

08002834 <dma_struct_para_init>:
    \retval     none
*/
void dma_struct_para_init(dma_parameter_struct *init_struct)
{
    /* set the DMA struct with the default values */
    init_struct->periph_addr  = 0U;
 8002834:	2300      	movs	r3, #0
    init_struct->periph_width = 0U;
 8002836:	e9c0 3300 	strd	r3, r3, [r0]
    init_struct->periph_inc   = (uint8_t)DMA_PERIPH_INCREASE_DISABLE;
    init_struct->memory_addr  = 0U;
    init_struct->memory_width = 0U;
 800283a:	e9c0 3303 	strd	r3, r3, [r0, #12]
    init_struct->periph_inc   = (uint8_t)DMA_PERIPH_INCREASE_DISABLE;
 800283e:	7203      	strb	r3, [r0, #8]
    init_struct->memory_inc   = (uint8_t)DMA_MEMORY_INCREASE_DISABLE;
    init_struct->number       = 0U;
 8002840:	6183      	str	r3, [r0, #24]
    init_struct->memory_inc   = (uint8_t)DMA_MEMORY_INCREASE_DISABLE;
 8002842:	8283      	strh	r3, [r0, #20]
    init_struct->direction    = (uint8_t)DMA_PERIPHERAL_TO_MEMORY;
    init_struct->priority     = (uint32_t)DMA_PRIORITY_LOW;
 8002844:	61c3      	str	r3, [r0, #28]
}
 8002846:	4770      	bx	lr

08002848 <dma_circulation_disable>:
    \param[out] none
    \retval     none
*/
void dma_circulation_disable(dma_channel_enum channelx)
{
    DMA_CHCTL(channelx) &= ~DMA_CHXCTL_CMEN;
 8002848:	2314      	movs	r3, #20
 800284a:	4a03      	ldr	r2, [pc, #12]	@ (8002858 <dma_circulation_disable+0x10>)
 800284c:	4358      	muls	r0, r3
 800284e:	5883      	ldr	r3, [r0, r2]
 8002850:	f023 0320 	bic.w	r3, r3, #32
 8002854:	5083      	str	r3, [r0, r2]
}
 8002856:	4770      	bx	lr
 8002858:	40020008 	.word	0x40020008

0800285c <dma_memory_to_memory_disable>:
    \param[out] none
    \retval     none
*/
void dma_memory_to_memory_disable(dma_channel_enum channelx)
{
    DMA_CHCTL(channelx) &= ~DMA_CHXCTL_M2M;
 800285c:	2314      	movs	r3, #20
 800285e:	4a03      	ldr	r2, [pc, #12]	@ (800286c <dma_memory_to_memory_disable+0x10>)
 8002860:	4358      	muls	r0, r3
 8002862:	5883      	ldr	r3, [r0, r2]
 8002864:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002868:	5083      	str	r3, [r0, r2]
}
 800286a:	4770      	bx	lr
 800286c:	40020008 	.word	0x40020008

08002870 <dma_channel_enable>:
    \param[out] none
    \retval     none
*/
void dma_channel_enable(dma_channel_enum channelx)
{
    DMA_CHCTL(channelx) |= DMA_CHXCTL_CHEN;
 8002870:	2314      	movs	r3, #20
 8002872:	4a03      	ldr	r2, [pc, #12]	@ (8002880 <dma_channel_enable+0x10>)
 8002874:	4358      	muls	r0, r3
 8002876:	5883      	ldr	r3, [r0, r2]
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	5083      	str	r3, [r0, r2]
}
 800287e:	4770      	bx	lr
 8002880:	40020008 	.word	0x40020008

08002884 <dma_channel_disable>:
    \param[out] none
    \retval     none
*/
void dma_channel_disable(dma_channel_enum channelx)
{
    DMA_CHCTL(channelx) &= ~DMA_CHXCTL_CHEN;
 8002884:	2314      	movs	r3, #20
 8002886:	4a03      	ldr	r2, [pc, #12]	@ (8002894 <dma_channel_disable+0x10>)
 8002888:	4358      	muls	r0, r3
 800288a:	5883      	ldr	r3, [r0, r2]
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	5083      	str	r3, [r0, r2]
}
 8002892:	4770      	bx	lr
 8002894:	40020008 	.word	0x40020008

08002898 <dma_init>:
{
 8002898:	b538      	push	{r3, r4, r5, lr}
 800289a:	4604      	mov	r4, r0
    dma_channel_disable(channelx);
 800289c:	f7ff fff2 	bl	8002884 <dma_channel_disable>
    DMA_CHPADDR(channelx) = init_struct->periph_addr;
 80028a0:	2314      	movs	r3, #20
 80028a2:	fb03 f004 	mul.w	r0, r3, r4
 80028a6:	4b18      	ldr	r3, [pc, #96]	@ (8002908 <dma_init+0x70>)
 80028a8:	680a      	ldr	r2, [r1, #0]
 80028aa:	50c2      	str	r2, [r0, r3]
    DMA_CHMADDR(channelx) = init_struct->memory_addr;
 80028ac:	3304      	adds	r3, #4
 80028ae:	68ca      	ldr	r2, [r1, #12]
 80028b0:	50c2      	str	r2, [r0, r3]
    DMA_CHCNT(channelx) = (init_struct->number & DMA_CHANNEL_CNT_MASK);
 80028b2:	3b08      	subs	r3, #8
 80028b4:	8b0a      	ldrh	r2, [r1, #24]
 80028b6:	50c2      	str	r2, [r0, r3]
    ctl = DMA_CHCTL(channelx);
 80028b8:	3b04      	subs	r3, #4
    ctl |= (init_struct->periph_width | init_struct->memory_width | init_struct->priority);
 80028ba:	690d      	ldr	r5, [r1, #16]
 80028bc:	684a      	ldr	r2, [r1, #4]
    ctl = DMA_CHCTL(channelx);
 80028be:	58c4      	ldr	r4, [r0, r3]
    ctl |= (init_struct->periph_width | init_struct->memory_width | init_struct->priority);
 80028c0:	432a      	orrs	r2, r5
 80028c2:	69cd      	ldr	r5, [r1, #28]
    ctl &= ~(DMA_CHXCTL_PWIDTH | DMA_CHXCTL_MWIDTH | DMA_CHXCTL_PRIO);
 80028c4:	f424 547c 	bic.w	r4, r4, #16128	@ 0x3f00
    ctl |= (init_struct->periph_width | init_struct->memory_width | init_struct->priority);
 80028c8:	432a      	orrs	r2, r5
 80028ca:	4322      	orrs	r2, r4
    DMA_CHCTL(channelx) = ctl;
 80028cc:	50c2      	str	r2, [r0, r3]
    if(DMA_PERIPH_INCREASE_ENABLE == init_struct->periph_inc) {
 80028ce:	7a0a      	ldrb	r2, [r1, #8]
 80028d0:	2a01      	cmp	r2, #1
        DMA_CHCTL(channelx) |= DMA_CHXCTL_PNAGA;
 80028d2:	58c2      	ldr	r2, [r0, r3]
 80028d4:	bf0c      	ite	eq
 80028d6:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
        DMA_CHCTL(channelx) &= ~DMA_CHXCTL_PNAGA;
 80028da:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 80028de:	50c2      	str	r2, [r0, r3]
    if(DMA_MEMORY_INCREASE_ENABLE == init_struct->memory_inc) {
 80028e0:	7d0a      	ldrb	r2, [r1, #20]
 80028e2:	2a01      	cmp	r2, #1
        DMA_CHCTL(channelx) |= DMA_CHXCTL_MNAGA;
 80028e4:	58c2      	ldr	r2, [r0, r3]
 80028e6:	bf0c      	ite	eq
 80028e8:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
        DMA_CHCTL(channelx) &= ~DMA_CHXCTL_MNAGA;
 80028ec:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 80028f0:	50c2      	str	r2, [r0, r3]
    if(DMA_PERIPHERAL_TO_MEMORY == init_struct->direction) {
 80028f2:	7d4a      	ldrb	r2, [r1, #21]
 80028f4:	b922      	cbnz	r2, 8002900 <dma_init+0x68>
        DMA_CHCTL(channelx) &= ~DMA_CHXCTL_DIR;
 80028f6:	58c2      	ldr	r2, [r0, r3]
 80028f8:	f022 0210 	bic.w	r2, r2, #16
        DMA_CHCTL(channelx) |= DMA_CHXCTL_DIR;
 80028fc:	50c2      	str	r2, [r0, r3]
}
 80028fe:	bd38      	pop	{r3, r4, r5, pc}
        DMA_CHCTL(channelx) |= DMA_CHXCTL_DIR;
 8002900:	58c2      	ldr	r2, [r0, r3]
 8002902:	f042 0210 	orr.w	r2, r2, #16
 8002906:	e7f9      	b.n	80028fc <dma_init+0x64>
 8002908:	40020010 	.word	0x40020010

0800290c <dma_memory_address_config>:
    \param[out] none
    \retval     none
*/
void dma_memory_address_config(dma_channel_enum channelx, uint32_t address)
{
    DMA_CHMADDR(channelx) = address;
 800290c:	2314      	movs	r3, #20
 800290e:	4358      	muls	r0, r3
 8002910:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002914:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8002918:	50c1      	str	r1, [r0, r3]
}
 800291a:	4770      	bx	lr

0800291c <dma_transfer_number_config>:
    \param[out] none
    \retval     none
*/
void dma_transfer_number_config(dma_channel_enum channelx, uint32_t number)
{
    DMA_CHCNT(channelx) = (number & DMA_CHANNEL_CNT_MASK);
 800291c:	2314      	movs	r3, #20
 800291e:	4358      	muls	r0, r3
 8002920:	4b01      	ldr	r3, [pc, #4]	@ (8002928 <dma_transfer_number_config+0xc>)
 8002922:	b289      	uxth	r1, r1
 8002924:	50c1      	str	r1, [r0, r3]
}
 8002926:	4770      	bx	lr
 8002928:	4002000c 	.word	0x4002000c

0800292c <dma_transfer_number_get>:
    \param[out] none
    \retval     the number of remaining data to be transferred by the DMA
*/
uint32_t dma_transfer_number_get(dma_channel_enum channelx)
{
    return (uint32_t)DMA_CHCNT(channelx);
 800292c:	2314      	movs	r3, #20
 800292e:	4358      	muls	r0, r3
 8002930:	4b01      	ldr	r3, [pc, #4]	@ (8002938 <dma_transfer_number_get+0xc>)
 8002932:	58c0      	ldr	r0, [r0, r3]
}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	4002000c 	.word	0x4002000c

0800293c <dma_flag_get>:
*/
FlagStatus dma_flag_get(dma_channel_enum channelx, uint32_t flag)
{
    FlagStatus reval;

    if(RESET != (DMA_INTF & DMA_FLAG_ADD(flag, channelx))) {
 800293c:	4b04      	ldr	r3, [pc, #16]	@ (8002950 <dma_flag_get+0x14>)
 800293e:	0080      	lsls	r0, r0, #2
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4081      	lsls	r1, r0
 8002944:	4219      	tst	r1, r3
    } else {
        reval = RESET;
    }

    return reval;
}
 8002946:	bf14      	ite	ne
 8002948:	2001      	movne	r0, #1
 800294a:	2000      	moveq	r0, #0
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40020000 	.word	0x40020000

08002954 <dma_flag_clear>:
    \param[out] none
    \retval     none
*/
void dma_flag_clear(dma_channel_enum channelx, uint32_t flag)
{
    DMA_INTC |= DMA_FLAG_ADD(flag, channelx);
 8002954:	4b03      	ldr	r3, [pc, #12]	@ (8002964 <dma_flag_clear+0x10>)
 8002956:	0080      	lsls	r0, r0, #2
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	4081      	lsls	r1, r0
 800295c:	4311      	orrs	r1, r2
 800295e:	6059      	str	r1, [r3, #4]
}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40020000 	.word	0x40020000

08002968 <gpio_mode_set>:
      \arg        GPIO_PIN_x(x=0..15), GPIO_PIN_ALL
    \param[out] none
    \retval     none
*/
void gpio_mode_set(uint32_t gpio_periph, uint32_t mode, uint32_t pull_up_down, uint32_t pin)
{
 8002968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint16_t i;
    uint32_t ctl, pupd;

    ctl = GPIO_CTL(gpio_periph);
 800296c:	6805      	ldr	r5, [r0, #0]
    pupd = GPIO_PUD(gpio_periph);
 800296e:	68c4      	ldr	r4, [r0, #12]
 8002970:	2600      	movs	r6, #0

    for(i = 0U; i < 16U; i++) {
        if((1U << i) & pin) {
 8002972:	f04f 0e01 	mov.w	lr, #1
            /* clear the specified pin mode bits */
            ctl &= ~GPIO_MODE_MASK(i);
 8002976:	f04f 0803 	mov.w	r8, #3
        if((1U << i) & pin) {
 800297a:	fa0e f706 	lsl.w	r7, lr, r6
 800297e:	421f      	tst	r7, r3
 8002980:	d00d      	beq.n	800299e <gpio_mode_set+0x36>
            ctl &= ~GPIO_MODE_MASK(i);
 8002982:	0077      	lsls	r7, r6, #1
 8002984:	fa08 fc07 	lsl.w	ip, r8, r7
            /* set the specified pin mode bits */
            ctl |= GPIO_MODE_SET(i, mode);
 8002988:	fa01 f907 	lsl.w	r9, r1, r7
            ctl &= ~GPIO_MODE_MASK(i);
 800298c:	ea25 050c 	bic.w	r5, r5, ip

            /* clear the specified pin pupd bits */
            pupd &= ~GPIO_PUPD_MASK(i);
 8002990:	ea24 040c 	bic.w	r4, r4, ip
            /* set the specified pin pupd bits */
            pupd |= GPIO_PUPD_SET(i, pull_up_down);
 8002994:	fa02 f707 	lsl.w	r7, r2, r7
            ctl |= GPIO_MODE_SET(i, mode);
 8002998:	ea49 0505 	orr.w	r5, r9, r5
            pupd |= GPIO_PUPD_SET(i, pull_up_down);
 800299c:	433c      	orrs	r4, r7
    for(i = 0U; i < 16U; i++) {
 800299e:	3601      	adds	r6, #1
 80029a0:	2e10      	cmp	r6, #16
 80029a2:	d1ea      	bne.n	800297a <gpio_mode_set+0x12>
        }
    }

    GPIO_CTL(gpio_periph) = ctl;
 80029a4:	6005      	str	r5, [r0, #0]
    GPIO_PUD(gpio_periph) = pupd;
 80029a6:	60c4      	str	r4, [r0, #12]
}
 80029a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080029ac <gpio_output_options_set>:
void gpio_output_options_set(uint32_t gpio_periph, uint8_t otype, uint32_t speed, uint32_t pin)
{
    uint16_t i;
    uint32_t ospeed0, ospeed1;

    if(GPIO_OTYPE_OD == otype) {
 80029ac:	2901      	cmp	r1, #1
        GPIO_OMODE(gpio_periph) |= (uint32_t)pin;
 80029ae:	6841      	ldr	r1, [r0, #4]
{
 80029b0:	b5f0      	push	{r4, r5, r6, r7, lr}
        GPIO_OMODE(gpio_periph) |= (uint32_t)pin;
 80029b2:	bf0c      	ite	eq
 80029b4:	4319      	orreq	r1, r3
    } else {
        GPIO_OMODE(gpio_periph) &= (uint32_t)(~pin);
 80029b6:	4399      	bicne	r1, r3
    }

    /* get the specified pin output speed bits value */
    ospeed0 = GPIO_OSPD0(gpio_periph);

    if(GPIO_OSPEED_MAX == speed) {
 80029b8:	f64f 74ff 	movw	r4, #65535	@ 0xffff
        GPIO_OMODE(gpio_periph) &= (uint32_t)(~pin);
 80029bc:	6041      	str	r1, [r0, #4]
    if(GPIO_OSPEED_MAX == speed) {
 80029be:	42a2      	cmp	r2, r4
    ospeed0 = GPIO_OSPD0(gpio_periph);
 80029c0:	6881      	ldr	r1, [r0, #8]
    if(GPIO_OSPEED_MAX == speed) {
 80029c2:	d115      	bne.n	80029f0 <gpio_output_options_set+0x44>
        ospeed1 = GPIO_OSPD1(gpio_periph);
 80029c4:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80029c6:	2200      	movs	r2, #0

        for(i = 0U; i < 16U; i++) {
            if((1U << i) & pin) {
 80029c8:	2701      	movs	r7, #1
                /* enable very high output speed function of the pin when the corresponding OSPDy(y=0..15)
                   is "11" (output max speed 50MHz) */
                ospeed0 |= GPIO_OSPEED_SET(i, 0x03);
 80029ca:	f04f 0c03 	mov.w	ip, #3
            if((1U << i) & pin) {
 80029ce:	fa07 f602 	lsl.w	r6, r7, r2
 80029d2:	421e      	tst	r6, r3
                ospeed0 |= GPIO_OSPEED_SET(i, 0x03);
 80029d4:	bf1c      	itt	ne
 80029d6:	0055      	lslne	r5, r2, #1
 80029d8:	fa0c f505 	lslne.w	r5, ip, r5
        for(i = 0U; i < 16U; i++) {
 80029dc:	f102 0201 	add.w	r2, r2, #1
                ospeed0 |= GPIO_OSPEED_SET(i, 0x03);
 80029e0:	bf1c      	itt	ne
 80029e2:	4329      	orrne	r1, r5
                ospeed1 |= (1U << i);
 80029e4:	4334      	orrne	r4, r6
        for(i = 0U; i < 16U; i++) {
 80029e6:	2a10      	cmp	r2, #16
 80029e8:	d1f1      	bne.n	80029ce <gpio_output_options_set+0x22>
            }
        }
        GPIO_OSPD0(gpio_periph) = ospeed0;
 80029ea:	6081      	str	r1, [r0, #8]
        GPIO_OSPD1(gpio_periph) = ospeed1;
 80029ec:	63c4      	str	r4, [r0, #60]	@ 0x3c
                ospeed0 |= GPIO_OSPEED_SET(i, speed);
            }
        }
        GPIO_OSPD0(gpio_periph) = ospeed0;
    }
}
 80029ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f0:	2400      	movs	r4, #0
            if((1U << i) & pin) {
 80029f2:	2701      	movs	r7, #1
                ospeed0 &= ~GPIO_OSPEED_MASK(i);
 80029f4:	f04f 0c03 	mov.w	ip, #3
            if((1U << i) & pin) {
 80029f8:	fa07 f504 	lsl.w	r5, r7, r4
 80029fc:	421d      	tst	r5, r3
 80029fe:	d007      	beq.n	8002a10 <gpio_output_options_set+0x64>
                ospeed0 &= ~GPIO_OSPEED_MASK(i);
 8002a00:	0065      	lsls	r5, r4, #1
 8002a02:	fa0c f605 	lsl.w	r6, ip, r5
 8002a06:	ea21 0106 	bic.w	r1, r1, r6
                ospeed0 |= GPIO_OSPEED_SET(i, speed);
 8002a0a:	fa02 f505 	lsl.w	r5, r2, r5
 8002a0e:	4329      	orrs	r1, r5
        for(i = 0U; i < 16U; i++) {
 8002a10:	3401      	adds	r4, #1
 8002a12:	2c10      	cmp	r4, #16
 8002a14:	d1f0      	bne.n	80029f8 <gpio_output_options_set+0x4c>
        GPIO_OSPD0(gpio_periph) = ospeed0;
 8002a16:	6081      	str	r1, [r0, #8]
}
 8002a18:	e7e9      	b.n	80029ee <gpio_output_options_set+0x42>

08002a1a <gpio_af_set>:
      \arg        GPIO_PIN_x(x=0..15), GPIO_PIN_ALL
    \param[out] none
    \retval     none
*/
void gpio_af_set(uint32_t gpio_periph, uint32_t alt_func_num, uint32_t pin)
{
 8002a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t i;
    uint32_t afrl, afrh;

    afrl = GPIO_AFSEL0(gpio_periph);
 8002a1c:	6a06      	ldr	r6, [r0, #32]
    afrh = GPIO_AFSEL1(gpio_periph);
 8002a1e:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8002a20:	2300      	movs	r3, #0

    for(i = 0U; i < 8U; i++) {
        if((1U << i) & pin) {
 8002a22:	f04f 0c01 	mov.w	ip, #1
            /* clear the specified pin alternate function bits */
            afrl &= ~GPIO_AFR_MASK(i);
 8002a26:	f04f 0e0f 	mov.w	lr, #15
        if((1U << i) & pin) {
 8002a2a:	fa0c f403 	lsl.w	r4, ip, r3
 8002a2e:	4214      	tst	r4, r2
 8002a30:	d007      	beq.n	8002a42 <gpio_af_set+0x28>
            afrl &= ~GPIO_AFR_MASK(i);
 8002a32:	009c      	lsls	r4, r3, #2
 8002a34:	fa0e f704 	lsl.w	r7, lr, r4
 8002a38:	ea26 0607 	bic.w	r6, r6, r7
            afrl |= GPIO_AFR_SET(i, alt_func_num);
 8002a3c:	fa01 f404 	lsl.w	r4, r1, r4
 8002a40:	4326      	orrs	r6, r4
    for(i = 0U; i < 8U; i++) {
 8002a42:	3301      	adds	r3, #1
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d1f0      	bne.n	8002a2a <gpio_af_set+0x10>
 8002a48:	2300      	movs	r3, #0
        }
    }

    for(i = 8U; i < 16U; i++) {
        if((1U << i) & pin) {
 8002a4a:	f04f 0c01 	mov.w	ip, #1
            /* clear the specified pin alternate function bits */
            afrh &= ~GPIO_AFR_MASK(i - 8U);
 8002a4e:	f04f 0e0f 	mov.w	lr, #15
        if((1U << i) & pin) {
 8002a52:	f103 0408 	add.w	r4, r3, #8
 8002a56:	fa0c f404 	lsl.w	r4, ip, r4
 8002a5a:	4214      	tst	r4, r2
 8002a5c:	d007      	beq.n	8002a6e <gpio_af_set+0x54>
            afrh &= ~GPIO_AFR_MASK(i - 8U);
 8002a5e:	009c      	lsls	r4, r3, #2
 8002a60:	fa0e f704 	lsl.w	r7, lr, r4
 8002a64:	ea25 0507 	bic.w	r5, r5, r7
            afrh |= GPIO_AFR_SET(i - 8U, alt_func_num);
 8002a68:	fa01 f404 	lsl.w	r4, r1, r4
 8002a6c:	4325      	orrs	r5, r4
    for(i = 8U; i < 16U; i++) {
 8002a6e:	3301      	adds	r3, #1
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d1ee      	bne.n	8002a52 <gpio_af_set+0x38>
        }
    }

    GPIO_AFSEL0(gpio_periph) = afrl;
 8002a74:	6206      	str	r6, [r0, #32]
    GPIO_AFSEL1(gpio_periph) = afrh;
 8002a76:	6245      	str	r5, [r0, #36]	@ 0x24
}
 8002a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a7c <nvic_irq_enable>:
    \retval     none
*/
void nvic_irq_enable(uint8_t nvic_irq,
                     uint8_t nvic_irq_pre_priority,
                     uint8_t nvic_irq_sub_priority)
{
 8002a7c:	b510      	push	{r4, lr}
    uint32_t temp_priority = 0x00U, temp_pre = 0x00U, temp_sub = 0x00U;

    /* use the priority group value to get the temp_pre and the temp_sub */
    switch((SCB->AIRCR) & (uint32_t)0x700U) {
 8002a7e:	4c1d      	ldr	r4, [pc, #116]	@ (8002af4 <nvic_irq_enable+0x78>)
 8002a80:	68e3      	ldr	r3, [r4, #12]
 8002a82:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a86:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002a8a:	d008      	beq.n	8002a9e <nvic_irq_enable+0x22>
 8002a8c:	d820      	bhi.n	8002ad0 <nvic_irq_enable+0x54>
 8002a8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a92:	d026      	beq.n	8002ae2 <nvic_irq_enable+0x66>
 8002a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a98:	d026      	beq.n	8002ae8 <nvic_irq_enable+0x6c>
    SCB->AIRCR = NVIC_AIRCR_VECTKEY_MASK | nvic_prigroup;
 8002a9a:	4b17      	ldr	r3, [pc, #92]	@ (8002af8 <nvic_irq_enable+0x7c>)
 8002a9c:	60e3      	str	r3, [r4, #12]
        temp_pre = 1U;
        temp_sub = 0x3U;
        break;
    case NVIC_PRIGROUP_PRE2_SUB2:
        temp_pre = 2U;
        temp_sub = 0x2U;
 8002a9e:	2302      	movs	r3, #2
        temp_pre = 2U;
 8002aa0:	461c      	mov	r4, r3
        temp_sub = 0x2U;
        break;
    }

    /* get the temp_priority to fill the NVIC->IP register */
    temp_priority = (uint32_t)nvic_irq_pre_priority << (0x4U - temp_pre);
 8002aa2:	f1c4 0404 	rsb	r4, r4, #4
 8002aa6:	40a1      	lsls	r1, r4
    temp_priority |= nvic_irq_sub_priority & (0x0FU >> (0x4U - temp_sub));
 8002aa8:	f1c3 0404 	rsb	r4, r3, #4
 8002aac:	230f      	movs	r3, #15
 8002aae:	40e3      	lsrs	r3, r4
 8002ab0:	4013      	ands	r3, r2
    temp_priority = temp_priority << 0x04U;
    NVIC->IP[nvic_irq] = (uint8_t)temp_priority;
 8002ab2:	4a12      	ldr	r2, [pc, #72]	@ (8002afc <nvic_irq_enable+0x80>)
    temp_priority |= nvic_irq_sub_priority & (0x0FU >> (0x4U - temp_sub));
 8002ab4:	430b      	orrs	r3, r1
    NVIC->IP[nvic_irq] = (uint8_t)temp_priority;
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1811      	adds	r1, r2, r0
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f881 3300 	strb.w	r3, [r1, #768]	@ 0x300

    /* enable the selected IRQ */
    NVIC->ISER[nvic_irq >> 0x05U] = (uint32_t)0x01U << (nvic_irq & (uint8_t)0x1FU);
 8002ac0:	0941      	lsrs	r1, r0, #5
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f000 001f 	and.w	r0, r0, #31
 8002ac8:	4083      	lsls	r3, r0
 8002aca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8002ace:	bd10      	pop	{r4, pc}
    switch((SCB->AIRCR) & (uint32_t)0x700U) {
 8002ad0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002ad4:	d00b      	beq.n	8002aee <nvic_irq_enable+0x72>
 8002ad6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ada:	d1de      	bne.n	8002a9a <nvic_irq_enable+0x1e>
        temp_sub = 0x4U;
 8002adc:	2304      	movs	r3, #4
        temp_pre = 0U;
 8002ade:	2400      	movs	r4, #0
 8002ae0:	e7df      	b.n	8002aa2 <nvic_irq_enable+0x26>
        temp_sub = 0x0U;
 8002ae2:	2300      	movs	r3, #0
        temp_pre = 4U;
 8002ae4:	2404      	movs	r4, #4
 8002ae6:	e7dc      	b.n	8002aa2 <nvic_irq_enable+0x26>
        temp_sub = 0x1U;
 8002ae8:	2301      	movs	r3, #1
        temp_pre = 3U;
 8002aea:	2403      	movs	r4, #3
 8002aec:	e7d9      	b.n	8002aa2 <nvic_irq_enable+0x26>
    switch((SCB->AIRCR) & (uint32_t)0x700U) {
 8002aee:	2303      	movs	r3, #3
 8002af0:	2401      	movs	r4, #1
 8002af2:	e7d6      	b.n	8002aa2 <nvic_irq_enable+0x26>
 8002af4:	e000ed00 	.word	0xe000ed00
 8002af8:	05fa0500 	.word	0x05fa0500
 8002afc:	e000e100 	.word	0xe000e100

08002b00 <nvic_vector_table_set>:
    \param[out] none
    \retval     none
*/
void nvic_vector_table_set(uint32_t nvic_vict_tab, uint32_t offset)
{
    SCB->VTOR = nvic_vict_tab | (offset & NVIC_VECTTAB_OFFSET_MASK);
 8002b00:	f021 4160 	bic.w	r1, r1, #3758096384	@ 0xe0000000
 8002b04:	4b03      	ldr	r3, [pc, #12]	@ (8002b14 <nvic_vector_table_set+0x14>)
 8002b06:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 8002b0a:	4301      	orrs	r1, r0
 8002b0c:	6099      	str	r1, [r3, #8]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
    __ASM volatile("dsb");
 8002b0e:	f3bf 8f4f 	dsb	sy
    __DSB();
}
 8002b12:	4770      	bx	lr
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <rcu_periph_clock_enable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_clock_enable(rcu_periph_enum periph)
{
    RCU_REG_VAL(periph) |= BIT(RCU_BIT_POS(periph));
 8002b18:	0983      	lsrs	r3, r0, #6
 8002b1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b1e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002b22:	f000 001f 	and.w	r0, r0, #31
 8002b26:	6819      	ldr	r1, [r3, #0]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4082      	lsls	r2, r0
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]
}
 8002b30:	4770      	bx	lr

08002b32 <rcu_periph_clock_disable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_clock_disable(rcu_periph_enum periph)
{
    RCU_REG_VAL(periph) &= ~BIT(RCU_BIT_POS(periph));
 8002b32:	0983      	lsrs	r3, r0, #6
 8002b34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b38:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002b3c:	f000 001f 	and.w	r0, r0, #31
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	2101      	movs	r1, #1
 8002b44:	4081      	lsls	r1, r0
 8002b46:	ea22 0201 	bic.w	r2, r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
}
 8002b4c:	4770      	bx	lr

08002b4e <rcu_periph_reset_enable>:
      \arg        RCU_CECRST: reset CEC (only for GD32F350)
      \arg        RCU_CTCRST: reset CTC
    \param[out] none
    \retval     none
*/
void rcu_periph_reset_enable(rcu_periph_reset_enum periph_reset)
 8002b4e:	f7ff bfe3 	b.w	8002b18 <rcu_periph_clock_enable>

08002b52 <rcu_periph_reset_disable>:
      \arg        RCU_CECRST: reset CEC (only for GD32F350)
      \arg        RCU_CTCRST: reset CTC
    \param[out] none
    \retval     none
*/
void rcu_periph_reset_disable(rcu_periph_reset_enum periph_reset)
 8002b52:	f7ff bfee 	b.w	8002b32 <rcu_periph_clock_disable>
	...

08002b58 <rcu_clock_freq_get>:
      \arg        CK_USART: USART clock frequency
    \param[out] none
    \retval     clock frequency of system, AHB, APB1, APB2, ADC, CEC or USRAT
*/
uint32_t rcu_clock_freq_get(rcu_clock_freq_enum clock)
{
 8002b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t sws = 0U, adcps = 0U, adcps2 = 0U, ck_freq = 0U;
    uint32_t cksys_freq = 0U, ahb_freq = 0U, apb1_freq = 0U, apb2_freq = 0U;
    uint32_t adc_freq = 0U, cec_freq = 0U, usart_freq = 0U;
    uint32_t pllmf = 0U, pllmf4 = 0U, pllmf5 = 0U, pllsel = 0U, pllpresel = 0U, prediv = 0U, idx = 0U, clk_exp = 0U;
    /* exponent of AHB, APB1 and APB2 clock divider */
    const uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8002b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8002cd0 <rcu_clock_freq_get+0x178>)
{
 8002b5c:	b089      	sub	sp, #36	@ 0x24
 8002b5e:	4604      	mov	r4, r0
    const uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8002b60:	ad04      	add	r5, sp, #16
 8002b62:	f103 0610 	add.w	r6, r3, #16
 8002b66:	461f      	mov	r7, r3
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	462a      	mov	r2, r5
 8002b6e:	c203      	stmia	r2!, {r0, r1}
 8002b70:	3308      	adds	r3, #8
 8002b72:	42b3      	cmp	r3, r6
 8002b74:	4615      	mov	r5, r2
 8002b76:	d1f7      	bne.n	8002b68 <rcu_clock_freq_get+0x10>
    const uint8_t apb1_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 8002b78:	6938      	ldr	r0, [r7, #16]
 8002b7a:	6871      	ldr	r1, [r6, #4]
 8002b7c:	466b      	mov	r3, sp
 8002b7e:	c303      	stmia	r3!, {r0, r1}
    const uint8_t apb2_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 8002b80:	c303      	stmia	r3!, {r0, r1}

    sws = GET_BITS(RCU_CFG0, 2, 3);
 8002b82:	4b54      	ldr	r3, [pc, #336]	@ (8002cd4 <rcu_clock_freq_get+0x17c>)
 8002b84:	685a      	ldr	r2, [r3, #4]
    switch(sws) {
 8002b86:	f002 020c 	and.w	r2, r2, #12
 8002b8a:	2a08      	cmp	r2, #8
 8002b8c:	d144      	bne.n	8002c18 <rcu_clock_freq_get+0xc0>
        cksys_freq = HXTAL_VALUE;
        break;
    /* PLL is selected as CK_SYS */
    case SEL_PLL:
        /* get the value of PLLMF[3:0] */
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 8002b8e:	6858      	ldr	r0, [r3, #4]
        pllmf4 = GET_BITS(RCU_CFG0, 27, 27);
 8002b90:	6859      	ldr	r1, [r3, #4]
        pllmf5 = GET_BITS(RCU_CFG1, 31, 31);
 8002b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        /* high 16 bits */
        /* high 16 bits */
        if((0U == pllmf4) && (0U == pllmf5)) {
 8002b94:	010f      	lsls	r7, r1, #4
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 8002b96:	f3c0 4083 	ubfx	r0, r0, #18, #4
        pllmf5 = GET_BITS(RCU_CFG1, 31, 31);
 8002b9a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
        if((0U == pllmf4) && (0U == pllmf5)) {
 8002b9e:	d434      	bmi.n	8002c0a <rcu_clock_freq_get+0xb2>
 8002ba0:	2a00      	cmp	r2, #0
 8002ba2:	d130      	bne.n	8002c06 <rcu_clock_freq_get+0xae>
            pllmf += 2U;
 8002ba4:	3002      	adds	r0, #2
        if((1U == pllmf4) && (1U == pllmf5)) {
            pllmf += 49U;
        }

        /* PLL clock source selection, HXTAL or IRC48M or IRC8M/2 */
        pllsel = GET_BITS(RCU_CFG0, 16, 16);
 8002ba6:	685a      	ldr	r2, [r3, #4]
        pllpresel = GET_BITS(RCU_CFG1, 30, 30);
 8002ba8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
        if(0U != pllsel) {
 8002baa:	03d6      	lsls	r6, r2, #15
 8002bac:	d532      	bpl.n	8002c14 <rcu_clock_freq_get+0xbc>
            prediv = (GET_BITS(RCU_CFG1, 0, 3) + 1U);
 8002bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
            if(0U == pllpresel) {
 8002bb0:	004d      	lsls	r5, r1, #1
            prediv = (GET_BITS(RCU_CFG1, 0, 3) + 1U);
 8002bb2:	f002 020f 	and.w	r2, r2, #15
                cksys_freq = (HXTAL_VALUE / prediv) * pllmf;
 8002bb6:	bf54      	ite	pl
 8002bb8:	4947      	ldrpl	r1, [pc, #284]	@ (8002cd8 <rcu_clock_freq_get+0x180>)
            } else {
                cksys_freq = (IRC48M_VALUE / prediv) * pllmf;
 8002bba:	4948      	ldrmi	r1, [pc, #288]	@ (8002cdc <rcu_clock_freq_get+0x184>)
            prediv = (GET_BITS(RCU_CFG1, 0, 3) + 1U);
 8002bbc:	3201      	adds	r2, #1
                cksys_freq = (IRC48M_VALUE / prediv) * pllmf;
 8002bbe:	fbb1 f2f2 	udiv	r2, r1, r2
            }
        } else {
            cksys_freq = (IRC8M_VALUE >> 1) * pllmf;
 8002bc2:	4350      	muls	r0, r2
    default:
        cksys_freq = IRC8M_VALUE;
        break;
    }
    /* calculate AHB clock frequency */
    idx = GET_BITS(RCU_CFG0, 4, 7);
 8002bc4:	685a      	ldr	r2, [r3, #4]
    clk_exp = ahb_exp[idx];
    ahb_freq = cksys_freq >> clk_exp;

    /* calculate APB1 clock frequency */
    idx = GET_BITS(RCU_CFG0, 8, 10);
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	f3c1 2102 	ubfx	r1, r1, #8, #3
    clk_exp = apb1_exp[idx];
 8002bcc:	3120      	adds	r1, #32
 8002bce:	4469      	add	r1, sp
    idx = GET_BITS(RCU_CFG0, 4, 7);
 8002bd0:	f3c2 1203 	ubfx	r2, r2, #4, #4
    clk_exp = apb1_exp[idx];
 8002bd4:	f811 5c20 	ldrb.w	r5, [r1, #-32]
    apb1_freq = ahb_freq >> clk_exp;

    /* calculate APB2 clock frequency */
    idx = GET_BITS(RCU_CFG0, 11, 13);
 8002bd8:	6859      	ldr	r1, [r3, #4]
    clk_exp = ahb_exp[idx];
 8002bda:	3220      	adds	r2, #32
    idx = GET_BITS(RCU_CFG0, 11, 13);
 8002bdc:	f3c1 21c2 	ubfx	r1, r1, #11, #3
    clk_exp = ahb_exp[idx];
 8002be0:	446a      	add	r2, sp
    clk_exp = apb2_exp[idx];
 8002be2:	3120      	adds	r1, #32
 8002be4:	4469      	add	r1, sp
    clk_exp = ahb_exp[idx];
 8002be6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
    clk_exp = apb2_exp[idx];
 8002bea:	f811 1c18 	ldrb.w	r1, [r1, #-24]
    ahb_freq = cksys_freq >> clk_exp;
 8002bee:	fa20 f202 	lsr.w	r2, r0, r2
    apb2_freq = ahb_freq >> clk_exp;
 8002bf2:	fa22 f101 	lsr.w	r1, r2, r1

    /* return the clocks frequency */
    switch(clock) {
 8002bf6:	2c06      	cmp	r4, #6
 8002bf8:	d863      	bhi.n	8002cc2 <rcu_clock_freq_get+0x16a>
 8002bfa:	e8df f004 	tbb	[pc, r4]
 8002bfe:	0f10      	.short	0x0f10
 8002c00:	44156412 	.word	0x44156412
 8002c04:	4d          	.byte	0x4d
 8002c05:	00          	.byte	0x00
            pllmf += 33U;
 8002c06:	3021      	adds	r0, #33	@ 0x21
 8002c08:	e7cd      	b.n	8002ba6 <rcu_clock_freq_get+0x4e>
        if((1U == pllmf4) && (0U == pllmf5)) {
 8002c0a:	b90a      	cbnz	r2, 8002c10 <rcu_clock_freq_get+0xb8>
            pllmf += 17U;
 8002c0c:	3011      	adds	r0, #17
 8002c0e:	e7ca      	b.n	8002ba6 <rcu_clock_freq_get+0x4e>
            pllmf += 49U;
 8002c10:	3031      	adds	r0, #49	@ 0x31
 8002c12:	e7c8      	b.n	8002ba6 <rcu_clock_freq_get+0x4e>
            cksys_freq = (IRC8M_VALUE >> 1) * pllmf;
 8002c14:	4a32      	ldr	r2, [pc, #200]	@ (8002ce0 <rcu_clock_freq_get+0x188>)
 8002c16:	e7d4      	b.n	8002bc2 <rcu_clock_freq_get+0x6a>
        cksys_freq = IRC8M_VALUE;
 8002c18:	482f      	ldr	r0, [pc, #188]	@ (8002cd8 <rcu_clock_freq_get+0x180>)
 8002c1a:	e7d3      	b.n	8002bc4 <rcu_clock_freq_get+0x6c>
    case CK_SYS:
        ck_freq = cksys_freq;
        break;
    case CK_AHB:
        ck_freq = ahb_freq;
 8002c1c:	4610      	mov	r0, r2
        break;
    default:
        break;
    }
    return ck_freq;
}
 8002c1e:	b009      	add	sp, #36	@ 0x24
 8002c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    apb1_freq = ahb_freq >> clk_exp;
 8002c22:	fa22 f005 	lsr.w	r0, r2, r5
        break;
 8002c26:	e7fa      	b.n	8002c1e <rcu_clock_freq_get+0xc6>
        if(RCU_ADCSRC_AHB_APB2DIV != (RCU_CFG2 & RCU_CFG2_ADCSEL)) {
 8002c28:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002c2a:	05c0      	lsls	r0, r0, #23
 8002c2c:	d407      	bmi.n	8002c3e <rcu_clock_freq_get+0xe6>
            if(RCU_ADC_IRC28M_DIV1 != (RCU_CFG2 & RCU_CFG2_IRC28MDIV)) {
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                adc_freq = IRC28M_VALUE >> 1;
 8002c30:	482c      	ldr	r0, [pc, #176]	@ (8002ce4 <rcu_clock_freq_get+0x18c>)
 8002c32:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002c36:	4b2c      	ldr	r3, [pc, #176]	@ (8002ce8 <rcu_clock_freq_get+0x190>)
 8002c38:	bf08      	it	eq
 8002c3a:	4618      	moveq	r0, r3
 8002c3c:	e7ef      	b.n	8002c1e <rcu_clock_freq_get+0xc6>
            adcps = GET_BITS(RCU_CFG0, 14, 15);
 8002c3e:	6858      	ldr	r0, [r3, #4]
            adcps2 = GET_BITS(RCU_CFG2, 31, 31);
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            adcps = GET_BITS(RCU_CFG0, 14, 15);
 8002c42:	f3c0 3081 	ubfx	r0, r0, #14, #2
            adcps2 = GET_BITS(RCU_CFG2, 31, 31);
 8002c46:	2802      	cmp	r0, #2
 8002c48:	ea4f 73d3 	mov.w	r3, r3, lsr #31
            switch(adcps) {
 8002c4c:	d00f      	beq.n	8002c6e <rcu_clock_freq_get+0x116>
 8002c4e:	2803      	cmp	r0, #3
 8002c50:	d014      	beq.n	8002c7c <rcu_clock_freq_get+0x124>
 8002c52:	2801      	cmp	r0, #1
 8002c54:	d006      	beq.n	8002c64 <rcu_clock_freq_get+0x10c>
                if(0U == adcps2) {
 8002c56:	b90b      	cbnz	r3, 8002c5c <rcu_clock_freq_get+0x104>
                    adc_freq = apb2_freq / 2U;
 8002c58:	0848      	lsrs	r0, r1, #1
 8002c5a:	e7e0      	b.n	8002c1e <rcu_clock_freq_get+0xc6>
                    adc_freq = ahb_freq / 3U;
 8002c5c:	2003      	movs	r0, #3
                    adc_freq = ahb_freq / 9U;
 8002c5e:	fbb2 f0f0 	udiv	r0, r2, r0
 8002c62:	e7dc      	b.n	8002c1e <rcu_clock_freq_get+0xc6>
                if(0U == adcps2) {
 8002c64:	b90b      	cbnz	r3, 8002c6a <rcu_clock_freq_get+0x112>
                    adc_freq = apb2_freq / 4U;
 8002c66:	0888      	lsrs	r0, r1, #2
 8002c68:	e7d9      	b.n	8002c1e <rcu_clock_freq_get+0xc6>
                    adc_freq = ahb_freq / 5U;
 8002c6a:	2005      	movs	r0, #5
 8002c6c:	e7f7      	b.n	8002c5e <rcu_clock_freq_get+0x106>
                if(0U == adcps2) {
 8002c6e:	b91b      	cbnz	r3, 8002c78 <rcu_clock_freq_get+0x120>
                    adc_freq = apb2_freq / 6U;
 8002c70:	2006      	movs	r0, #6
 8002c72:	fbb1 f0f0 	udiv	r0, r1, r0
 8002c76:	e7d2      	b.n	8002c1e <rcu_clock_freq_get+0xc6>
                    adc_freq = ahb_freq / 7U;
 8002c78:	2007      	movs	r0, #7
 8002c7a:	e7f0      	b.n	8002c5e <rcu_clock_freq_get+0x106>
                if(0U == adcps2) {
 8002c7c:	b90b      	cbnz	r3, 8002c82 <rcu_clock_freq_get+0x12a>
                    adc_freq = apb2_freq / 8U;
 8002c7e:	08c8      	lsrs	r0, r1, #3
 8002c80:	e7cd      	b.n	8002c1e <rcu_clock_freq_get+0xc6>
                    adc_freq = ahb_freq / 9U;
 8002c82:	2009      	movs	r0, #9
 8002c84:	e7eb      	b.n	8002c5e <rcu_clock_freq_get+0x106>
        if(RCU_CECSRC_LXTAL != (RCU_CFG2 & RCU_CFG2_CECSEL)) {
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            cec_freq = LXTAL_VALUE;
 8002c88:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002c8c:	f248 0012 	movw	r0, #32786	@ 0x8012
 8002c90:	bf18      	it	ne
 8002c92:	f44f 4000 	movne.w	r0, #32768	@ 0x8000
 8002c96:	e7c2      	b.n	8002c1e <rcu_clock_freq_get+0xc6>
        if(RCU_USART0SRC_CKAPB2 == (RCU_CFG2 & RCU_CFG2_USART0SEL)) {
 8002c98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c9a:	0792      	lsls	r2, r2, #30
 8002c9c:	d013      	beq.n	8002cc6 <rcu_clock_freq_get+0x16e>
        } else if(RCU_USART0SRC_CKSYS == (RCU_CFG2 & RCU_CFG2_USART0SEL)) {
 8002c9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ca0:	f002 0203 	and.w	r2, r2, #3
 8002ca4:	2a01      	cmp	r2, #1
 8002ca6:	d0ba      	beq.n	8002c1e <rcu_clock_freq_get+0xc6>
        } else if(RCU_USART0SRC_LXTAL == (RCU_CFG2 & RCU_CFG2_USART0SEL)) {
 8002ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002caa:	f002 0203 	and.w	r2, r2, #3
 8002cae:	2a02      	cmp	r2, #2
 8002cb0:	d00b      	beq.n	8002cca <rcu_clock_freq_get+0x172>
        } else if(RCU_USART0SRC_IRC8M == (RCU_CFG2 & RCU_CFG2_USART0SEL)) {
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    uint32_t sws = 0U, adcps = 0U, adcps2 = 0U, ck_freq = 0U;
 8002cb4:	4808      	ldr	r0, [pc, #32]	@ (8002cd8 <rcu_clock_freq_get+0x180>)
        } else if(RCU_USART0SRC_IRC8M == (RCU_CFG2 & RCU_CFG2_USART0SEL)) {
 8002cb6:	f003 0303 	and.w	r3, r3, #3
    uint32_t sws = 0U, adcps = 0U, adcps2 = 0U, ck_freq = 0U;
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	bf18      	it	ne
 8002cbe:	2000      	movne	r0, #0
 8002cc0:	e7ad      	b.n	8002c1e <rcu_clock_freq_get+0xc6>
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	e7ab      	b.n	8002c1e <rcu_clock_freq_get+0xc6>
        ck_freq = apb2_freq;
 8002cc6:	4608      	mov	r0, r1
 8002cc8:	e7a9      	b.n	8002c1e <rcu_clock_freq_get+0xc6>
            cec_freq = LXTAL_VALUE;
 8002cca:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002cce:	e7a6      	b.n	8002c1e <rcu_clock_freq_get+0xc6>
 8002cd0:	08004054 	.word	0x08004054
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	007a1200 	.word	0x007a1200
 8002cdc:	02dc6c00 	.word	0x02dc6c00
 8002ce0:	003d0900 	.word	0x003d0900
 8002ce4:	01ab3f00 	.word	0x01ab3f00
 8002ce8:	00d59f80 	.word	0x00d59f80

08002cec <usart_deinit>:
    \param[in]  usart_periph: USARTx(x=0,1)
    \param[out] none
    \retval     none
*/
void usart_deinit(uint32_t usart_periph)
{
 8002cec:	b508      	push	{r3, lr}
    switch(usart_periph) {
 8002cee:	4b0c      	ldr	r3, [pc, #48]	@ (8002d20 <usart_deinit+0x34>)
 8002cf0:	4298      	cmp	r0, r3
 8002cf2:	d00d      	beq.n	8002d10 <usart_deinit+0x24>
 8002cf4:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8002cf8:	4298      	cmp	r0, r3
 8002cfa:	d110      	bne.n	8002d1e <usart_deinit+0x32>
    case USART0:
        /* reset USART0 */
        rcu_periph_reset_enable(RCU_USART0RST);
 8002cfc:	f240 300e 	movw	r0, #782	@ 0x30e
 8002d00:	f7ff ff25 	bl	8002b4e <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART0RST);
 8002d04:	f240 300e 	movw	r0, #782	@ 0x30e
        rcu_periph_reset_disable(RCU_USART1RST);
        break;
    default:
        break;
    }
}
 8002d08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        rcu_periph_reset_disable(RCU_USART1RST);
 8002d0c:	f7ff bf21 	b.w	8002b52 <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_USART1RST);
 8002d10:	f240 4011 	movw	r0, #1041	@ 0x411
 8002d14:	f7ff ff1b 	bl	8002b4e <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART1RST);
 8002d18:	f240 4011 	movw	r0, #1041	@ 0x411
 8002d1c:	e7f4      	b.n	8002d08 <usart_deinit+0x1c>
}
 8002d1e:	bd08      	pop	{r3, pc}
 8002d20:	40004400 	.word	0x40004400

08002d24 <usart_baudrate_set>:
    \param[in]  baudval: baud rate value
    \param[out] none
    \retval     none
*/
void usart_baudrate_set(uint32_t usart_periph, uint32_t baudval)
{
 8002d24:	b538      	push	{r3, r4, r5, lr}
    uint32_t uclk = 0U, intdiv = 0U, fradiv = 0U, udiv = 0U;
    switch(usart_periph) {
 8002d26:	4b13      	ldr	r3, [pc, #76]	@ (8002d74 <usart_baudrate_set+0x50>)
 8002d28:	4298      	cmp	r0, r3
{
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	460d      	mov	r5, r1
    switch(usart_periph) {
 8002d2e:	d018      	beq.n	8002d62 <usart_baudrate_set+0x3e>
 8002d30:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8002d34:	4298      	cmp	r0, r3
 8002d36:	d116      	bne.n	8002d66 <usart_baudrate_set+0x42>
    /* get clock frequency */
    case USART0:
        /* get USART0 clock */
        uclk = rcu_clock_freq_get(CK_USART);
 8002d38:	2006      	movs	r0, #6
        break;
    case USART1:
        /* get USART1 clock */
        uclk = rcu_clock_freq_get(CK_APB1);
 8002d3a:	f7ff ff0d 	bl	8002b58 <rcu_clock_freq_get>
        break;
    default:
        break;
    }
    if(USART_CTL0(usart_periph) & USART_CTL0_OVSMOD) {
 8002d3e:	6822      	ldr	r2, [r4, #0]
 8002d40:	0412      	lsls	r2, r2, #16
        /* oversampling by 8, configure the value of USART_BAUD */
        udiv = ((2U * uclk) + (baudval / 2U)) / baudval;
 8002d42:	ea4f 0355 	mov.w	r3, r5, lsr #1
    if(USART_CTL0(usart_periph) & USART_CTL0_OVSMOD) {
 8002d46:	d510      	bpl.n	8002d6a <usart_baudrate_set+0x46>
        udiv = ((2U * uclk) + (baudval / 2U)) / baudval;
 8002d48:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002d4c:	fbb3 f1f5 	udiv	r1, r3, r5
        intdiv = udiv & 0x0000fff0U;
        fradiv = (udiv >> 1U) & 0x00000007U;
 8002d50:	f3c1 0342 	ubfx	r3, r1, #1, #3
        intdiv = udiv & 0x0000fff0U;
 8002d54:	f021 010f 	bic.w	r1, r1, #15
 8002d58:	0409      	lsls	r1, r1, #16
 8002d5a:	0c09      	lsrs	r1, r1, #16
        USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
 8002d5c:	430b      	orrs	r3, r1
    } else {
        /* oversampling by 16, configure the value of USART_BAUD */
        udiv = (uclk + (baudval / 2U)) / baudval;
        intdiv = udiv & 0x0000fff0U;
        fradiv = udiv & 0x0000000fU;
        USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
 8002d5e:	60e3      	str	r3, [r4, #12]
    }
}
 8002d60:	bd38      	pop	{r3, r4, r5, pc}
        uclk = rcu_clock_freq_get(CK_APB1);
 8002d62:	2002      	movs	r0, #2
 8002d64:	e7e9      	b.n	8002d3a <usart_baudrate_set+0x16>
    switch(usart_periph) {
 8002d66:	2000      	movs	r0, #0
 8002d68:	e7e9      	b.n	8002d3e <usart_baudrate_set+0x1a>
        udiv = (uclk + (baudval / 2U)) / baudval;
 8002d6a:	4403      	add	r3, r0
 8002d6c:	fbb3 f3f5 	udiv	r3, r3, r5
        USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	e7f4      	b.n	8002d5e <usart_baudrate_set+0x3a>
 8002d74:	40004400 	.word	0x40004400

08002d78 <usart_parity_config>:
    \retval     none
*/
void usart_parity_config(uint32_t usart_periph, uint32_t paritycfg)
{
    /* disable USART */
    USART_CTL0(usart_periph) &= ~(USART_CTL0_UEN);
 8002d78:	6803      	ldr	r3, [r0, #0]
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	6003      	str	r3, [r0, #0]
    /* clear USART_CTL0 PM,PCEN bits */
    USART_CTL0(usart_periph) &= ~(USART_CTL0_PM | USART_CTL0_PCEN);
 8002d80:	6803      	ldr	r3, [r0, #0]
 8002d82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d86:	6003      	str	r3, [r0, #0]
    /* configure USART parity mode */
    USART_CTL0(usart_periph) |= paritycfg;
 8002d88:	6803      	ldr	r3, [r0, #0]
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	6003      	str	r3, [r0, #0]
}
 8002d8e:	4770      	bx	lr

08002d90 <usart_word_length_set>:
    \retval     none
*/
void usart_word_length_set(uint32_t usart_periph, uint32_t wlen)
{
    /* disable USART */
    USART_CTL0(usart_periph) &= ~(USART_CTL0_UEN);
 8002d90:	6803      	ldr	r3, [r0, #0]
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	6003      	str	r3, [r0, #0]
    /* clear USART_CTL0 WL bit */
    USART_CTL0(usart_periph) &= ~USART_CTL0_WL;
 8002d98:	6803      	ldr	r3, [r0, #0]
 8002d9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d9e:	6003      	str	r3, [r0, #0]
    /* configure USART word length */
    USART_CTL0(usart_periph) |= wlen;
 8002da0:	6803      	ldr	r3, [r0, #0]
 8002da2:	430b      	orrs	r3, r1
 8002da4:	6003      	str	r3, [r0, #0]
}
 8002da6:	4770      	bx	lr

08002da8 <usart_stop_bit_set>:
    \retval     none
*/
void usart_stop_bit_set(uint32_t usart_periph, uint32_t stblen)
{
    /* disable USART */
    USART_CTL0(usart_periph) &= ~(USART_CTL0_UEN);
 8002da8:	6803      	ldr	r3, [r0, #0]
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	6003      	str	r3, [r0, #0]
    /* clear USART_CTL1 STB bits */
    USART_CTL1(usart_periph) &= ~USART_CTL1_STB;
 8002db0:	6843      	ldr	r3, [r0, #4]
 8002db2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002db6:	6043      	str	r3, [r0, #4]
    USART_CTL1(usart_periph) |= stblen;
 8002db8:	6843      	ldr	r3, [r0, #4]
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	6043      	str	r3, [r0, #4]
}
 8002dbe:	4770      	bx	lr

08002dc0 <usart_enable>:
    \param[out] none
    \retval     none
*/
void usart_enable(uint32_t usart_periph)
{
    USART_CTL0(usart_periph) |= USART_CTL0_UEN;
 8002dc0:	6803      	ldr	r3, [r0, #0]
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6003      	str	r3, [r0, #0]
}
 8002dc8:	4770      	bx	lr

08002dca <usart_transmit_config>:
    \param[out] none
    \retval     none
*/
void usart_transmit_config(uint32_t usart_periph, uint32_t txconfig)
{
    USART_CTL0(usart_periph) &= ~USART_CTL0_TEN;
 8002dca:	6803      	ldr	r3, [r0, #0]
 8002dcc:	f023 0308 	bic.w	r3, r3, #8
 8002dd0:	6003      	str	r3, [r0, #0]
    /* configure transfer mode */
    USART_CTL0(usart_periph) |= txconfig;
 8002dd2:	6803      	ldr	r3, [r0, #0]
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	6003      	str	r3, [r0, #0]
}
 8002dd8:	4770      	bx	lr

08002dda <usart_receive_config>:
    \param[out] none
    \retval     none
*/
void usart_receive_config(uint32_t usart_periph, uint32_t rxconfig)
{
    USART_CTL0(usart_periph) &= ~USART_CTL0_REN;
 8002dda:	6803      	ldr	r3, [r0, #0]
 8002ddc:	f023 0304 	bic.w	r3, r3, #4
 8002de0:	6003      	str	r3, [r0, #0]
    /* configure receiver mode */
    USART_CTL0(usart_periph) |= rxconfig;
 8002de2:	6803      	ldr	r3, [r0, #0]
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6003      	str	r3, [r0, #0]
}
 8002de8:	4770      	bx	lr

08002dea <usart_dma_receive_config>:
    \param[out] none
    \retval     none
*/
void usart_dma_receive_config(uint32_t usart_periph, uint8_t dmacmd)
{
    USART_CTL2(usart_periph) &= ~USART_CTL2_DENR;
 8002dea:	6883      	ldr	r3, [r0, #8]
 8002dec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002df0:	6083      	str	r3, [r0, #8]
    USART_CTL2(usart_periph) |= (USART_CTL2_DENR & dmacmd);
 8002df2:	6883      	ldr	r3, [r0, #8]
 8002df4:	f001 0140 	and.w	r1, r1, #64	@ 0x40
 8002df8:	4319      	orrs	r1, r3
 8002dfa:	6081      	str	r1, [r0, #8]
}
 8002dfc:	4770      	bx	lr

08002dfe <usart_dma_transmit_config>:
    \param[out] none
    \retval     none
*/
void usart_dma_transmit_config(uint32_t usart_periph, uint8_t dmacmd)
{
    USART_CTL2(usart_periph) &= ~USART_CTL2_DENT;
 8002dfe:	6883      	ldr	r3, [r0, #8]
 8002e00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e04:	6083      	str	r3, [r0, #8]
    USART_CTL2(usart_periph) |= (USART_CTL2_DENT & dmacmd);
 8002e06:	6883      	ldr	r3, [r0, #8]
 8002e08:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8002e0c:	4319      	orrs	r1, r3
 8002e0e:	6081      	str	r1, [r0, #8]
}
 8002e10:	4770      	bx	lr

08002e12 <usart_flag_get>:
    \param[out] none
    \retval     FlagStatus: SET or RESET
*/
FlagStatus usart_flag_get(uint32_t usart_periph, usart_flag_enum flag)
{
    if(RESET != (USART_REG_VAL(usart_periph, flag) & BIT(USART_BIT_POS(flag)))) {
 8002e12:	098b      	lsrs	r3, r1, #6
 8002e14:	f001 011f 	and.w	r1, r1, #31
 8002e18:	5818      	ldr	r0, [r3, r0]
 8002e1a:	40c8      	lsrs	r0, r1
        return SET;
    } else {
        return RESET;
    }
}
 8002e1c:	f000 0001 	and.w	r0, r0, #1
 8002e20:	4770      	bx	lr

08002e22 <usart_flag_clear>:
    \param[out] none
    \retval     none
*/
void usart_flag_clear(uint32_t usart_periph, usart_flag_enum flag)
{
    USART_INTC(usart_periph) |= BIT(USART_BIT_POS(flag));
 8002e22:	6a02      	ldr	r2, [r0, #32]
 8002e24:	f001 011f 	and.w	r1, r1, #31
 8002e28:	2301      	movs	r3, #1
 8002e2a:	408b      	lsls	r3, r1
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	6203      	str	r3, [r0, #32]
}
 8002e30:	4770      	bx	lr

08002e32 <usart_interrupt_flag_get>:
*/
FlagStatus usart_interrupt_flag_get(uint32_t usart_periph, usart_interrupt_flag_enum int_flag)
{
    uint32_t intenable = 0U, flagstatus = 0U;
    /* get the interrupt enable bit status */
    intenable = (USART_REG_VAL(usart_periph, int_flag) & BIT(USART_BIT_POS(int_flag)));
 8002e32:	f3c1 1389 	ubfx	r3, r1, #6, #10
{
 8002e36:	b510      	push	{r4, lr}
    intenable = (USART_REG_VAL(usart_periph, int_flag) & BIT(USART_BIT_POS(int_flag)));
 8002e38:	581c      	ldr	r4, [r3, r0]
    /* get the corresponding flag bit status */
    flagstatus = (USART_REG_VAL2(usart_periph, int_flag) & BIT(USART_BIT_POS2(int_flag)));
 8002e3a:	0d8b      	lsrs	r3, r1, #22
 8002e3c:	581a      	ldr	r2, [r3, r0]
 8002e3e:	f3c1 4004 	ubfx	r0, r1, #16, #5
 8002e42:	2301      	movs	r3, #1
 8002e44:	fa03 f000 	lsl.w	r0, r3, r0

    if(flagstatus && intenable) {
 8002e48:	4010      	ands	r0, r2
 8002e4a:	d006      	beq.n	8002e5a <usart_interrupt_flag_get+0x28>
    intenable = (USART_REG_VAL(usart_periph, int_flag) & BIT(USART_BIT_POS(int_flag)));
 8002e4c:	f001 011f 	and.w	r1, r1, #31
 8002e50:	408b      	lsls	r3, r1
    if(flagstatus && intenable) {
 8002e52:	4223      	tst	r3, r4
 8002e54:	bf14      	ite	ne
 8002e56:	2001      	movne	r0, #1
 8002e58:	2000      	moveq	r0, #0
        return SET;
    } else {
        return RESET;
    }
}
 8002e5a:	bd10      	pop	{r4, pc}

08002e5c <usart_interrupt_flag_clear>:
    \param[out] none
    \retval     none
*/
void usart_interrupt_flag_clear(uint32_t usart_periph, usart_interrupt_flag_enum int_flag)
{
    if(USART_INT_FLAG_RFF == int_flag) {
 8002e5c:	4b08      	ldr	r3, [pc, #32]	@ (8002e80 <usart_interrupt_flag_clear+0x24>)
 8002e5e:	4299      	cmp	r1, r3
 8002e60:	d106      	bne.n	8002e70 <usart_interrupt_flag_clear+0x14>
        USART_RFCS(usart_periph) &= (uint32_t)(~USART_RFCS_RFFINT);
 8002e62:	f8d0 30d0 	ldr.w	r3, [r0, #208]	@ 0xd0
 8002e66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002e6a:	f8c0 30d0 	str.w	r3, [r0, #208]	@ 0xd0
 8002e6e:	4770      	bx	lr
    } else {
        USART_INTC(usart_periph) |= BIT(USART_BIT_POS2(int_flag));
 8002e70:	6a02      	ldr	r2, [r0, #32]
 8002e72:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8002e76:	2301      	movs	r3, #1
 8002e78:	408b      	lsls	r3, r1
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	6203      	str	r3, [r0, #32]
    }
}
 8002e7e:	4770      	bx	lr
 8002e80:	340f3409 	.word	0x340f3409

08002e84 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002e84:	4808      	ldr	r0, [pc, #32]	@ (8002ea8 <prvPortStartFirstTask+0x24>)
 8002e86:	6800      	ldr	r0, [r0, #0]
 8002e88:	6800      	ldr	r0, [r0, #0]
 8002e8a:	f380 8808 	msr	MSP, r0
 8002e8e:	f04f 0000 	mov.w	r0, #0
 8002e92:	f380 8814 	msr	CONTROL, r0
 8002e96:	b662      	cpsie	i
 8002e98:	b661      	cpsie	f
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	df00      	svc	0
 8002ea4:	bf00      	nop
 8002ea6:	0000      	.short	0x0000
 8002ea8:	e000ed08 	.word	0xe000ed08

08002eac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002eac:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002ebc <vPortEnableVFP+0x10>
 8002eb0:	6801      	ldr	r1, [r0, #0]
 8002eb2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002eb6:	6001      	str	r1, [r0, #0]
 8002eb8:	4770      	bx	lr
 8002eba:	0000      	.short	0x0000
 8002ebc:	e000ed88 	.word	0xe000ed88

08002ec0 <prvTaskExitError>:
{
 8002ec0:	b500      	push	{lr}
 8002ec2:	b083      	sub	sp, #12
    volatile uint32_t ulDummy = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9301      	str	r3, [sp, #4]
    configASSERT( uxCriticalNesting == ~0UL );
 8002ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f08 <prvTaskExitError+0x48>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d10d      	bne.n	8002eee <prvTaskExitError+0x2e>
 8002ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
    while( ulDummy == 0 )
 8002ee2:	9b01      	ldr	r3, [sp, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0fc      	beq.n	8002ee2 <prvTaskExitError+0x22>
}
 8002ee8:	b003      	add	sp, #12
 8002eea:	f85d fb04 	ldr.w	pc, [sp], #4
 8002eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef2:	f383 8811 	msr	BASEPRI, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	f3bf 8f4f 	dsb	sy
    configASSERT( uxCriticalNesting == ~0UL );
 8002efe:	21ea      	movs	r1, #234	@ 0xea
 8002f00:	4802      	ldr	r0, [pc, #8]	@ (8002f0c <prvTaskExitError+0x4c>)
 8002f02:	f7fd fc9b 	bl	800083c <assert_failed>
 8002f06:	e7e4      	b.n	8002ed2 <prvTaskExitError+0x12>
 8002f08:	20000054 	.word	0x20000054
 8002f0c:	0800427c 	.word	0x0800427c

08002f10 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002f10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f14:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002f18:	f021 0101 	bic.w	r1, r1, #1
 8002f1c:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f20:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <pxPortInitialiseStack+0x28>)
 8002f22:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002f26:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f2a:	f06f 0302 	mvn.w	r3, #2
 8002f2e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002f32:	3844      	subs	r0, #68	@ 0x44
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	08002ec1 	.word	0x08002ec1
 8002f3c:	00000000 	.word	0x00000000

08002f40 <SVC_Handler>:
    __asm volatile (
 8002f40:	4b07      	ldr	r3, [pc, #28]	@ (8002f60 <pxCurrentTCBConst2>)
 8002f42:	6819      	ldr	r1, [r3, #0]
 8002f44:	6808      	ldr	r0, [r1, #0]
 8002f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4a:	f380 8809 	msr	PSP, r0
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	f380 8811 	msr	BASEPRI, r0
 8002f5a:	4770      	bx	lr
 8002f5c:	f3af 8000 	nop.w

08002f60 <pxCurrentTCBConst2>:
 8002f60:	20000570 	.word	0x20000570

08002f64 <vPortEnterCritical>:
{
 8002f64:	b508      	push	{r3, lr}
 8002f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
    uxCriticalNesting++;
 8002f76:	4a0e      	ldr	r2, [pc, #56]	@ (8002fb0 <vPortEnterCritical+0x4c>)
 8002f78:	6813      	ldr	r3, [r2, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d000      	beq.n	8002f84 <vPortEnterCritical+0x20>
}
 8002f82:	bd08      	pop	{r3, pc}
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f84:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002f88:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8002f8c:	f013 0fff 	tst.w	r3, #255	@ 0xff
 8002f90:	d0f7      	beq.n	8002f82 <vPortEnterCritical+0x1e>
 8002f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8002fa6:	4803      	ldr	r0, [pc, #12]	@ (8002fb4 <vPortEnterCritical+0x50>)
 8002fa8:	f7fd fc48 	bl	800083c <assert_failed>
}
 8002fac:	e7e9      	b.n	8002f82 <vPortEnterCritical+0x1e>
 8002fae:	bf00      	nop
 8002fb0:	20000054 	.word	0x20000054
 8002fb4:	0800427c 	.word	0x0800427c

08002fb8 <vPortExitCritical>:
{
 8002fb8:	b508      	push	{r3, lr}
    configASSERT( uxCriticalNesting );
 8002fba:	4b0c      	ldr	r3, [pc, #48]	@ (8002fec <vPortExitCritical+0x34>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	b13b      	cbz	r3, 8002fd0 <vPortExitCritical+0x18>
    uxCriticalNesting--;
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002fec <vPortExitCritical+0x34>)
 8002fc2:	6813      	ldr	r3, [r2, #0]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8002fc8:	b90b      	cbnz	r3, 8002fce <vPortExitCritical+0x16>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002fca:	f383 8811 	msr	BASEPRI, r3
}
 8002fce:	bd08      	pop	{r3, pc}
        __asm volatile
 8002fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
    configASSERT( uxCriticalNesting );
 8002fe0:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8002fe4:	4802      	ldr	r0, [pc, #8]	@ (8002ff0 <vPortExitCritical+0x38>)
 8002fe6:	f7fd fc29 	bl	800083c <assert_failed>
 8002fea:	e7e9      	b.n	8002fc0 <vPortExitCritical+0x8>
 8002fec:	20000054 	.word	0x20000054
 8002ff0:	0800427c 	.word	0x0800427c
	...

08003000 <PendSV_Handler>:
    __asm volatile
 8003000:	f3ef 8009 	mrs	r0, PSP
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	4b15      	ldr	r3, [pc, #84]	@ (8003060 <pxCurrentTCBConst>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f01e 0f10 	tst.w	lr, #16
 8003010:	bf08      	it	eq
 8003012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800301a:	6010      	str	r0, [r2, #0]
 800301c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003020:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003024:	f380 8811 	msr	BASEPRI, r0
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f7fe f9c4 	bl	80013bc <vTaskSwitchContext>
 8003034:	f04f 0000 	mov.w	r0, #0
 8003038:	f380 8811 	msr	BASEPRI, r0
 800303c:	bc09      	pop	{r0, r3}
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	6808      	ldr	r0, [r1, #0]
 8003042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003046:	f01e 0f10 	tst.w	lr, #16
 800304a:	bf08      	it	eq
 800304c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003050:	f380 8809 	msr	PSP, r0
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	f3af 8000 	nop.w

08003060 <pxCurrentTCBConst>:
 8003060:	20000570 	.word	0x20000570

08003064 <SysTick_Handler>:
{
 8003064:	b508      	push	{r3, lr}
 8003066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
        if( xTaskIncrementTick() != pdFALSE )
 8003076:	f7fd ffd3 	bl	8001020 <xTaskIncrementTick>
 800307a:	b128      	cbz	r0, 8003088 <SysTick_Handler+0x24>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800307c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003084:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
        __asm volatile
 8003088:	2300      	movs	r3, #0
 800308a:	f383 8811 	msr	BASEPRI, r3
}
 800308e:	bd08      	pop	{r3, pc}

08003090 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003090:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003094:	2300      	movs	r3, #0
 8003096:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003098:	6193      	str	r3, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800309a:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <vPortSetupTimerInterrupt+0x20>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4905      	ldr	r1, [pc, #20]	@ (80030b4 <vPortSetupTimerInterrupt+0x24>)
 80030a0:	fba1 1303 	umull	r1, r3, r1, r3
 80030a4:	099b      	lsrs	r3, r3, #6
 80030a6:	3b01      	subs	r3, #1
 80030a8:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80030aa:	2307      	movs	r3, #7
 80030ac:	6113      	str	r3, [r2, #16]
}
 80030ae:	4770      	bx	lr
 80030b0:	20000050 	.word	0x20000050
 80030b4:	10624dd3 	.word	0x10624dd3

080030b8 <xPortStartScheduler>:
{
 80030b8:	b530      	push	{r4, r5, lr}
 80030ba:	b083      	sub	sp, #12
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80030bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80030c0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80030c4:	4b44      	ldr	r3, [pc, #272]	@ (80031d8 <xPortStartScheduler+0x120>)
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d01a      	beq.n	8003100 <xPortStartScheduler+0x48>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80030ca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80030ce:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80030d2:	4b42      	ldr	r3, [pc, #264]	@ (80031dc <xPortStartScheduler+0x124>)
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d021      	beq.n	800311c <xPortStartScheduler+0x64>
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030d8:	4b41      	ldr	r3, [pc, #260]	@ (80031e0 <xPortStartScheduler+0x128>)
 80030da:	781a      	ldrb	r2, [r3, #0]
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	9201      	str	r2, [sp, #4]
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030e0:	22ff      	movs	r2, #255	@ 0xff
 80030e2:	701a      	strb	r2, [r3, #0]
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f88d 3003 	strb.w	r3, [sp, #3]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80030f0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80030f4:	4a3b      	ldr	r2, [pc, #236]	@ (80031e4 <xPortStartScheduler+0x12c>)
 80030f6:	7013      	strb	r3, [r2, #0]
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030f8:	4b3b      	ldr	r3, [pc, #236]	@ (80031e8 <xPortStartScheduler+0x130>)
 80030fa:	2207      	movs	r2, #7
 80030fc:	601a      	str	r2, [r3, #0]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030fe:	e025      	b.n	800314c <xPortStartScheduler+0x94>
        __asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003110:	f240 1131 	movw	r1, #305	@ 0x131
 8003114:	4835      	ldr	r0, [pc, #212]	@ (80031ec <xPortStartScheduler+0x134>)
 8003116:	f7fd fb91 	bl	800083c <assert_failed>
 800311a:	e7d6      	b.n	80030ca <xPortStartScheduler+0x12>
 800311c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800312c:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8003130:	482e      	ldr	r0, [pc, #184]	@ (80031ec <xPortStartScheduler+0x134>)
 8003132:	f7fd fb83 	bl	800083c <assert_failed>
 8003136:	e7cf      	b.n	80030d8 <xPortStartScheduler+0x20>
            ulMaxPRIGROUPValue--;
 8003138:	4a2b      	ldr	r2, [pc, #172]	@ (80031e8 <xPortStartScheduler+0x130>)
 800313a:	6813      	ldr	r3, [r2, #0]
 800313c:	3b01      	subs	r3, #1
 800313e:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003140:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f88d 3003 	strb.w	r3, [sp, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800314c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003150:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003154:	d1f0      	bne.n	8003138 <xPortStartScheduler+0x80>
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003156:	4b24      	ldr	r3, [pc, #144]	@ (80031e8 <xPortStartScheduler+0x130>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d12e      	bne.n	80031bc <xPortStartScheduler+0x104>
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800315e:	4a22      	ldr	r2, [pc, #136]	@ (80031e8 <xPortStartScheduler+0x130>)
 8003160:	6813      	ldr	r3, [r2, #0]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003166:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800316a:	6013      	str	r3, [r2, #0]
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800316c:	9b01      	ldr	r3, [sp, #4]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4a1b      	ldr	r2, [pc, #108]	@ (80031e0 <xPortStartScheduler+0x128>)
 8003172:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003174:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8003178:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800317c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003180:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003184:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8003188:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800318c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
    vPortSetupTimerInterrupt();
 8003190:	f7ff ff7e 	bl	8003090 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 8003194:	2500      	movs	r5, #0
 8003196:	4b16      	ldr	r3, [pc, #88]	@ (80031f0 <xPortStartScheduler+0x138>)
 8003198:	601d      	str	r5, [r3, #0]
    vPortEnableVFP();
 800319a:	f7ff fe87 	bl	8002eac <vPortEnableVFP>
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800319e:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80031a2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80031a6:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
    prvPortStartFirstTask();
 80031aa:	f7ff fe6b 	bl	8002e84 <prvPortStartFirstTask>
    vTaskSwitchContext();
 80031ae:	f7fe f905 	bl	80013bc <vTaskSwitchContext>
    prvTaskExitError();
 80031b2:	f7ff fe85 	bl	8002ec0 <prvTaskExitError>
}
 80031b6:	4628      	mov	r0, r5
 80031b8:	b003      	add	sp, #12
 80031ba:	bd30      	pop	{r4, r5, pc}
 80031bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031cc:	f44f 71b2 	mov.w	r1, #356	@ 0x164
 80031d0:	4806      	ldr	r0, [pc, #24]	@ (80031ec <xPortStartScheduler+0x134>)
 80031d2:	f7fd fb33 	bl	800083c <assert_failed>
 80031d6:	e7c2      	b.n	800315e <xPortStartScheduler+0xa6>
 80031d8:	410fc271 	.word	0x410fc271
 80031dc:	410fc270 	.word	0x410fc270
 80031e0:	e000e400 	.word	0xe000e400
 80031e4:	20001354 	.word	0x20001354
 80031e8:	20001350 	.word	0x20001350
 80031ec:	0800427c 	.word	0x0800427c
 80031f0:	20000054 	.word	0x20000054

080031f4 <selfrel_offset31>:
 80031f4:	6803      	ldr	r3, [r0, #0]
 80031f6:	005a      	lsls	r2, r3, #1
 80031f8:	bf4c      	ite	mi
 80031fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80031fe:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8003202:	4418      	add	r0, r3
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop

08003208 <search_EIT_table>:
 8003208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800320c:	b359      	cbz	r1, 8003266 <search_EIT_table+0x5e>
 800320e:	f101 38ff 	add.w	r8, r1, #4294967295
 8003212:	4605      	mov	r5, r0
 8003214:	4616      	mov	r6, r2
 8003216:	4647      	mov	r7, r8
 8003218:	f04f 0a00 	mov.w	sl, #0
 800321c:	eb0a 0107 	add.w	r1, sl, r7
 8003220:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8003224:	1049      	asrs	r1, r1, #1
 8003226:	eb05 09c1 	add.w	r9, r5, r1, lsl #3
 800322a:	4648      	mov	r0, r9
 800322c:	f7ff ffe2 	bl	80031f4 <selfrel_offset31>
 8003230:	4588      	cmp	r8, r1
 8003232:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 8003236:	4603      	mov	r3, r0
 8003238:	d010      	beq.n	800325c <search_EIT_table+0x54>
 800323a:	f104 0008 	add.w	r0, r4, #8
 800323e:	42b3      	cmp	r3, r6
 8003240:	4428      	add	r0, r5
 8003242:	d807      	bhi.n	8003254 <search_EIT_table+0x4c>
 8003244:	f7ff ffd6 	bl	80031f4 <selfrel_offset31>
 8003248:	3801      	subs	r0, #1
 800324a:	42b0      	cmp	r0, r6
 800324c:	d208      	bcs.n	8003260 <search_EIT_table+0x58>
 800324e:	f101 0a01 	add.w	sl, r1, #1
 8003252:	e7e3      	b.n	800321c <search_EIT_table+0x14>
 8003254:	458a      	cmp	sl, r1
 8003256:	d006      	beq.n	8003266 <search_EIT_table+0x5e>
 8003258:	1e4f      	subs	r7, r1, #1
 800325a:	e7df      	b.n	800321c <search_EIT_table+0x14>
 800325c:	42b0      	cmp	r0, r6
 800325e:	d8f9      	bhi.n	8003254 <search_EIT_table+0x4c>
 8003260:	4648      	mov	r0, r9
 8003262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003266:	f04f 0900 	mov.w	r9, #0
 800326a:	4648      	mov	r0, r9
 800326c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003270 <__gnu_unwind_get_pr_addr>:
 8003270:	2801      	cmp	r0, #1
 8003272:	d009      	beq.n	8003288 <__gnu_unwind_get_pr_addr+0x18>
 8003274:	2802      	cmp	r0, #2
 8003276:	d005      	beq.n	8003284 <__gnu_unwind_get_pr_addr+0x14>
 8003278:	4b04      	ldr	r3, [pc, #16]	@ (800328c <__gnu_unwind_get_pr_addr+0x1c>)
 800327a:	2800      	cmp	r0, #0
 800327c:	bf0c      	ite	eq
 800327e:	4618      	moveq	r0, r3
 8003280:	2000      	movne	r0, #0
 8003282:	4770      	bx	lr
 8003284:	4802      	ldr	r0, [pc, #8]	@ (8003290 <__gnu_unwind_get_pr_addr+0x20>)
 8003286:	4770      	bx	lr
 8003288:	4802      	ldr	r0, [pc, #8]	@ (8003294 <__gnu_unwind_get_pr_addr+0x24>)
 800328a:	4770      	bx	lr
 800328c:	08003941 	.word	0x08003941
 8003290:	08003951 	.word	0x08003951
 8003294:	08003949 	.word	0x08003949

08003298 <get_eit_entry>:
 8003298:	b530      	push	{r4, r5, lr}
 800329a:	4b22      	ldr	r3, [pc, #136]	@ (8003324 <get_eit_entry+0x8c>)
 800329c:	b083      	sub	sp, #12
 800329e:	4604      	mov	r4, r0
 80032a0:	1e8d      	subs	r5, r1, #2
 80032a2:	b343      	cbz	r3, 80032f6 <get_eit_entry+0x5e>
 80032a4:	a901      	add	r1, sp, #4
 80032a6:	4628      	mov	r0, r5
 80032a8:	f3af 8000 	nop.w
 80032ac:	b1f0      	cbz	r0, 80032ec <get_eit_entry+0x54>
 80032ae:	9901      	ldr	r1, [sp, #4]
 80032b0:	462a      	mov	r2, r5
 80032b2:	f7ff ffa9 	bl	8003208 <search_EIT_table>
 80032b6:	4601      	mov	r1, r0
 80032b8:	b1c0      	cbz	r0, 80032ec <get_eit_entry+0x54>
 80032ba:	f7ff ff9b 	bl	80031f4 <selfrel_offset31>
 80032be:	684b      	ldr	r3, [r1, #4]
 80032c0:	64a0      	str	r0, [r4, #72]	@ 0x48
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d02b      	beq.n	800331e <get_eit_entry+0x86>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f101 0004 	add.w	r0, r1, #4
 80032cc:	db25      	blt.n	800331a <get_eit_entry+0x82>
 80032ce:	f7ff ff91 	bl	80031f4 <selfrel_offset31>
 80032d2:	2300      	movs	r3, #0
 80032d4:	6523      	str	r3, [r4, #80]	@ 0x50
 80032d6:	6803      	ldr	r3, [r0, #0]
 80032d8:	64e0      	str	r0, [r4, #76]	@ 0x4c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	db12      	blt.n	8003304 <get_eit_entry+0x6c>
 80032de:	f7ff ff89 	bl	80031f4 <selfrel_offset31>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2000      	movs	r0, #0
 80032e6:	6123      	str	r3, [r4, #16]
 80032e8:	b003      	add	sp, #12
 80032ea:	bd30      	pop	{r4, r5, pc}
 80032ec:	2300      	movs	r3, #0
 80032ee:	2009      	movs	r0, #9
 80032f0:	6123      	str	r3, [r4, #16]
 80032f2:	b003      	add	sp, #12
 80032f4:	bd30      	pop	{r4, r5, pc}
 80032f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003328 <get_eit_entry+0x90>)
 80032f8:	490c      	ldr	r1, [pc, #48]	@ (800332c <get_eit_entry+0x94>)
 80032fa:	1ac9      	subs	r1, r1, r3
 80032fc:	10c9      	asrs	r1, r1, #3
 80032fe:	4618      	mov	r0, r3
 8003300:	9101      	str	r1, [sp, #4]
 8003302:	e7d5      	b.n	80032b0 <get_eit_entry+0x18>
 8003304:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8003308:	f7ff ffb2 	bl	8003270 <__gnu_unwind_get_pr_addr>
 800330c:	1e03      	subs	r3, r0, #0
 800330e:	bf0c      	ite	eq
 8003310:	2009      	moveq	r0, #9
 8003312:	2000      	movne	r0, #0
 8003314:	6123      	str	r3, [r4, #16]
 8003316:	b003      	add	sp, #12
 8003318:	bd30      	pop	{r4, r5, pc}
 800331a:	2301      	movs	r3, #1
 800331c:	e7da      	b.n	80032d4 <get_eit_entry+0x3c>
 800331e:	2300      	movs	r3, #0
 8003320:	2005      	movs	r0, #5
 8003322:	e7e0      	b.n	80032e6 <get_eit_entry+0x4e>
 8003324:	00000000 	.word	0x00000000
 8003328:	08004410 	.word	0x08004410
 800332c:	08004790 	.word	0x08004790

08003330 <restore_non_core_regs>:
 8003330:	6803      	ldr	r3, [r0, #0]
 8003332:	07da      	lsls	r2, r3, #31
 8003334:	b510      	push	{r4, lr}
 8003336:	4604      	mov	r4, r0
 8003338:	d406      	bmi.n	8003348 <restore_non_core_regs+0x18>
 800333a:	079b      	lsls	r3, r3, #30
 800333c:	f100 0050 	add.w	r0, r0, #80	@ 0x50
 8003340:	d509      	bpl.n	8003356 <restore_non_core_regs+0x26>
 8003342:	f7fc ff19 	bl	8000178 <__gnu_Unwind_Restore_VFP_D>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	0759      	lsls	r1, r3, #29
 800334a:	d509      	bpl.n	8003360 <restore_non_core_regs+0x30>
 800334c:	071a      	lsls	r2, r3, #28
 800334e:	d50e      	bpl.n	800336e <restore_non_core_regs+0x3e>
 8003350:	06db      	lsls	r3, r3, #27
 8003352:	d513      	bpl.n	800337c <restore_non_core_regs+0x4c>
 8003354:	bd10      	pop	{r4, pc}
 8003356:	f7fc ff07 	bl	8000168 <__gnu_Unwind_Restore_VFP>
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	0759      	lsls	r1, r3, #29
 800335e:	d4f5      	bmi.n	800334c <restore_non_core_regs+0x1c>
 8003360:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 8003364:	f7fc ff10 	bl	8000188 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	071a      	lsls	r2, r3, #28
 800336c:	d4f0      	bmi.n	8003350 <restore_non_core_regs+0x20>
 800336e:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 8003372:	f7fc ff11 	bl	8000198 <__gnu_Unwind_Restore_WMMXD>
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	06db      	lsls	r3, r3, #27
 800337a:	d4eb      	bmi.n	8003354 <restore_non_core_regs+0x24>
 800337c:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
 8003380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003384:	f7fc bf4c 	b.w	8000220 <__gnu_Unwind_Restore_WMMXC>

08003388 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8003388:	4603      	mov	r3, r0
 800338a:	6800      	ldr	r0, [r0, #0]
 800338c:	b100      	cbz	r0, 8003390 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800338e:	4418      	add	r0, r3
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop

08003394 <_Unwind_DebugHook>:
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop

08003398 <unwind_phase2>:
 8003398:	b570      	push	{r4, r5, r6, lr}
 800339a:	4604      	mov	r4, r0
 800339c:	460e      	mov	r6, r1
 800339e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80033a0:	4620      	mov	r0, r4
 80033a2:	f7ff ff79 	bl	8003298 <get_eit_entry>
 80033a6:	4605      	mov	r5, r0
 80033a8:	b988      	cbnz	r0, 80033ce <unwind_phase2+0x36>
 80033aa:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80033ac:	6162      	str	r2, [r4, #20]
 80033ae:	6923      	ldr	r3, [r4, #16]
 80033b0:	4632      	mov	r2, r6
 80033b2:	4621      	mov	r1, r4
 80033b4:	2001      	movs	r0, #1
 80033b6:	4798      	blx	r3
 80033b8:	2808      	cmp	r0, #8
 80033ba:	d0f0      	beq.n	800339e <unwind_phase2+0x6>
 80033bc:	2807      	cmp	r0, #7
 80033be:	d106      	bne.n	80033ce <unwind_phase2+0x36>
 80033c0:	4628      	mov	r0, r5
 80033c2:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80033c4:	f7ff ffe6 	bl	8003394 <_Unwind_DebugHook>
 80033c8:	1d30      	adds	r0, r6, #4
 80033ca:	f7fc fec1 	bl	8000150 <__restore_core_regs>
 80033ce:	f000 fdd5 	bl	8003f7c <abort>
 80033d2:	bf00      	nop

080033d4 <unwind_phase2_forced>:
 80033d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033d8:	f101 0c04 	add.w	ip, r1, #4
 80033dc:	68c7      	ldr	r7, [r0, #12]
 80033de:	f8d0 8018 	ldr.w	r8, [r0, #24]
 80033e2:	4606      	mov	r6, r0
 80033e4:	4691      	mov	r9, r2
 80033e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80033ea:	f5ad 7d76 	sub.w	sp, sp, #984	@ 0x3d8
 80033ee:	ac03      	add	r4, sp, #12
 80033f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80033f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80033fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033fe:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003402:	ad02      	add	r5, sp, #8
 8003404:	f04f 0e00 	mov.w	lr, #0
 8003408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800340c:	f8c5 e000 	str.w	lr, [r5]
 8003410:	e021      	b.n	8003456 <unwind_phase2_forced+0x82>
 8003412:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8003414:	6173      	str	r3, [r6, #20]
 8003416:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800341a:	4629      	mov	r1, r5
 800341c:	a87c      	add	r0, sp, #496	@ 0x1f0
 800341e:	f000 fdff 	bl	8004020 <memcpy>
 8003422:	6933      	ldr	r3, [r6, #16]
 8003424:	aa7c      	add	r2, sp, #496	@ 0x1f0
 8003426:	4631      	mov	r1, r6
 8003428:	4650      	mov	r0, sl
 800342a:	4798      	blx	r3
 800342c:	9b8a      	ldr	r3, [sp, #552]	@ 0x228
 800342e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8003430:	4649      	mov	r1, r9
 8003432:	e9cd 5800 	strd	r5, r8, [sp]
 8003436:	4682      	mov	sl, r0
 8003438:	4633      	mov	r3, r6
 800343a:	2001      	movs	r0, #1
 800343c:	4632      	mov	r2, r6
 800343e:	47b8      	blx	r7
 8003440:	4681      	mov	r9, r0
 8003442:	bb30      	cbnz	r0, 8003492 <unwind_phase2_forced+0xbe>
 8003444:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8003448:	a97c      	add	r1, sp, #496	@ 0x1f0
 800344a:	4628      	mov	r0, r5
 800344c:	f000 fde8 	bl	8004020 <memcpy>
 8003450:	f1ba 0f08 	cmp.w	sl, #8
 8003454:	d11a      	bne.n	800348c <unwind_phase2_forced+0xb8>
 8003456:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8003458:	4630      	mov	r0, r6
 800345a:	f7ff ff1d 	bl	8003298 <get_eit_entry>
 800345e:	f109 0909 	add.w	r9, r9, #9
 8003462:	4604      	mov	r4, r0
 8003464:	fa5f fa89 	uxtb.w	sl, r9
 8003468:	2800      	cmp	r0, #0
 800346a:	d0d2      	beq.n	8003412 <unwind_phase2_forced+0x3e>
 800346c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800346e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8003470:	4632      	mov	r2, r6
 8003472:	e9cd 5800 	strd	r5, r8, [sp]
 8003476:	4633      	mov	r3, r6
 8003478:	f04a 0110 	orr.w	r1, sl, #16
 800347c:	2001      	movs	r0, #1
 800347e:	47b8      	blx	r7
 8003480:	b938      	cbnz	r0, 8003492 <unwind_phase2_forced+0xbe>
 8003482:	4620      	mov	r0, r4
 8003484:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
 8003488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800348c:	f1ba 0f07 	cmp.w	sl, #7
 8003490:	d005      	beq.n	800349e <unwind_phase2_forced+0xca>
 8003492:	2409      	movs	r4, #9
 8003494:	4620      	mov	r0, r4
 8003496:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
 800349a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349e:	4648      	mov	r0, r9
 80034a0:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80034a2:	f7ff ff77 	bl	8003394 <_Unwind_DebugHook>
 80034a6:	a803      	add	r0, sp, #12
 80034a8:	f7fc fe52 	bl	8000150 <__restore_core_regs>

080034ac <__gnu_Unwind_RaiseException>:
 80034ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ae:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 80034b0:	640b      	str	r3, [r1, #64]	@ 0x40
 80034b2:	f101 0c04 	add.w	ip, r1, #4
 80034b6:	460e      	mov	r6, r1
 80034b8:	4605      	mov	r5, r0
 80034ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80034be:	b0fb      	sub	sp, #492	@ 0x1ec
 80034c0:	ac01      	add	r4, sp, #4
 80034c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80034c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80034ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034d0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80034d4:	f04f 37ff 	mov.w	r7, #4294967295
 80034d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034dc:	9700      	str	r7, [sp, #0]
 80034de:	e006      	b.n	80034ee <__gnu_Unwind_RaiseException+0x42>
 80034e0:	692b      	ldr	r3, [r5, #16]
 80034e2:	466a      	mov	r2, sp
 80034e4:	4629      	mov	r1, r5
 80034e6:	4798      	blx	r3
 80034e8:	2808      	cmp	r0, #8
 80034ea:	4604      	mov	r4, r0
 80034ec:	d108      	bne.n	8003500 <__gnu_Unwind_RaiseException+0x54>
 80034ee:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80034f0:	4628      	mov	r0, r5
 80034f2:	f7ff fed1 	bl	8003298 <get_eit_entry>
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d0f2      	beq.n	80034e0 <__gnu_Unwind_RaiseException+0x34>
 80034fa:	2009      	movs	r0, #9
 80034fc:	b07b      	add	sp, #492	@ 0x1ec
 80034fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003500:	4668      	mov	r0, sp
 8003502:	f7ff ff15 	bl	8003330 <restore_non_core_regs>
 8003506:	2c06      	cmp	r4, #6
 8003508:	d1f7      	bne.n	80034fa <__gnu_Unwind_RaiseException+0x4e>
 800350a:	4631      	mov	r1, r6
 800350c:	4628      	mov	r0, r5
 800350e:	f7ff ff43 	bl	8003398 <unwind_phase2>
 8003512:	bf00      	nop

08003514 <__gnu_Unwind_ForcedUnwind>:
 8003514:	60c1      	str	r1, [r0, #12]
 8003516:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003518:	6182      	str	r2, [r0, #24]
 800351a:	6419      	str	r1, [r3, #64]	@ 0x40
 800351c:	2200      	movs	r2, #0
 800351e:	4619      	mov	r1, r3
 8003520:	f7ff bf58 	b.w	80033d4 <unwind_phase2_forced>

08003524 <__gnu_Unwind_Resume>:
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	68c6      	ldr	r6, [r0, #12]
 8003528:	6943      	ldr	r3, [r0, #20]
 800352a:	640b      	str	r3, [r1, #64]	@ 0x40
 800352c:	b9ae      	cbnz	r6, 800355a <__gnu_Unwind_Resume+0x36>
 800352e:	6903      	ldr	r3, [r0, #16]
 8003530:	460a      	mov	r2, r1
 8003532:	4604      	mov	r4, r0
 8003534:	460d      	mov	r5, r1
 8003536:	4601      	mov	r1, r0
 8003538:	2002      	movs	r0, #2
 800353a:	4798      	blx	r3
 800353c:	2807      	cmp	r0, #7
 800353e:	d005      	beq.n	800354c <__gnu_Unwind_Resume+0x28>
 8003540:	2808      	cmp	r0, #8
 8003542:	d10f      	bne.n	8003564 <__gnu_Unwind_Resume+0x40>
 8003544:	4629      	mov	r1, r5
 8003546:	4620      	mov	r0, r4
 8003548:	f7ff ff26 	bl	8003398 <unwind_phase2>
 800354c:	4630      	mov	r0, r6
 800354e:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8003550:	f7ff ff20 	bl	8003394 <_Unwind_DebugHook>
 8003554:	1d28      	adds	r0, r5, #4
 8003556:	f7fc fdfb 	bl	8000150 <__restore_core_regs>
 800355a:	2201      	movs	r2, #1
 800355c:	f7ff ff3a 	bl	80033d4 <unwind_phase2_forced>
 8003560:	f000 fd0c 	bl	8003f7c <abort>
 8003564:	f000 fd0a 	bl	8003f7c <abort>

08003568 <__gnu_Unwind_Resume_or_Rethrow>:
 8003568:	68c2      	ldr	r2, [r0, #12]
 800356a:	b122      	cbz	r2, 8003576 <__gnu_Unwind_Resume_or_Rethrow+0xe>
 800356c:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800356e:	640a      	str	r2, [r1, #64]	@ 0x40
 8003570:	2200      	movs	r2, #0
 8003572:	f7ff bf2f 	b.w	80033d4 <unwind_phase2_forced>
 8003576:	f7ff bf99 	b.w	80034ac <__gnu_Unwind_RaiseException>
 800357a:	bf00      	nop

0800357c <_Unwind_VRS_Get>:
 800357c:	2905      	cmp	r1, #5
 800357e:	d815      	bhi.n	80035ac <_Unwind_VRS_Get+0x30>
 8003580:	e8df f001 	tbb	[pc, r1]
 8003584:	0314030a 	.word	0x0314030a
 8003588:	0503      	.short	0x0503
 800358a:	2001      	movs	r0, #1
 800358c:	4770      	bx	lr
 800358e:	9a00      	ldr	r2, [sp, #0]
 8003590:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	2000      	movs	r0, #0
 8003596:	4770      	bx	lr
 8003598:	b943      	cbnz	r3, 80035ac <_Unwind_VRS_Get+0x30>
 800359a:	2a0f      	cmp	r2, #15
 800359c:	d806      	bhi.n	80035ac <_Unwind_VRS_Get+0x30>
 800359e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80035a2:	2000      	movs	r0, #0
 80035a4:	6853      	ldr	r3, [r2, #4]
 80035a6:	9a00      	ldr	r2, [sp, #0]
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	4770      	bx	lr
 80035ac:	2002      	movs	r0, #2
 80035ae:	4770      	bx	lr

080035b0 <_Unwind_GetGR>:
 80035b0:	b500      	push	{lr}
 80035b2:	b085      	sub	sp, #20
 80035b4:	460a      	mov	r2, r1
 80035b6:	2300      	movs	r3, #0
 80035b8:	a903      	add	r1, sp, #12
 80035ba:	9100      	str	r1, [sp, #0]
 80035bc:	4619      	mov	r1, r3
 80035be:	f7ff ffdd 	bl	800357c <_Unwind_VRS_Get>
 80035c2:	9803      	ldr	r0, [sp, #12]
 80035c4:	b005      	add	sp, #20
 80035c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80035ca:	bf00      	nop

080035cc <_Unwind_VRS_Set>:
 80035cc:	2905      	cmp	r1, #5
 80035ce:	d815      	bhi.n	80035fc <_Unwind_VRS_Set+0x30>
 80035d0:	e8df f001 	tbb	[pc, r1]
 80035d4:	0314030a 	.word	0x0314030a
 80035d8:	0503      	.short	0x0503
 80035da:	2001      	movs	r0, #1
 80035dc:	4770      	bx	lr
 80035de:	9b00      	ldr	r3, [sp, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6443      	str	r3, [r0, #68]	@ 0x44
 80035e4:	2000      	movs	r0, #0
 80035e6:	4770      	bx	lr
 80035e8:	b943      	cbnz	r3, 80035fc <_Unwind_VRS_Set+0x30>
 80035ea:	2a0f      	cmp	r2, #15
 80035ec:	d806      	bhi.n	80035fc <_Unwind_VRS_Set+0x30>
 80035ee:	9b00      	ldr	r3, [sp, #0]
 80035f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6053      	str	r3, [r2, #4]
 80035f8:	2000      	movs	r0, #0
 80035fa:	4770      	bx	lr
 80035fc:	2002      	movs	r0, #2
 80035fe:	4770      	bx	lr

08003600 <_Unwind_SetGR>:
 8003600:	b510      	push	{r4, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	2300      	movs	r3, #0
 8003606:	ac03      	add	r4, sp, #12
 8003608:	9203      	str	r2, [sp, #12]
 800360a:	9400      	str	r4, [sp, #0]
 800360c:	460a      	mov	r2, r1
 800360e:	4619      	mov	r1, r3
 8003610:	f7ff ffdc 	bl	80035cc <_Unwind_VRS_Set>
 8003614:	b004      	add	sp, #16
 8003616:	bd10      	pop	{r4, pc}

08003618 <__gnu_Unwind_Backtrace>:
 8003618:	b570      	push	{r4, r5, r6, lr}
 800361a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800361c:	6413      	str	r3, [r2, #64]	@ 0x40
 800361e:	f102 0c04 	add.w	ip, r2, #4
 8003622:	4605      	mov	r5, r0
 8003624:	460c      	mov	r4, r1
 8003626:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800362a:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 800362e:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 8003632:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003636:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800363a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800363e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003642:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003646:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800364a:	f04f 36ff 	mov.w	r6, #4294967295
 800364e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8003652:	9616      	str	r6, [sp, #88]	@ 0x58
 8003654:	e010      	b.n	8003678 <__gnu_Unwind_Backtrace+0x60>
 8003656:	f7ff ffd3 	bl	8003600 <_Unwind_SetGR>
 800365a:	4621      	mov	r1, r4
 800365c:	a816      	add	r0, sp, #88	@ 0x58
 800365e:	47a8      	blx	r5
 8003660:	4603      	mov	r3, r0
 8003662:	aa16      	add	r2, sp, #88	@ 0x58
 8003664:	2008      	movs	r0, #8
 8003666:	4669      	mov	r1, sp
 8003668:	b983      	cbnz	r3, 800368c <__gnu_Unwind_Backtrace+0x74>
 800366a:	9b04      	ldr	r3, [sp, #16]
 800366c:	4798      	blx	r3
 800366e:	2805      	cmp	r0, #5
 8003670:	4606      	mov	r6, r0
 8003672:	d00c      	beq.n	800368e <__gnu_Unwind_Backtrace+0x76>
 8003674:	2809      	cmp	r0, #9
 8003676:	d009      	beq.n	800368c <__gnu_Unwind_Backtrace+0x74>
 8003678:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800367a:	4668      	mov	r0, sp
 800367c:	f7ff fe0c 	bl	8003298 <get_eit_entry>
 8003680:	4603      	mov	r3, r0
 8003682:	210c      	movs	r1, #12
 8003684:	466a      	mov	r2, sp
 8003686:	a816      	add	r0, sp, #88	@ 0x58
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0e4      	beq.n	8003656 <__gnu_Unwind_Backtrace+0x3e>
 800368c:	2609      	movs	r6, #9
 800368e:	a816      	add	r0, sp, #88	@ 0x58
 8003690:	f7ff fe4e 	bl	8003330 <restore_non_core_regs>
 8003694:	4630      	mov	r0, r6
 8003696:	f50d 7d10 	add.w	sp, sp, #576	@ 0x240
 800369a:	bd70      	pop	{r4, r5, r6, pc}

0800369c <__gnu_unwind_pr_common>:
 800369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a0:	4616      	mov	r6, r2
 80036a2:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80036a4:	b089      	sub	sp, #36	@ 0x24
 80036a6:	460d      	mov	r5, r1
 80036a8:	f852 1b04 	ldr.w	r1, [r2], #4
 80036ac:	9206      	str	r2, [sp, #24]
 80036ae:	f000 0c03 	and.w	ip, r0, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d079      	beq.n	80037aa <__gnu_unwind_pr_common+0x10e>
 80036b6:	0c0c      	lsrs	r4, r1, #16
 80036b8:	f88d 401d 	strb.w	r4, [sp, #29]
 80036bc:	0409      	lsls	r1, r1, #16
 80036be:	b2e4      	uxtb	r4, r4
 80036c0:	9105      	str	r1, [sp, #20]
 80036c2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80036c6:	2102      	movs	r1, #2
 80036c8:	f88d 101c 	strb.w	r1, [sp, #28]
 80036cc:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 80036ce:	f1bc 0f02 	cmp.w	ip, #2
 80036d2:	bf08      	it	eq
 80036d4:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 80036d6:	f011 0801 	ands.w	r8, r1, #1
 80036da:	d009      	beq.n	80036f0 <__gnu_unwind_pr_common+0x54>
 80036dc:	a905      	add	r1, sp, #20
 80036de:	4630      	mov	r0, r6
 80036e0:	f000 face 	bl	8003c80 <__gnu_unwind_execute>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d156      	bne.n	8003796 <__gnu_unwind_pr_common+0xfa>
 80036e8:	2008      	movs	r0, #8
 80036ea:	b009      	add	sp, #36	@ 0x24
 80036ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036f0:	6817      	ldr	r7, [r2, #0]
 80036f2:	2f00      	cmp	r7, #0
 80036f4:	d0f2      	beq.n	80036dc <__gnu_unwind_pr_common+0x40>
 80036f6:	f000 0108 	and.w	r1, r0, #8
 80036fa:	e9cd 1801 	strd	r1, r8, [sp, #4]
 80036fe:	46e3      	mov	fp, ip
 8003700:	469a      	mov	sl, r3
 8003702:	f1ba 0f02 	cmp.w	sl, #2
 8003706:	d04c      	beq.n	80037a2 <__gnu_unwind_pr_common+0x106>
 8003708:	8817      	ldrh	r7, [r2, #0]
 800370a:	8854      	ldrh	r4, [r2, #2]
 800370c:	f102 0904 	add.w	r9, r2, #4
 8003710:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 8003712:	f024 0301 	bic.w	r3, r4, #1
 8003716:	210f      	movs	r1, #15
 8003718:	4630      	mov	r0, r6
 800371a:	eb03 0802 	add.w	r8, r3, r2
 800371e:	f7ff ff47 	bl	80035b0 <_Unwind_GetGR>
 8003722:	4580      	cmp	r8, r0
 8003724:	d83b      	bhi.n	800379e <__gnu_unwind_pr_common+0x102>
 8003726:	f027 0201 	bic.w	r2, r7, #1
 800372a:	eb02 0308 	add.w	r3, r2, r8
 800372e:	4283      	cmp	r3, r0
 8003730:	bf94      	ite	ls
 8003732:	2300      	movls	r3, #0
 8003734:	2301      	movhi	r3, #1
 8003736:	0064      	lsls	r4, r4, #1
 8003738:	f004 0402 	and.w	r4, r4, #2
 800373c:	f007 0701 	and.w	r7, r7, #1
 8003740:	4327      	orrs	r7, r4
 8003742:	2f01      	cmp	r7, #1
 8003744:	d04e      	beq.n	80037e4 <__gnu_unwind_pr_common+0x148>
 8003746:	2f02      	cmp	r7, #2
 8003748:	d035      	beq.n	80037b6 <__gnu_unwind_pr_common+0x11a>
 800374a:	bb27      	cbnz	r7, 8003796 <__gnu_unwind_pr_common+0xfa>
 800374c:	f1bb 0f00 	cmp.w	fp, #0
 8003750:	d002      	beq.n	8003758 <__gnu_unwind_pr_common+0xbc>
 8003752:	2b00      	cmp	r3, #0
 8003754:	f040 80d3 	bne.w	80038fe <__gnu_unwind_pr_common+0x262>
 8003758:	f109 0204 	add.w	r2, r9, #4
 800375c:	6817      	ldr	r7, [r2, #0]
 800375e:	2f00      	cmp	r7, #0
 8003760:	d1cf      	bne.n	8003702 <__gnu_unwind_pr_common+0x66>
 8003762:	a905      	add	r1, sp, #20
 8003764:	4630      	mov	r0, r6
 8003766:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800376a:	f000 fa89 	bl	8003c80 <__gnu_unwind_execute>
 800376e:	b990      	cbnz	r0, 8003796 <__gnu_unwind_pr_common+0xfa>
 8003770:	f1b8 0f00 	cmp.w	r8, #0
 8003774:	d0b8      	beq.n	80036e8 <__gnu_unwind_pr_common+0x4c>
 8003776:	210f      	movs	r1, #15
 8003778:	4630      	mov	r0, r6
 800377a:	f7ff ff19 	bl	80035b0 <_Unwind_GetGR>
 800377e:	210e      	movs	r1, #14
 8003780:	4602      	mov	r2, r0
 8003782:	4630      	mov	r0, r6
 8003784:	f7ff ff3c 	bl	8003600 <_Unwind_SetGR>
 8003788:	4a6c      	ldr	r2, [pc, #432]	@ (800393c <__gnu_unwind_pr_common+0x2a0>)
 800378a:	210f      	movs	r1, #15
 800378c:	4630      	mov	r0, r6
 800378e:	f7ff ff37 	bl	8003600 <_Unwind_SetGR>
 8003792:	2007      	movs	r0, #7
 8003794:	e000      	b.n	8003798 <__gnu_unwind_pr_common+0xfc>
 8003796:	2009      	movs	r0, #9
 8003798:	b009      	add	sp, #36	@ 0x24
 800379a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800379e:	2300      	movs	r3, #0
 80037a0:	e7c9      	b.n	8003736 <__gnu_unwind_pr_common+0x9a>
 80037a2:	6854      	ldr	r4, [r2, #4]
 80037a4:	f102 0908 	add.w	r9, r2, #8
 80037a8:	e7b2      	b.n	8003710 <__gnu_unwind_pr_common+0x74>
 80037aa:	0209      	lsls	r1, r1, #8
 80037ac:	9105      	str	r1, [sp, #20]
 80037ae:	f88d 301d 	strb.w	r3, [sp, #29]
 80037b2:	2103      	movs	r1, #3
 80037b4:	e788      	b.n	80036c8 <__gnu_unwind_pr_common+0x2c>
 80037b6:	f8d9 4000 	ldr.w	r4, [r9]
 80037ba:	f024 4800 	bic.w	r8, r4, #2147483648	@ 0x80000000
 80037be:	f1bb 0f00 	cmp.w	fp, #0
 80037c2:	d147      	bne.n	8003854 <__gnu_unwind_pr_common+0x1b8>
 80037c4:	b12b      	cbz	r3, 80037d2 <__gnu_unwind_pr_common+0x136>
 80037c6:	9b01      	ldr	r3, [sp, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d05c      	beq.n	8003886 <__gnu_unwind_pr_common+0x1ea>
 80037cc:	f1b8 0f00 	cmp.w	r8, #0
 80037d0:	d059      	beq.n	8003886 <__gnu_unwind_pr_common+0x1ea>
 80037d2:	2c00      	cmp	r4, #0
 80037d4:	da01      	bge.n	80037da <__gnu_unwind_pr_common+0x13e>
 80037d6:	f109 0904 	add.w	r9, r9, #4
 80037da:	f108 0201 	add.w	r2, r8, #1
 80037de:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80037e2:	e7bb      	b.n	800375c <__gnu_unwind_pr_common+0xc0>
 80037e4:	f1bb 0f00 	cmp.w	fp, #0
 80037e8:	d11c      	bne.n	8003824 <__gnu_unwind_pr_common+0x188>
 80037ea:	b1c3      	cbz	r3, 800381e <__gnu_unwind_pr_common+0x182>
 80037ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80037f0:	f8d9 2000 	ldr.w	r2, [r9]
 80037f4:	1c99      	adds	r1, r3, #2
 80037f6:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80037fa:	d0cc      	beq.n	8003796 <__gnu_unwind_pr_common+0xfa>
 80037fc:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 8003800:	3301      	adds	r3, #1
 8003802:	9404      	str	r4, [sp, #16]
 8003804:	f000 808e 	beq.w	8003924 <__gnu_unwind_pr_common+0x288>
 8003808:	f109 0004 	add.w	r0, r9, #4
 800380c:	f7ff fdbc 	bl	8003388 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8003810:	ab04      	add	r3, sp, #16
 8003812:	4601      	mov	r1, r0
 8003814:	4628      	mov	r0, r5
 8003816:	f3af 8000 	nop.w
 800381a:	2800      	cmp	r0, #0
 800381c:	d159      	bne.n	80038d2 <__gnu_unwind_pr_common+0x236>
 800381e:	f109 0208 	add.w	r2, r9, #8
 8003822:	e79b      	b.n	800375c <__gnu_unwind_pr_common+0xc0>
 8003824:	210d      	movs	r1, #13
 8003826:	4630      	mov	r0, r6
 8003828:	f7ff fec2 	bl	80035b0 <_Unwind_GetGR>
 800382c:	6a2c      	ldr	r4, [r5, #32]
 800382e:	4284      	cmp	r4, r0
 8003830:	d1f5      	bne.n	800381e <__gnu_unwind_pr_common+0x182>
 8003832:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003834:	4599      	cmp	r9, r3
 8003836:	d1f2      	bne.n	800381e <__gnu_unwind_pr_common+0x182>
 8003838:	4648      	mov	r0, r9
 800383a:	f7ff fcdb 	bl	80031f4 <selfrel_offset31>
 800383e:	210f      	movs	r1, #15
 8003840:	4602      	mov	r2, r0
 8003842:	4630      	mov	r0, r6
 8003844:	f7ff fedc 	bl	8003600 <_Unwind_SetGR>
 8003848:	462a      	mov	r2, r5
 800384a:	2100      	movs	r1, #0
 800384c:	4630      	mov	r0, r6
 800384e:	f7ff fed7 	bl	8003600 <_Unwind_SetGR>
 8003852:	e79e      	b.n	8003792 <__gnu_unwind_pr_common+0xf6>
 8003854:	210d      	movs	r1, #13
 8003856:	4630      	mov	r0, r6
 8003858:	f7ff feaa 	bl	80035b0 <_Unwind_GetGR>
 800385c:	6a2f      	ldr	r7, [r5, #32]
 800385e:	4287      	cmp	r7, r0
 8003860:	d1b7      	bne.n	80037d2 <__gnu_unwind_pr_common+0x136>
 8003862:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003864:	4599      	cmp	r9, r3
 8003866:	d1b4      	bne.n	80037d2 <__gnu_unwind_pr_common+0x136>
 8003868:	2400      	movs	r4, #0
 800386a:	2304      	movs	r3, #4
 800386c:	e9c5 430b 	strd	r4, r3, [r5, #44]	@ 0x2c
 8003870:	444b      	add	r3, r9
 8003872:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 8003876:	636b      	str	r3, [r5, #52]	@ 0x34
 8003878:	f8d9 3000 	ldr.w	r3, [r9]
 800387c:	42a3      	cmp	r3, r4
 800387e:	db58      	blt.n	8003932 <__gnu_unwind_pr_common+0x296>
 8003880:	2301      	movs	r3, #1
 8003882:	9302      	str	r3, [sp, #8]
 8003884:	e7a9      	b.n	80037da <__gnu_unwind_pr_common+0x13e>
 8003886:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800388a:	f8cd b00c 	str.w	fp, [sp, #12]
 800388e:	f109 0704 	add.w	r7, r9, #4
 8003892:	46b3      	mov	fp, r6
 8003894:	2400      	movs	r4, #0
 8003896:	461e      	mov	r6, r3
 8003898:	e00b      	b.n	80038b2 <__gnu_unwind_pr_common+0x216>
 800389a:	4638      	mov	r0, r7
 800389c:	9604      	str	r6, [sp, #16]
 800389e:	f7ff fd73 	bl	8003388 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80038a2:	2200      	movs	r2, #0
 80038a4:	4601      	mov	r1, r0
 80038a6:	ab04      	add	r3, sp, #16
 80038a8:	4628      	mov	r0, r5
 80038aa:	f3af 8000 	nop.w
 80038ae:	3704      	adds	r7, #4
 80038b0:	b9f8      	cbnz	r0, 80038f2 <__gnu_unwind_pr_common+0x256>
 80038b2:	4544      	cmp	r4, r8
 80038b4:	f104 0401 	add.w	r4, r4, #1
 80038b8:	d1ef      	bne.n	800389a <__gnu_unwind_pr_common+0x1fe>
 80038ba:	210d      	movs	r1, #13
 80038bc:	4658      	mov	r0, fp
 80038be:	f7ff fe77 	bl	80035b0 <_Unwind_GetGR>
 80038c2:	9b04      	ldr	r3, [sp, #16]
 80038c4:	f8c5 9028 	str.w	r9, [r5, #40]	@ 0x28
 80038c8:	4602      	mov	r2, r0
 80038ca:	e9c5 2308 	strd	r2, r3, [r5, #32]
 80038ce:	2006      	movs	r0, #6
 80038d0:	e762      	b.n	8003798 <__gnu_unwind_pr_common+0xfc>
 80038d2:	4604      	mov	r4, r0
 80038d4:	210d      	movs	r1, #13
 80038d6:	4630      	mov	r0, r6
 80038d8:	f7ff fe6a 	bl	80035b0 <_Unwind_GetGR>
 80038dc:	9e04      	ldr	r6, [sp, #16]
 80038de:	6228      	str	r0, [r5, #32]
 80038e0:	2c02      	cmp	r4, #2
 80038e2:	bf04      	itt	eq
 80038e4:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 80038e6:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 80038ea:	e9c5 6909 	strd	r6, r9, [r5, #36]	@ 0x24
 80038ee:	2006      	movs	r0, #6
 80038f0:	e752      	b.n	8003798 <__gnu_unwind_pr_common+0xfc>
 80038f2:	465e      	mov	r6, fp
 80038f4:	f8d9 4000 	ldr.w	r4, [r9]
 80038f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80038fc:	e769      	b.n	80037d2 <__gnu_unwind_pr_common+0x136>
 80038fe:	4648      	mov	r0, r9
 8003900:	f7ff fc78 	bl	80031f4 <selfrel_offset31>
 8003904:	f109 0304 	add.w	r3, r9, #4
 8003908:	4604      	mov	r4, r0
 800390a:	63ab      	str	r3, [r5, #56]	@ 0x38
 800390c:	4628      	mov	r0, r5
 800390e:	f3af 8000 	nop.w
 8003912:	2800      	cmp	r0, #0
 8003914:	f43f af3f 	beq.w	8003796 <__gnu_unwind_pr_common+0xfa>
 8003918:	4622      	mov	r2, r4
 800391a:	210f      	movs	r1, #15
 800391c:	4630      	mov	r0, r6
 800391e:	f7ff fe6f 	bl	8003600 <_Unwind_SetGR>
 8003922:	e736      	b.n	8003792 <__gnu_unwind_pr_common+0xf6>
 8003924:	4630      	mov	r0, r6
 8003926:	210d      	movs	r1, #13
 8003928:	f7ff fe42 	bl	80035b0 <_Unwind_GetGR>
 800392c:	4626      	mov	r6, r4
 800392e:	6228      	str	r0, [r5, #32]
 8003930:	e7db      	b.n	80038ea <__gnu_unwind_pr_common+0x24e>
 8003932:	f108 0201 	add.w	r2, r8, #1
 8003936:	eb09 0082 	add.w	r0, r9, r2, lsl #2
 800393a:	e77e      	b.n	800383a <__gnu_unwind_pr_common+0x19e>
 800393c:	00000000 	.word	0x00000000

08003940 <__aeabi_unwind_cpp_pr0>:
 8003940:	2300      	movs	r3, #0
 8003942:	f7ff beab 	b.w	800369c <__gnu_unwind_pr_common>
 8003946:	bf00      	nop

08003948 <__aeabi_unwind_cpp_pr1>:
 8003948:	2301      	movs	r3, #1
 800394a:	f7ff bea7 	b.w	800369c <__gnu_unwind_pr_common>
 800394e:	bf00      	nop

08003950 <__aeabi_unwind_cpp_pr2>:
 8003950:	2302      	movs	r3, #2
 8003952:	f7ff bea3 	b.w	800369c <__gnu_unwind_pr_common>
 8003956:	bf00      	nop

08003958 <_Unwind_VRS_Pop>:
 8003958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800395c:	4606      	mov	r6, r0
 800395e:	b0c4      	sub	sp, #272	@ 0x110
 8003960:	4614      	mov	r4, r2
 8003962:	2905      	cmp	r1, #5
 8003964:	f200 80d8 	bhi.w	8003b18 <_Unwind_VRS_Pop+0x1c0>
 8003968:	e8df f011 	tbh	[pc, r1, lsl #1]
 800396c:	002d0012 	.word	0x002d0012
 8003970:	006c00d6 	.word	0x006c00d6
 8003974:	00060091 	.word	0x00060091
 8003978:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800397a:	2c00      	cmp	r4, #0
 800397c:	f040 80cc 	bne.w	8003b18 <_Unwind_VRS_Pop+0x1c0>
 8003980:	f853 2b04 	ldr.w	r2, [r3], #4
 8003984:	6442      	str	r2, [r0, #68]	@ 0x44
 8003986:	6383      	str	r3, [r0, #56]	@ 0x38
 8003988:	2000      	movs	r0, #0
 800398a:	b044      	add	sp, #272	@ 0x110
 800398c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003990:	2b00      	cmp	r3, #0
 8003992:	f040 80c1 	bne.w	8003b18 <_Unwind_VRS_Pop+0x1c0>
 8003996:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8003998:	fa1f fc84 	uxth.w	ip, r4
 800399c:	2001      	movs	r0, #1
 800399e:	f106 0e04 	add.w	lr, r6, #4
 80039a2:	fa00 f103 	lsl.w	r1, r0, r3
 80039a6:	ea11 0f0c 	tst.w	r1, ip
 80039aa:	462a      	mov	r2, r5
 80039ac:	d004      	beq.n	80039b8 <_Unwind_VRS_Pop+0x60>
 80039ae:	f852 1b04 	ldr.w	r1, [r2], #4
 80039b2:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
 80039b6:	4615      	mov	r5, r2
 80039b8:	3301      	adds	r3, #1
 80039ba:	2b10      	cmp	r3, #16
 80039bc:	d1f1      	bne.n	80039a2 <_Unwind_VRS_Pop+0x4a>
 80039be:	04a7      	lsls	r7, r4, #18
 80039c0:	d4e2      	bmi.n	8003988 <_Unwind_VRS_Pop+0x30>
 80039c2:	63b5      	str	r5, [r6, #56]	@ 0x38
 80039c4:	e7e0      	b.n	8003988 <_Unwind_VRS_Pop+0x30>
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	ea4f 4714 	mov.w	r7, r4, lsr #16
 80039cc:	b2a4      	uxth	r4, r4
 80039ce:	f000 8083 	beq.w	8003ad8 <_Unwind_VRS_Pop+0x180>
 80039d2:	2b05      	cmp	r3, #5
 80039d4:	f040 80a0 	bne.w	8003b18 <_Unwind_VRS_Pop+0x1c0>
 80039d8:	eb07 0804 	add.w	r8, r7, r4
 80039dc:	f1b8 0f20 	cmp.w	r8, #32
 80039e0:	f200 809a 	bhi.w	8003b18 <_Unwind_VRS_Pop+0x1c0>
 80039e4:	2f0f      	cmp	r7, #15
 80039e6:	f240 8099 	bls.w	8003b1c <_Unwind_VRS_Pop+0x1c4>
 80039ea:	2c00      	cmp	r4, #0
 80039ec:	d0cc      	beq.n	8003988 <_Unwind_VRS_Pop+0x30>
 80039ee:	6802      	ldr	r2, [r0, #0]
 80039f0:	0750      	lsls	r0, r2, #29
 80039f2:	f100 8118 	bmi.w	8003c26 <_Unwind_VRS_Pop+0x2ce>
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	ad02      	add	r5, sp, #8
 80039fa:	4628      	mov	r0, r5
 80039fc:	f7fc fbc8 	bl	8000190 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8003a00:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8003a04:	f1a7 0010 	sub.w	r0, r7, #16
 8003a08:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8003a0a:	9b01      	ldr	r3, [sp, #4]
 8003a0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003a10:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8003a14:	f10c 0c01 	add.w	ip, ip, #1
 8003a18:	3804      	subs	r0, #4
 8003a1a:	eb01 028c 	add.w	r2, r1, ip, lsl #2
 8003a1e:	f851 4b04 	ldr.w	r4, [r1], #4
 8003a22:	f840 4f04 	str.w	r4, [r0, #4]!
 8003a26:	4291      	cmp	r1, r2
 8003a28:	d1f9      	bne.n	8003a1e <_Unwind_VRS_Pop+0xc6>
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	f000 80de 	beq.w	8003bec <_Unwind_VRS_Pop+0x294>
 8003a30:	2f0f      	cmp	r7, #15
 8003a32:	63b1      	str	r1, [r6, #56]	@ 0x38
 8003a34:	d802      	bhi.n	8003a3c <_Unwind_VRS_Pop+0xe4>
 8003a36:	a822      	add	r0, sp, #136	@ 0x88
 8003a38:	f7fc fb9e 	bl	8000178 <__gnu_Unwind_Restore_VFP_D>
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f7fc fba3 	bl	8000188 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8003a42:	e7a1      	b.n	8003988 <_Unwind_VRS_Pop+0x30>
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d167      	bne.n	8003b18 <_Unwind_VRS_Pop+0x1c0>
 8003a48:	b2a7      	uxth	r7, r4
 8003a4a:	eb07 4314 	add.w	r3, r7, r4, lsr #16
 8003a4e:	2b10      	cmp	r3, #16
 8003a50:	ea4f 4414 	mov.w	r4, r4, lsr #16
 8003a54:	d860      	bhi.n	8003b18 <_Unwind_VRS_Pop+0x1c0>
 8003a56:	6803      	ldr	r3, [r0, #0]
 8003a58:	0719      	lsls	r1, r3, #28
 8003a5a:	f100 80bf 	bmi.w	8003bdc <_Unwind_VRS_Pop+0x284>
 8003a5e:	ad22      	add	r5, sp, #136	@ 0x88
 8003a60:	4628      	mov	r0, r5
 8003a62:	f7fc fbbb 	bl	80001dc <__gnu_Unwind_Save_WMMXD>
 8003a66:	007a      	lsls	r2, r7, #1
 8003a68:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 8003a6a:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8003a6e:	1e53      	subs	r3, r2, #1
 8003a70:	b142      	cbz	r2, 8003a84 <_Unwind_VRS_Pop+0x12c>
 8003a72:	1b01      	subs	r1, r0, r4
 8003a74:	5862      	ldr	r2, [r4, r1]
 8003a76:	f844 2b04 	str.w	r2, [r4], #4
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	d1f9      	bne.n	8003a74 <_Unwind_VRS_Pop+0x11c>
 8003a80:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8003a84:	63b0      	str	r0, [r6, #56]	@ 0x38
 8003a86:	4628      	mov	r0, r5
 8003a88:	f7fc fb86 	bl	8000198 <__gnu_Unwind_Restore_WMMXD>
 8003a8c:	e77c      	b.n	8003988 <_Unwind_VRS_Pop+0x30>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d142      	bne.n	8003b18 <_Unwind_VRS_Pop+0x1c0>
 8003a92:	2c10      	cmp	r4, #16
 8003a94:	d840      	bhi.n	8003b18 <_Unwind_VRS_Pop+0x1c0>
 8003a96:	6803      	ldr	r3, [r0, #0]
 8003a98:	06dd      	lsls	r5, r3, #27
 8003a9a:	f100 8097 	bmi.w	8003bcc <_Unwind_VRS_Pop+0x274>
 8003a9e:	ad22      	add	r5, sp, #136	@ 0x88
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	f7fc fbc7 	bl	8000234 <__gnu_Unwind_Save_WMMXC>
 8003aa6:	6bb7      	ldr	r7, [r6, #56]	@ 0x38
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f04f 0c01 	mov.w	ip, #1
 8003ab0:	fa0c f203 	lsl.w	r2, ip, r3
 8003ab4:	4222      	tst	r2, r4
 8003ab6:	4638      	mov	r0, r7
 8003ab8:	f103 0301 	add.w	r3, r3, #1
 8003abc:	d003      	beq.n	8003ac6 <_Unwind_VRS_Pop+0x16e>
 8003abe:	f850 2b04 	ldr.w	r2, [r0], #4
 8003ac2:	600a      	str	r2, [r1, #0]
 8003ac4:	4607      	mov	r7, r0
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	f101 0104 	add.w	r1, r1, #4
 8003acc:	d1f0      	bne.n	8003ab0 <_Unwind_VRS_Pop+0x158>
 8003ace:	63b7      	str	r7, [r6, #56]	@ 0x38
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	f7fc fba5 	bl	8000220 <__gnu_Unwind_Restore_WMMXC>
 8003ad6:	e757      	b.n	8003988 <_Unwind_VRS_Pop+0x30>
 8003ad8:	193a      	adds	r2, r7, r4
 8003ada:	2a10      	cmp	r2, #16
 8003adc:	d81c      	bhi.n	8003b18 <_Unwind_VRS_Pop+0x1c0>
 8003ade:	2f10      	cmp	r7, #16
 8003ae0:	d01a      	beq.n	8003b18 <_Unwind_VRS_Pop+0x1c0>
 8003ae2:	6802      	ldr	r2, [r0, #0]
 8003ae4:	07d0      	lsls	r0, r2, #31
 8003ae6:	d508      	bpl.n	8003afa <_Unwind_VRS_Pop+0x1a2>
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f022 0203 	bic.w	r2, r2, #3
 8003aee:	f840 2b50 	str.w	r2, [r0], #80
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	f7fc fb3c 	bl	8000170 <__gnu_Unwind_Save_VFP>
 8003af8:	9b01      	ldr	r3, [sp, #4]
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	ad22      	add	r5, sp, #136	@ 0x88
 8003afe:	4628      	mov	r0, r5
 8003b00:	f7fc fb36 	bl	8000170 <__gnu_Unwind_Save_VFP>
 8003b04:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8003b06:	9b01      	ldr	r3, [sp, #4]
 8003b08:	2c00      	cmp	r4, #0
 8003b0a:	d158      	bne.n	8003bbe <_Unwind_VRS_Pop+0x266>
 8003b0c:	3204      	adds	r2, #4
 8003b0e:	63b2      	str	r2, [r6, #56]	@ 0x38
 8003b10:	4628      	mov	r0, r5
 8003b12:	f7fc fb29 	bl	8000168 <__gnu_Unwind_Restore_VFP>
 8003b16:	e737      	b.n	8003988 <_Unwind_VRS_Pop+0x30>
 8003b18:	2002      	movs	r0, #2
 8003b1a:	e736      	b.n	800398a <_Unwind_VRS_Pop+0x32>
 8003b1c:	f1b8 0f10 	cmp.w	r8, #16
 8003b20:	6802      	ldr	r2, [r0, #0]
 8003b22:	d965      	bls.n	8003bf0 <_Unwind_VRS_Pop+0x298>
 8003b24:	07d4      	lsls	r4, r2, #31
 8003b26:	d572      	bpl.n	8003c0e <_Unwind_VRS_Pop+0x2b6>
 8003b28:	f022 0201 	bic.w	r2, r2, #1
 8003b2c:	f042 0202 	orr.w	r2, r2, #2
 8003b30:	f840 2b50 	str.w	r2, [r0], #80
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	f7fc fb23 	bl	8000180 <__gnu_Unwind_Save_VFP_D>
 8003b3a:	6832      	ldr	r2, [r6, #0]
 8003b3c:	9b01      	ldr	r3, [sp, #4]
 8003b3e:	f012 0f04 	tst.w	r2, #4
 8003b42:	d166      	bne.n	8003c12 <_Unwind_VRS_Pop+0x2ba>
 8003b44:	ad22      	add	r5, sp, #136	@ 0x88
 8003b46:	4628      	mov	r0, r5
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	f7fc fb19 	bl	8000180 <__gnu_Unwind_Save_VFP_D>
 8003b4e:	a802      	add	r0, sp, #8
 8003b50:	f7fc fb1e 	bl	8000190 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8003b54:	f1c7 0110 	rsb	r1, r7, #16
 8003b58:	0049      	lsls	r1, r1, #1
 8003b5a:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8003b5c:	9b01      	ldr	r3, [sp, #4]
 8003b5e:	f1a8 0c10 	sub.w	ip, r8, #16
 8003b62:	1e4c      	subs	r4, r1, #1
 8003b64:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
 8003b68:	3401      	adds	r4, #1
 8003b6a:	3804      	subs	r0, #4
 8003b6c:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8003b70:	f852 4b04 	ldr.w	r4, [r2], #4
 8003b74:	f840 4f04 	str.w	r4, [r0, #4]!
 8003b78:	428a      	cmp	r2, r1
 8003b7a:	d1f9      	bne.n	8003b70 <_Unwind_VRS_Pop+0x218>
 8003b7c:	f1bc 0f00 	cmp.w	ip, #0
 8003b80:	d05a      	beq.n	8003c38 <_Unwind_VRS_Pop+0x2e0>
 8003b82:	2f10      	cmp	r7, #16
 8003b84:	4638      	mov	r0, r7
 8003b86:	bf38      	it	cc
 8003b88:	2010      	movcc	r0, #16
 8003b8a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003b8e:	3810      	subs	r0, #16
 8003b90:	ad02      	add	r5, sp, #8
 8003b92:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003b96:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8003b9a:	e73b      	b.n	8003a14 <_Unwind_VRS_Pop+0xbc>
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	f042 0202 	orr.w	r2, r2, #2
 8003ba6:	f840 2b50 	str.w	r2, [r0], #80
 8003baa:	ad22      	add	r5, sp, #136	@ 0x88
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	f7fc fae7 	bl	8000180 <__gnu_Unwind_Save_VFP_D>
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	f7fc fae4 	bl	8000180 <__gnu_Unwind_Save_VFP_D>
 8003bb8:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8003bba:	b324      	cbz	r4, 8003c06 <_Unwind_VRS_Pop+0x2ae>
 8003bbc:	9b01      	ldr	r3, [sp, #4]
 8003bbe:	0064      	lsls	r4, r4, #1
 8003bc0:	3c01      	subs	r4, #1
 8003bc2:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
 8003bc6:	f04f 0c00 	mov.w	ip, #0
 8003bca:	e7cd      	b.n	8003b68 <_Unwind_VRS_Pop+0x210>
 8003bcc:	f023 0310 	bic.w	r3, r3, #16
 8003bd0:	6003      	str	r3, [r0, #0]
 8003bd2:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 8003bd6:	f7fc fb2d 	bl	8000234 <__gnu_Unwind_Save_WMMXC>
 8003bda:	e760      	b.n	8003a9e <_Unwind_VRS_Pop+0x146>
 8003bdc:	f023 0308 	bic.w	r3, r3, #8
 8003be0:	6003      	str	r3, [r0, #0]
 8003be2:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 8003be6:	f7fc faf9 	bl	80001dc <__gnu_Unwind_Save_WMMXD>
 8003bea:	e738      	b.n	8003a5e <_Unwind_VRS_Pop+0x106>
 8003bec:	ad22      	add	r5, sp, #136	@ 0x88
 8003bee:	e78d      	b.n	8003b0c <_Unwind_VRS_Pop+0x1b4>
 8003bf0:	07d1      	lsls	r1, r2, #31
 8003bf2:	d4d3      	bmi.n	8003b9c <_Unwind_VRS_Pop+0x244>
 8003bf4:	ad22      	add	r5, sp, #136	@ 0x88
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	f7fc fac1 	bl	8000180 <__gnu_Unwind_Save_VFP_D>
 8003bfe:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8003c00:	9b01      	ldr	r3, [sp, #4]
 8003c02:	2c00      	cmp	r4, #0
 8003c04:	d1db      	bne.n	8003bbe <_Unwind_VRS_Pop+0x266>
 8003c06:	4628      	mov	r0, r5
 8003c08:	f7fc fab6 	bl	8000178 <__gnu_Unwind_Restore_VFP_D>
 8003c0c:	e6bc      	b.n	8003988 <_Unwind_VRS_Pop+0x30>
 8003c0e:	0754      	lsls	r4, r2, #29
 8003c10:	d598      	bpl.n	8003b44 <_Unwind_VRS_Pop+0x1ec>
 8003c12:	4630      	mov	r0, r6
 8003c14:	f022 0204 	bic.w	r2, r2, #4
 8003c18:	f840 2bd8 	str.w	r2, [r0], #216
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	f7fc fab7 	bl	8000190 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8003c22:	9b01      	ldr	r3, [sp, #4]
 8003c24:	e78e      	b.n	8003b44 <_Unwind_VRS_Pop+0x1ec>
 8003c26:	4630      	mov	r0, r6
 8003c28:	f022 0204 	bic.w	r2, r2, #4
 8003c2c:	f840 2bd8 	str.w	r2, [r0], #216
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	f7fc faad 	bl	8000190 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8003c36:	e6df      	b.n	80039f8 <_Unwind_VRS_Pop+0xa0>
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	f43f af67 	beq.w	8003b0c <_Unwind_VRS_Pop+0x1b4>
 8003c3e:	2f0f      	cmp	r7, #15
 8003c40:	63b2      	str	r2, [r6, #56]	@ 0x38
 8003c42:	f63f aea1 	bhi.w	8003988 <_Unwind_VRS_Pop+0x30>
 8003c46:	e7de      	b.n	8003c06 <_Unwind_VRS_Pop+0x2ae>

08003c48 <next_unwind_byte>:
 8003c48:	7a02      	ldrb	r2, [r0, #8]
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	b97a      	cbnz	r2, 8003c6e <next_unwind_byte+0x26>
 8003c4e:	7a42      	ldrb	r2, [r0, #9]
 8003c50:	b1a2      	cbz	r2, 8003c7c <next_unwind_byte+0x34>
 8003c52:	6841      	ldr	r1, [r0, #4]
 8003c54:	3a01      	subs	r2, #1
 8003c56:	b410      	push	{r4}
 8003c58:	7242      	strb	r2, [r0, #9]
 8003c5a:	6808      	ldr	r0, [r1, #0]
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	1d0c      	adds	r4, r1, #4
 8003c60:	721a      	strb	r2, [r3, #8]
 8003c62:	0202      	lsls	r2, r0, #8
 8003c64:	605c      	str	r4, [r3, #4]
 8003c66:	0e00      	lsrs	r0, r0, #24
 8003c68:	bc10      	pop	{r4}
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	4770      	bx	lr
 8003c6e:	6800      	ldr	r0, [r0, #0]
 8003c70:	3a01      	subs	r2, #1
 8003c72:	721a      	strb	r2, [r3, #8]
 8003c74:	0202      	lsls	r2, r0, #8
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	0e00      	lsrs	r0, r0, #24
 8003c7a:	4770      	bx	lr
 8003c7c:	20b0      	movs	r0, #176	@ 0xb0
 8003c7e:	4770      	bx	lr

08003c80 <__gnu_unwind_execute>:
 8003c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c84:	4606      	mov	r6, r0
 8003c86:	b085      	sub	sp, #20
 8003c88:	460d      	mov	r5, r1
 8003c8a:	f04f 0800 	mov.w	r8, #0
 8003c8e:	4628      	mov	r0, r5
 8003c90:	f7ff ffda 	bl	8003c48 <next_unwind_byte>
 8003c94:	28b0      	cmp	r0, #176	@ 0xb0
 8003c96:	4604      	mov	r4, r0
 8003c98:	f000 811c 	beq.w	8003ed4 <__gnu_unwind_execute+0x254>
 8003c9c:	0607      	lsls	r7, r0, #24
 8003c9e:	d55b      	bpl.n	8003d58 <__gnu_unwind_execute+0xd8>
 8003ca0:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8003ca4:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ca6:	d01a      	beq.n	8003cde <__gnu_unwind_execute+0x5e>
 8003ca8:	d830      	bhi.n	8003d0c <__gnu_unwind_execute+0x8c>
 8003caa:	2b80      	cmp	r3, #128	@ 0x80
 8003cac:	f000 8082 	beq.w	8003db4 <__gnu_unwind_execute+0x134>
 8003cb0:	2b90      	cmp	r3, #144	@ 0x90
 8003cb2:	d127      	bne.n	8003d04 <__gnu_unwind_execute+0x84>
 8003cb4:	f000 030d 	and.w	r3, r0, #13
 8003cb8:	2b0d      	cmp	r3, #13
 8003cba:	d023      	beq.n	8003d04 <__gnu_unwind_execute+0x84>
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f000 020f 	and.w	r2, r0, #15
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	9700      	str	r7, [sp, #0]
 8003cc8:	4630      	mov	r0, r6
 8003cca:	f7ff fc57 	bl	800357c <_Unwind_VRS_Get>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9700      	str	r7, [sp, #0]
 8003cd2:	220d      	movs	r2, #13
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	f7ff fc78 	bl	80035cc <_Unwind_VRS_Set>
 8003cdc:	e7d7      	b.n	8003c8e <__gnu_unwind_execute+0xe>
 8003cde:	43c3      	mvns	r3, r0
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8003ce8:	411a      	asrs	r2, r3
 8003cea:	0701      	lsls	r1, r0, #28
 8003cec:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8003cf0:	d501      	bpl.n	8003cf6 <__gnu_unwind_execute+0x76>
 8003cf2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4630      	mov	r0, r6
 8003cfc:	f7ff fe2c 	bl	8003958 <_Unwind_VRS_Pop>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d0c4      	beq.n	8003c8e <__gnu_unwind_execute+0xe>
 8003d04:	2009      	movs	r0, #9
 8003d06:	b005      	add	sp, #20
 8003d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d0c:	2bb0      	cmp	r3, #176	@ 0xb0
 8003d0e:	d068      	beq.n	8003de2 <__gnu_unwind_execute+0x162>
 8003d10:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d12:	d13d      	bne.n	8003d90 <__gnu_unwind_execute+0x110>
 8003d14:	28c6      	cmp	r0, #198	@ 0xc6
 8003d16:	f000 80ca 	beq.w	8003eae <__gnu_unwind_execute+0x22e>
 8003d1a:	28c7      	cmp	r0, #199	@ 0xc7
 8003d1c:	f000 80df 	beq.w	8003ede <__gnu_unwind_execute+0x25e>
 8003d20:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8003d24:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d26:	f000 80ec 	beq.w	8003f02 <__gnu_unwind_execute+0x282>
 8003d2a:	28c8      	cmp	r0, #200	@ 0xc8
 8003d2c:	f000 80f7 	beq.w	8003f1e <__gnu_unwind_execute+0x29e>
 8003d30:	28c9      	cmp	r0, #201	@ 0xc9
 8003d32:	d1e7      	bne.n	8003d04 <__gnu_unwind_execute+0x84>
 8003d34:	4628      	mov	r0, r5
 8003d36:	f7ff ff87 	bl	8003c48 <next_unwind_byte>
 8003d3a:	0302      	lsls	r2, r0, #12
 8003d3c:	f000 000f 	and.w	r0, r0, #15
 8003d40:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8003d44:	3001      	adds	r0, #1
 8003d46:	4302      	orrs	r2, r0
 8003d48:	2101      	movs	r1, #1
 8003d4a:	2305      	movs	r3, #5
 8003d4c:	4630      	mov	r0, r6
 8003d4e:	f7ff fe03 	bl	8003958 <_Unwind_VRS_Pop>
 8003d52:	2800      	cmp	r0, #0
 8003d54:	d09b      	beq.n	8003c8e <__gnu_unwind_execute+0xe>
 8003d56:	e7d5      	b.n	8003d04 <__gnu_unwind_execute+0x84>
 8003d58:	0083      	lsls	r3, r0, #2
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	1d1f      	adds	r7, r3, #4
 8003d5e:	f10d 0908 	add.w	r9, sp, #8
 8003d62:	2300      	movs	r3, #0
 8003d64:	4619      	mov	r1, r3
 8003d66:	f8cd 9000 	str.w	r9, [sp]
 8003d6a:	220d      	movs	r2, #13
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	f7ff fc05 	bl	800357c <_Unwind_VRS_Get>
 8003d72:	9b02      	ldr	r3, [sp, #8]
 8003d74:	f8cd 9000 	str.w	r9, [sp]
 8003d78:	0660      	lsls	r0, r4, #25
 8003d7a:	bf4c      	ite	mi
 8003d7c:	1bdf      	submi	r7, r3, r7
 8003d7e:	18ff      	addpl	r7, r7, r3
 8003d80:	2300      	movs	r3, #0
 8003d82:	220d      	movs	r2, #13
 8003d84:	4619      	mov	r1, r3
 8003d86:	4630      	mov	r0, r6
 8003d88:	9702      	str	r7, [sp, #8]
 8003d8a:	f7ff fc1f 	bl	80035cc <_Unwind_VRS_Set>
 8003d8e:	e77e      	b.n	8003c8e <__gnu_unwind_execute+0xe>
 8003d90:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8003d94:	2bd0      	cmp	r3, #208	@ 0xd0
 8003d96:	d1b5      	bne.n	8003d04 <__gnu_unwind_execute+0x84>
 8003d98:	f000 0207 	and.w	r2, r0, #7
 8003d9c:	3201      	adds	r2, #1
 8003d9e:	2305      	movs	r3, #5
 8003da0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003da4:	2101      	movs	r1, #1
 8003da6:	4630      	mov	r0, r6
 8003da8:	f7ff fdd6 	bl	8003958 <_Unwind_VRS_Pop>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	f43f af6e 	beq.w	8003c8e <__gnu_unwind_execute+0xe>
 8003db2:	e7a7      	b.n	8003d04 <__gnu_unwind_execute+0x84>
 8003db4:	4628      	mov	r0, r5
 8003db6:	f7ff ff47 	bl	8003c48 <next_unwind_byte>
 8003dba:	0224      	lsls	r4, r4, #8
 8003dbc:	4320      	orrs	r0, r4
 8003dbe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003dc2:	d09f      	beq.n	8003d04 <__gnu_unwind_execute+0x84>
 8003dc4:	0104      	lsls	r4, r0, #4
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	b2a2      	uxth	r2, r4
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4630      	mov	r0, r6
 8003dce:	f7ff fdc3 	bl	8003958 <_Unwind_VRS_Pop>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	d196      	bne.n	8003d04 <__gnu_unwind_execute+0x84>
 8003dd6:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8003dda:	bf18      	it	ne
 8003ddc:	f04f 0801 	movne.w	r8, #1
 8003de0:	e755      	b.n	8003c8e <__gnu_unwind_execute+0xe>
 8003de2:	f1a0 03b1 	sub.w	r3, r0, #177	@ 0xb1
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	f200 80b5 	bhi.w	8003f56 <__gnu_unwind_execute+0x2d6>
 8003dec:	e8df f003 	tbb	[pc, r3]
 8003df0:	0c162955 	.word	0x0c162955
 8003df4:	03          	.byte	0x03
 8003df5:	00          	.byte	0x00
 8003df6:	aa03      	add	r2, sp, #12
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9200      	str	r2, [sp, #0]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	220d      	movs	r2, #13
 8003e00:	4630      	mov	r0, r6
 8003e02:	f7ff fbbb 	bl	800357c <_Unwind_VRS_Get>
 8003e06:	e742      	b.n	8003c8e <__gnu_unwind_execute+0xe>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2105      	movs	r1, #5
 8003e0e:	4630      	mov	r0, r6
 8003e10:	f7ff fda2 	bl	8003958 <_Unwind_VRS_Pop>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	f43f af3a 	beq.w	8003c8e <__gnu_unwind_execute+0xe>
 8003e1a:	e773      	b.n	8003d04 <__gnu_unwind_execute+0x84>
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	f7ff ff13 	bl	8003c48 <next_unwind_byte>
 8003e22:	0302      	lsls	r2, r0, #12
 8003e24:	f000 000f 	and.w	r0, r0, #15
 8003e28:	3001      	adds	r0, #1
 8003e2a:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8003e2e:	2301      	movs	r3, #1
 8003e30:	4302      	orrs	r2, r0
 8003e32:	4619      	mov	r1, r3
 8003e34:	4630      	mov	r0, r6
 8003e36:	f7ff fd8f 	bl	8003958 <_Unwind_VRS_Pop>
 8003e3a:	2800      	cmp	r0, #0
 8003e3c:	f43f af27 	beq.w	8003c8e <__gnu_unwind_execute+0xe>
 8003e40:	e760      	b.n	8003d04 <__gnu_unwind_execute+0x84>
 8003e42:	2300      	movs	r3, #0
 8003e44:	f10d 0908 	add.w	r9, sp, #8
 8003e48:	220d      	movs	r2, #13
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	f8cd 9000 	str.w	r9, [sp]
 8003e50:	4630      	mov	r0, r6
 8003e52:	f7ff fb93 	bl	800357c <_Unwind_VRS_Get>
 8003e56:	4628      	mov	r0, r5
 8003e58:	f7ff fef6 	bl	8003c48 <next_unwind_byte>
 8003e5c:	0602      	lsls	r2, r0, #24
 8003e5e:	9c02      	ldr	r4, [sp, #8]
 8003e60:	f04f 0702 	mov.w	r7, #2
 8003e64:	d50b      	bpl.n	8003e7e <__gnu_unwind_execute+0x1fe>
 8003e66:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003e6a:	40b8      	lsls	r0, r7
 8003e6c:	4404      	add	r4, r0
 8003e6e:	4628      	mov	r0, r5
 8003e70:	9402      	str	r4, [sp, #8]
 8003e72:	f7ff fee9 	bl	8003c48 <next_unwind_byte>
 8003e76:	0603      	lsls	r3, r0, #24
 8003e78:	f107 0707 	add.w	r7, r7, #7
 8003e7c:	d4f3      	bmi.n	8003e66 <__gnu_unwind_execute+0x1e6>
 8003e7e:	40b8      	lsls	r0, r7
 8003e80:	2300      	movs	r3, #0
 8003e82:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8003e86:	4404      	add	r4, r0
 8003e88:	f8cd 9000 	str.w	r9, [sp]
 8003e8c:	220d      	movs	r2, #13
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4630      	mov	r0, r6
 8003e92:	9402      	str	r4, [sp, #8]
 8003e94:	f7ff fb9a 	bl	80035cc <_Unwind_VRS_Set>
 8003e98:	e6f9      	b.n	8003c8e <__gnu_unwind_execute+0xe>
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	f7ff fed4 	bl	8003c48 <next_unwind_byte>
 8003ea0:	1e43      	subs	r3, r0, #1
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b0e      	cmp	r3, #14
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	f67f af25 	bls.w	8003cf6 <__gnu_unwind_execute+0x76>
 8003eac:	e72a      	b.n	8003d04 <__gnu_unwind_execute+0x84>
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f7ff feca 	bl	8003c48 <next_unwind_byte>
 8003eb4:	0302      	lsls	r2, r0, #12
 8003eb6:	f000 000f 	and.w	r0, r0, #15
 8003eba:	3001      	adds	r0, #1
 8003ebc:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	4302      	orrs	r2, r0
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	f7ff fd46 	bl	8003958 <_Unwind_VRS_Pop>
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	f43f aede 	beq.w	8003c8e <__gnu_unwind_execute+0xe>
 8003ed2:	e717      	b.n	8003d04 <__gnu_unwind_execute+0x84>
 8003ed4:	f1b8 0f00 	cmp.w	r8, #0
 8003ed8:	d02d      	beq.n	8003f36 <__gnu_unwind_execute+0x2b6>
 8003eda:	2000      	movs	r0, #0
 8003edc:	e713      	b.n	8003d06 <__gnu_unwind_execute+0x86>
 8003ede:	4628      	mov	r0, r5
 8003ee0:	f7ff feb2 	bl	8003c48 <next_unwind_byte>
 8003ee4:	1e43      	subs	r3, r0, #1
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b0e      	cmp	r3, #14
 8003eea:	4602      	mov	r2, r0
 8003eec:	f63f af0a 	bhi.w	8003d04 <__gnu_unwind_execute+0x84>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	2104      	movs	r1, #4
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	f7ff fd2f 	bl	8003958 <_Unwind_VRS_Pop>
 8003efa:	2800      	cmp	r0, #0
 8003efc:	f43f aec7 	beq.w	8003c8e <__gnu_unwind_execute+0xe>
 8003f00:	e700      	b.n	8003d04 <__gnu_unwind_execute+0x84>
 8003f02:	f000 020f 	and.w	r2, r0, #15
 8003f06:	3201      	adds	r2, #1
 8003f08:	2303      	movs	r3, #3
 8003f0a:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4630      	mov	r0, r6
 8003f12:	f7ff fd21 	bl	8003958 <_Unwind_VRS_Pop>
 8003f16:	2800      	cmp	r0, #0
 8003f18:	f43f aeb9 	beq.w	8003c8e <__gnu_unwind_execute+0xe>
 8003f1c:	e6f2      	b.n	8003d04 <__gnu_unwind_execute+0x84>
 8003f1e:	4628      	mov	r0, r5
 8003f20:	f7ff fe92 	bl	8003c48 <next_unwind_byte>
 8003f24:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8003f28:	f000 030f 	and.w	r3, r0, #15
 8003f2c:	3210      	adds	r2, #16
 8003f2e:	3301      	adds	r3, #1
 8003f30:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8003f34:	e708      	b.n	8003d48 <__gnu_unwind_execute+0xc8>
 8003f36:	ac02      	add	r4, sp, #8
 8003f38:	4643      	mov	r3, r8
 8003f3a:	4641      	mov	r1, r8
 8003f3c:	9400      	str	r4, [sp, #0]
 8003f3e:	220e      	movs	r2, #14
 8003f40:	4630      	mov	r0, r6
 8003f42:	f7ff fb1b 	bl	800357c <_Unwind_VRS_Get>
 8003f46:	220f      	movs	r2, #15
 8003f48:	9400      	str	r4, [sp, #0]
 8003f4a:	4643      	mov	r3, r8
 8003f4c:	4641      	mov	r1, r8
 8003f4e:	4630      	mov	r0, r6
 8003f50:	f7ff fb3c 	bl	80035cc <_Unwind_VRS_Set>
 8003f54:	e7c1      	b.n	8003eda <__gnu_unwind_execute+0x25a>
 8003f56:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8003f5a:	2bb4      	cmp	r3, #180	@ 0xb4
 8003f5c:	f43f aed2 	beq.w	8003d04 <__gnu_unwind_execute+0x84>
 8003f60:	f000 0207 	and.w	r2, r0, #7
 8003f64:	3201      	adds	r2, #1
 8003f66:	2301      	movs	r3, #1
 8003f68:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4630      	mov	r0, r6
 8003f70:	f7ff fcf2 	bl	8003958 <_Unwind_VRS_Pop>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	f43f ae8a 	beq.w	8003c8e <__gnu_unwind_execute+0xe>
 8003f7a:	e6c3      	b.n	8003d04 <__gnu_unwind_execute+0x84>

08003f7c <abort>:
 8003f7c:	b508      	push	{r3, lr}
 8003f7e:	2006      	movs	r0, #6
 8003f80:	f000 f82c 	bl	8003fdc <raise>
 8003f84:	2001      	movs	r0, #1
 8003f86:	f7fc fb0d 	bl	80005a4 <_exit>

08003f8a <_raise_r>:
 8003f8a:	291f      	cmp	r1, #31
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4605      	mov	r5, r0
 8003f90:	460c      	mov	r4, r1
 8003f92:	d904      	bls.n	8003f9e <_raise_r+0x14>
 8003f94:	2316      	movs	r3, #22
 8003f96:	6003      	str	r3, [r0, #0]
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	bd38      	pop	{r3, r4, r5, pc}
 8003f9e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003fa0:	b112      	cbz	r2, 8003fa8 <_raise_r+0x1e>
 8003fa2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003fa6:	b94b      	cbnz	r3, 8003fbc <_raise_r+0x32>
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f000 f831 	bl	8004010 <_getpid_r>
 8003fae:	4622      	mov	r2, r4
 8003fb0:	4601      	mov	r1, r0
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fb8:	f000 b818 	b.w	8003fec <_kill_r>
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d00a      	beq.n	8003fd6 <_raise_r+0x4c>
 8003fc0:	1c59      	adds	r1, r3, #1
 8003fc2:	d103      	bne.n	8003fcc <_raise_r+0x42>
 8003fc4:	2316      	movs	r3, #22
 8003fc6:	6003      	str	r3, [r0, #0]
 8003fc8:	2001      	movs	r0, #1
 8003fca:	e7e7      	b.n	8003f9c <_raise_r+0x12>
 8003fcc:	2100      	movs	r1, #0
 8003fce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	4798      	blx	r3
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	e7e0      	b.n	8003f9c <_raise_r+0x12>
	...

08003fdc <raise>:
 8003fdc:	4b02      	ldr	r3, [pc, #8]	@ (8003fe8 <raise+0xc>)
 8003fde:	4601      	mov	r1, r0
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	f7ff bfd2 	b.w	8003f8a <_raise_r>
 8003fe6:	bf00      	nop
 8003fe8:	20000000 	.word	0x20000000

08003fec <_kill_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4d07      	ldr	r5, [pc, #28]	@ (800400c <_kill_r+0x20>)
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	602b      	str	r3, [r5, #0]
 8003ffa:	f7fc facb 	bl	8000594 <_kill>
 8003ffe:	1c43      	adds	r3, r0, #1
 8004000:	d102      	bne.n	8004008 <_kill_r+0x1c>
 8004002:	682b      	ldr	r3, [r5, #0]
 8004004:	b103      	cbz	r3, 8004008 <_kill_r+0x1c>
 8004006:	6023      	str	r3, [r4, #0]
 8004008:	bd38      	pop	{r3, r4, r5, pc}
 800400a:	bf00      	nop
 800400c:	200001ac 	.word	0x200001ac

08004010 <_getpid_r>:
 8004010:	f7fc babe 	b.w	8000590 <_getpid>

08004014 <__errno>:
 8004014:	4b01      	ldr	r3, [pc, #4]	@ (800401c <__errno+0x8>)
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	20000000 	.word	0x20000000

08004020 <memcpy>:
 8004020:	440a      	add	r2, r1
 8004022:	4291      	cmp	r1, r2
 8004024:	f100 33ff 	add.w	r3, r0, #4294967295
 8004028:	d100      	bne.n	800402c <memcpy+0xc>
 800402a:	4770      	bx	lr
 800402c:	b510      	push	{r4, lr}
 800402e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004036:	4291      	cmp	r1, r2
 8004038:	d1f9      	bne.n	800402e <memcpy+0xe>
 800403a:	bd10      	pop	{r4, pc}

0800403c <_init>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	bf00      	nop
 8004040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004042:	bc08      	pop	{r3}
 8004044:	469e      	mov	lr, r3
 8004046:	4770      	bx	lr

08004048 <_fini>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	bf00      	nop
 800404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404e:	bc08      	pop	{r3}
 8004050:	469e      	mov	lr, r3
 8004052:	4770      	bx	lr
